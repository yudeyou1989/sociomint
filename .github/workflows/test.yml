name: SocioMint CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # 允许手动触发

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  NEXT_PUBLIC_SM_TOKEN_ADDRESS: ${{ secrets.NEXT_PUBLIC_SM_TOKEN_ADDRESS }}
  NEXT_PUBLIC_SM_EXCHANGE_ADDRESS: ${{ secrets.NEXT_PUBLIC_SM_EXCHANGE_ADDRESS }}

jobs:
  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run ESLint
      run: npm run lint --if-present
      continue-on-error: true

    - name: Run Prettier check
      run: npm run prettier:check --if-present
      continue-on-error: true

    - name: Run TypeScript check
      run: npm run type-check --if-present
      continue-on-error: true

  # 测试套件
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        test-group: [unit, integration, performance, components]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run tests - ${{ matrix.test-group }}
      run: |
        case "${{ matrix.test-group }}" in
          "unit")
            npm test -- --testPathPattern="simple|formatters" --coverage --watchAll=false --maxWorkers=2
            ;;
          "integration")
            npm test -- --testPathPattern="integration" --watchAll=false --maxWorkers=2
            ;;
          "performance")
            npm test -- --testPathPattern="performance" --watchAll=false --maxWorkers=2
            ;;
          "components")
            npm test -- --testPathPattern="components" --watchAll=false --maxWorkers=2
            ;;
        esac

    - name: Upload coverage reports
      if: matrix.test-group == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-${{ matrix.test-group }}
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-group }}
        path: |
          coverage/
          test-results/
        retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          .next/
          out/

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx audit-ci --moderate

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run code quality checks
      run: |
        npm run lint --if-present
        npm run prettier:check --if-present

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for preview
      run: npm run build

    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      if: ${{ secrets.VERCEL_TOKEN != '' }}
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
