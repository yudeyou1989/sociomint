{"version":3,"names":["cov_9j3vuy9ti","actualCoverage","s","_default","SpatialGrid","constructor","cellSize","f","grid","Map","getCellKey","x","y","cellX","Math","floor","cellY","addParticle","index","key","has","b","set","get","push","clear","getPotentialNeighbors","neighbors","i","j","cellParticles","BackgroundEffect","canvasRef","_react","useRef","animationRef","particlesRef","gridRef","useEffect","canvas","current","ctx","getContext","alpha","resizeCanvas","width","window","innerWidth","height","innerHeight","initParticles","resizeTimeout","throttledResize","clearTimeout","setTimeout","addEventListener","colors","lineOpacities","particles","particleCount","min","random","size","speedX","speedY","color","length","updateGrid","forEach","particle","filter","drawParticles","clearRect","frameCount","beginPath","arc","PI","fillStyle","fill","neighborIndex","neighbor","dx","dy","abs","distance","sqrt","opacityIndex","strokeStyle","lineWidth","moveTo","lineTo","stroke","requestAnimationFrame","removeEventListener","cancelAnimationFrame","_jsxruntime","jsx","ref","className","style","opacity","memo"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/components/ui/BackgroundEffect.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, memo } from 'react';\n\ninterface Particle {\n  x: number;\n  y: number;\n  size: number;\n  speedX: number;\n  speedY: number;\n  color: string;\n  // 添加邻居列表，避免每帧都计算所有粒子对\n  neighbors: number[];\n}\n\n// 使用空间分区优化粒子连线计算\nclass SpatialGrid {\n  private grid: Map<string, number[]>;\n  private cellSize: number;\n\n  constructor(cellSize: number) {\n    this.grid = new Map();\n    this.cellSize = cellSize;\n  }\n\n  // 获取粒子所在的网格坐标\n  private getCellKey(x: number, y: number): string {\n    const cellX = Math.floor(x / this.cellSize);\n    const cellY = Math.floor(y / this.cellSize);\n    return `${cellX},${cellY}`;\n  }\n\n  // 添加粒子到网格\n  addParticle(index: number, x: number, y: number): void {\n    const key = this.getCellKey(x, y);\n    if (!this.grid.has(key)) {\n      this.grid.set(key, []);\n    }\n    this.grid.get(key)?.push(index);\n  }\n\n  // 清空网格\n  clear(): void {\n    this.grid.clear();\n  }\n\n  // 获取可能的邻居粒子\n  getPotentialNeighbors(x: number, y: number): number[] {\n    const cellX = Math.floor(x / this.cellSize);\n    const cellY = Math.floor(y / this.cellSize);\n    const neighbors: number[] = [];\n\n    // 检查当前网格和周围8个网格\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const key = `${cellX + i},${cellY + j}`;\n        const cellParticles = this.grid.get(key);\n        if (cellParticles) {\n          neighbors.push(...cellParticles);\n        }\n      }\n    }\n\n    return neighbors;\n  }\n}\n\nfunction BackgroundEffect() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>(0);\n  const particlesRef = useRef<Particle[]>([]);\n  const gridRef = useRef<SpatialGrid>(new SpatialGrid(100)); // 网格大小等于连线距离\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d', { alpha: true });\n    if (!ctx) return;\n\n    // 设置canvas尺寸为窗口大小\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      // 重新初始化粒子\n      initParticles();\n    };\n\n    // 使用节流函数处理resize事件\n    let resizeTimeout: NodeJS.Timeout;\n    const throttledResize = () => {\n      if (resizeTimeout) clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(resizeCanvas, 200);\n    };\n\n    window.addEventListener('resize', throttledResize);\n\n    // 颜色预计算，避免每帧重新创建颜色字符串\n    const colors = [\n      'rgba(105, 60, 255, 0.5)', // 紫色 (primary)\n      'rgba(0, 180, 216, 0.5)', // 青色 (secondary)\n      'rgba(255, 255, 255, 0.3)', // 白色\n    ];\n\n    // 预计算连线透明度\n    const lineOpacities: number[] = [];\n    for (let i = 0; i <= 100; i++) {\n      lineOpacities[i] = 0.1 * (1 - i / 100);\n    }\n\n    // 初始化粒子\n    const initParticles = () => {\n      const particles: Particle[] = [];\n      // 根据屏幕大小调整粒子数量，但设置上限以保持性能\n      const particleCount = Math.min(Math.floor((canvas.width * canvas.height) / 20000), 60);\n\n      for (let i = 0; i < particleCount; i++) {\n        particles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          size: Math.random() * 2 + 1,\n          speedX: (Math.random() - 0.5) * 0.3,\n          speedY: (Math.random() - 0.5) * 0.3,\n          color: colors[Math.floor(Math.random() * colors.length)],\n          neighbors: []\n        });\n      }\n\n      particlesRef.current = particles;\n    };\n\n    // 更新空间网格\n    const updateGrid = () => {\n      const grid = gridRef.current;\n      const particles = particlesRef.current;\n\n      grid.clear();\n\n      // 将粒子添加到网格\n      particles.forEach((particle, index) => {\n        grid.addParticle(index, particle.x, particle.y);\n      });\n\n      // 更新每个粒子的邻居列表\n      particles.forEach((particle, index) => {\n        particle.neighbors = grid.getPotentialNeighbors(particle.x, particle.y)\n          .filter(i => i !== index);\n      });\n    };\n\n    // 绘制粒子\n    const drawParticles = () => {\n      if (!canvas || !ctx) return;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      const particles = particlesRef.current;\n\n      // 每10帧更新一次网格和邻居关系\n      if (frameCount % 10 === 0) {\n        updateGrid();\n      }\n\n      // 绘制粒子和连线\n      particles.forEach((particle, index) => {\n        // 绘制粒子\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = particle.color;\n        ctx.fill();\n\n        // 更新粒子位置\n        particle.x += particle.speedX;\n        particle.y += particle.speedY;\n\n        // 边界检查 - 使用模运算简化代码\n        particle.x = (particle.x + canvas.width) % canvas.width;\n        particle.y = (particle.y + canvas.height) % canvas.height;\n\n        // 只连接预计算的邻居粒子\n        particle.neighbors.forEach(neighborIndex => {\n          const neighbor = particles[neighborIndex];\n          const dx = particle.x - neighbor.x;\n          const dy = particle.y - neighbor.y;\n\n          // 使用曼哈顿距离作为初步筛选，减少计算量\n          if (Math.abs(dx) < 100 && Math.abs(dy) < 100) {\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < 100) {\n              const opacityIndex = Math.floor(distance);\n              ctx.beginPath();\n              ctx.strokeStyle = `rgba(120, 120, 255, ${lineOpacities[opacityIndex]})`;\n              ctx.lineWidth = 0.5;\n              ctx.moveTo(particle.x, particle.y);\n              ctx.lineTo(neighbor.x, neighbor.y);\n              ctx.stroke();\n            }\n          }\n        });\n      });\n\n      frameCount++;\n      animationRef.current = requestAnimationFrame(drawParticles);\n    };\n\n    // 初始化\n    let frameCount = 0;\n    resizeCanvas();\n    drawParticles();\n\n    // 清理函数\n    return () => {\n      window.removeEventListener('resize', throttledResize);\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed top-0 left-0 w-full h-full -z-10\"\n      style={{ opacity: 0.6 }}\n    />\n  );\n}\n\n// 使用memo包装组件，避免不必要的重新渲染\nexport default memo(BackgroundEffect);\n"],"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","ignoreList":[]}