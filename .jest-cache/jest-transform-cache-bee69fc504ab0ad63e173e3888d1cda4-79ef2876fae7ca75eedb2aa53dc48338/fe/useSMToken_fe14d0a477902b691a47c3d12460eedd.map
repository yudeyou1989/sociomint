{"version":3,"names":["cov_n04x43rcn","actualCoverage","s","useSMToken","f","address","isConnected","_wagmi","useAccount","MINTER_ROLE","_viem","keccak256","toBytes","data","tokenName","useReadContract","_contracts","CONTRACT_ADDRESSES","token","abi","SM_TOKEN_ABI","functionName","query","enabled","tokenSymbol","balance","refetch","refetchBalance","args","b","undefined","hasMinterRole","scheduleMintData","writeContract","scheduleMint","isPending","isSchedulingMint","isSuccess","isScheduleMintSuccess","error","scheduleMintError","useWriteContract","isLoading","isScheduleMintPending","isScheduleMintConfirmed","useWaitForTransactionReceipt","hash","executeMintData","executeMint","isExecutingMint","isExecuteMintSuccess","executeMintError","isExecuteMintPending","isExecuteMintConfirmed","scheduleMintTxHash","executeMintTxHash"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useSMToken.ts"],"sourcesContent":["'use client';\n\nimport { useAccount, useReadContract, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';\nimport { CONTRACT_ADDRESSES, SM_TOKEN_ABI } from '@/config/contracts';\nimport { keccak256, toBytes } from 'viem';\n\nexport function useSMToken() {\n  const { address, isConnected } = useAccount();\n\n  // 安全地计算角色哈希，避免硬编码\n  const MINTER_ROLE = keccak256(toBytes('MINTER_ROLE'));\n\n  // 获取代币信息\n  const { data: tokenName } = useReadContract({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'name',\n    query: { enabled: isConnected },\n  });\n\n  const { data: tokenSymbol } = useReadContract({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'symbol',\n    query: { enabled: isConnected },\n  });\n\n  // 获取用户余额\n  const { data: balance, refetch: refetchBalance } = useReadContract({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'balanceOf',\n    args: address ? [address] : undefined,\n    query: { enabled: isConnected && !!address },\n  });\n\n  // 检查用户角色\n  const { data: hasMinterRole } = useReadContract({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'hasRole',\n    args: address ? [MINTER_ROLE, address] : undefined,\n    query: { enabled: isConnected && !!address },\n  });\n\n  // 安排铸币函数\n  const {\n    data: scheduleMintData,\n    writeContract: scheduleMint,\n    isPending: isSchedulingMint,\n    isSuccess: isScheduleMintSuccess,\n    error: scheduleMintError\n  } = useWriteContract();\n\n  // 等待铸币交易确认\n  const {\n    isLoading: isScheduleMintPending,\n    isSuccess: isScheduleMintConfirmed\n  } = useWaitForTransactionReceipt({\n    hash: scheduleMintData,\n  });\n\n  // 执行铸币函数\n  const {\n    data: executeMintData,\n    writeContract: executeMint,\n    isPending: isExecutingMint,\n    isSuccess: isExecuteMintSuccess,\n    error: executeMintError\n  } = useWriteContract();\n\n  // 等待执行铸币交易确认\n  const {\n    isLoading: isExecuteMintPending,\n    isSuccess: isExecuteMintConfirmed\n  } = useWaitForTransactionReceipt({\n    hash: executeMintData,\n  });\n\n  return {\n    // 代币信息\n    tokenName,\n    tokenSymbol,\n    balance,\n    refetchBalance,\n\n    // 用户角色\n    hasMinterRole,\n\n    // 铸币功能\n    scheduleMint,\n    isSchedulingMint: isSchedulingMint || isScheduleMintPending,\n    isScheduleMintSuccess: isScheduleMintSuccess && isScheduleMintConfirmed,\n    scheduleMintError,\n    scheduleMintTxHash: scheduleMintData,\n\n    executeMint,\n    isExecutingMint: isExecutingMint || isExecuteMintPending,\n    isExecuteMintSuccess: isExecuteMintSuccess && isExecuteMintConfirmed,\n    executeMintError,\n    executeMintTxHash: executeMintData,\n\n    // 连接状态\n    isConnected,\n    address\n  };\n}\n"],"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","ignoreList":[]}