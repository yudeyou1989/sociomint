{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/components/SimpleComponent.test.tsx"],"sourcesContent":["/**\n * 简化的组件测试\n * 测试基础的 React 组件功能\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// 简单的计数器组件\nconst Counter = ({ initialValue = 0 }: { initialValue?: number }) => {\n  const [count, setCount] = React.useState(initialValue);\n  const [loading, setLoading] = React.useState(false);\n\n  const increment = () => setCount(prev => prev + 1);\n  const decrement = () => setCount(prev => prev - 1);\n  const reset = () => setCount(initialValue);\n\n  const asyncIncrement = async () => {\n    setLoading(true);\n    await new Promise(resolve => setTimeout(resolve, 100));\n    setCount(prev => prev + 1);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <div data-testid=\"count\">{count}</div>\n      <div data-testid=\"loading\">{loading ? 'Loading...' : 'Ready'}</div>\n      <button onClick={increment} data-testid=\"increment\">\n        +\n      </button>\n      <button onClick={decrement} data-testid=\"decrement\">\n        -\n      </button>\n      <button onClick={reset} data-testid=\"reset\">\n        Reset\n      </button>\n      <button onClick={asyncIncrement} data-testid=\"async-increment\" disabled={loading}>\n        Async +\n      </button>\n    </div>\n  );\n};\n\n// 表单组件\nconst SimpleForm = ({ onSubmit }: { onSubmit: (data: { name: string; email: string }) => void }) => {\n  const [name, setName] = React.useState('');\n  const [email, setEmail] = React.useState('');\n  const [errors, setErrors] = React.useState<{ name?: string; email?: string }>({});\n\n  const validate = () => {\n    const newErrors: { name?: string; email?: string } = {};\n\n    if (!name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n\n    if (!email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (validate()) {\n      onSubmit({ name, email });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          data-testid=\"name-input\"\n        />\n        {errors.name && <div data-testid=\"name-error\">{errors.name}</div>}\n      </div>\n      <div>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          data-testid=\"email-input\"\n        />\n        {errors.email && <div data-testid=\"email-error\">{errors.email}</div>}\n      </div>\n      <button type=\"submit\" data-testid=\"submit-button\">\n        Submit\n      </button>\n    </form>\n  );\n};\n\n// 模拟钱包连接组件\nconst MockWalletConnect = () => {\n  const [isConnected, setIsConnected] = React.useState(false);\n  const [address, setAddress] = React.useState('');\n  const [balance, setBalance] = React.useState('0');\n  const [loading, setLoading] = React.useState(false);\n\n  const connect = async () => {\n    setLoading(true);\n    try {\n      // 模拟连接延迟\n      await new Promise(resolve => setTimeout(resolve, 200));\n      setIsConnected(true);\n      setAddress('0x123456789abcdef123456789abcdef123456789a');\n      setBalance('1.5');\n    } catch (error) {\n      console.error('Connection failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const disconnect = () => {\n    setIsConnected(false);\n    setAddress('');\n    setBalance('0');\n  };\n\n  return (\n    <div>\n      <div data-testid=\"connection-status\">\n        {isConnected ? 'Connected' : 'Not Connected'}\n      </div>\n      <div data-testid=\"address\">{address}</div>\n      <div data-testid=\"balance\">{balance} ETH</div>\n      <div data-testid=\"loading-status\">\n        {loading ? 'Connecting...' : 'Ready'}\n      </div>\n      {!isConnected ? (\n        <button onClick={connect} disabled={loading} data-testid=\"connect-button\">\n          Connect Wallet\n        </button>\n      ) : (\n        <button onClick={disconnect} data-testid=\"disconnect-button\">\n          Disconnect\n        </button>\n      )}\n    </div>\n  );\n};\n\ndescribe('Simple Component Tests', () => {\n  describe('Counter Component', () => {\n    it('renders with initial value', () => {\n      render(<Counter initialValue={5} />);\n      expect(screen.getByTestId('count')).toHaveTextContent('5');\n    });\n\n    it('increments count', () => {\n      render(<Counter />);\n      const incrementButton = screen.getByTestId('increment');\n\n      fireEvent.click(incrementButton);\n      expect(screen.getByTestId('count')).toHaveTextContent('1');\n\n      fireEvent.click(incrementButton);\n      expect(screen.getByTestId('count')).toHaveTextContent('2');\n    });\n\n    it('decrements count', () => {\n      render(<Counter initialValue={5} />);\n      const decrementButton = screen.getByTestId('decrement');\n\n      fireEvent.click(decrementButton);\n      expect(screen.getByTestId('count')).toHaveTextContent('4');\n    });\n\n    it('resets count', () => {\n      render(<Counter initialValue={3} />);\n      const incrementButton = screen.getByTestId('increment');\n      const resetButton = screen.getByTestId('reset');\n\n      fireEvent.click(incrementButton);\n      fireEvent.click(incrementButton);\n      expect(screen.getByTestId('count')).toHaveTextContent('5');\n\n      fireEvent.click(resetButton);\n      expect(screen.getByTestId('count')).toHaveTextContent('3');\n    });\n\n    it('handles async increment', async () => {\n      render(<Counter />);\n      const asyncButton = screen.getByTestId('async-increment');\n\n      fireEvent.click(asyncButton);\n\n      // 检查加载状态\n      expect(screen.getByTestId('loading')).toHaveTextContent('Loading...');\n      expect(asyncButton).toBeDisabled();\n\n      // 等待异步操作完成\n      await waitFor(() => {\n        expect(screen.getByTestId('count')).toHaveTextContent('1');\n        expect(screen.getByTestId('loading')).toHaveTextContent('Ready');\n      });\n\n      expect(asyncButton).not.toBeDisabled();\n    });\n  });\n\n  describe('SimpleForm Component', () => {\n    const mockSubmit = jest.fn();\n\n    beforeEach(() => {\n      mockSubmit.mockClear();\n    });\n\n    it('renders form fields', () => {\n      render(<SimpleForm onSubmit={mockSubmit} />);\n\n      expect(screen.getByTestId('name-input')).toBeInTheDocument();\n      expect(screen.getByTestId('email-input')).toBeInTheDocument();\n      expect(screen.getByTestId('submit-button')).toBeInTheDocument();\n    });\n\n    it('validates required fields', async () => {\n      const user = userEvent.setup();\n      render(<SimpleForm onSubmit={mockSubmit} />);\n\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      expect(screen.getByTestId('name-error')).toHaveTextContent('Name is required');\n      expect(screen.getByTestId('email-error')).toHaveTextContent('Email is required');\n      expect(mockSubmit).not.toHaveBeenCalled();\n    });\n\n    it('validates email format', async () => {\n      const user = userEvent.setup();\n      render(<SimpleForm onSubmit={mockSubmit} />);\n\n      const nameInput = screen.getByTestId('name-input');\n      const emailInput = screen.getByTestId('email-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      await user.type(nameInput, 'John Doe');\n      await user.type(emailInput, 'invalid-email');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('email-error')).toHaveTextContent('Email is invalid');\n      });\n      expect(mockSubmit).not.toHaveBeenCalled();\n    });\n\n    it('submits valid form', async () => {\n      const user = userEvent.setup();\n      render(<SimpleForm onSubmit={mockSubmit} />);\n\n      const nameInput = screen.getByTestId('name-input');\n      const emailInput = screen.getByTestId('email-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      await user.type(nameInput, 'John Doe');\n      await user.type(emailInput, 'john@example.com');\n      await user.click(submitButton);\n\n      expect(mockSubmit).toHaveBeenCalledWith({\n        name: 'John Doe',\n        email: 'john@example.com'\n      });\n    });\n  });\n\n  describe('MockWalletConnect Component', () => {\n    it('renders initial state', () => {\n      render(<MockWalletConnect />);\n\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n      expect(screen.getByTestId('address')).toHaveTextContent('');\n      expect(screen.getByTestId('balance')).toHaveTextContent('0 ETH');\n      expect(screen.getByTestId('connect-button')).toBeInTheDocument();\n    });\n\n    it('connects wallet', async () => {\n      render(<MockWalletConnect />);\n\n      const connectButton = screen.getByTestId('connect-button');\n      fireEvent.click(connectButton);\n\n      // 检查加载状态\n      expect(screen.getByTestId('loading-status')).toHaveTextContent('Connecting...');\n      expect(connectButton).toBeDisabled();\n\n      // 等待连接完成\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n        expect(screen.getByTestId('address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');\n        expect(screen.getByTestId('balance')).toHaveTextContent('1.5 ETH');\n      });\n\n      expect(screen.getByTestId('disconnect-button')).toBeInTheDocument();\n      expect(screen.queryByTestId('connect-button')).not.toBeInTheDocument();\n    });\n\n    it('disconnects wallet', async () => {\n      render(<MockWalletConnect />);\n\n      // 先连接\n      const connectButton = screen.getByTestId('connect-button');\n      fireEvent.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n      });\n\n      // 然后断开连接\n      await waitFor(() => {\n        expect(screen.getByTestId('disconnect-button')).toBeInTheDocument();\n      });\n\n      const disconnectButton = screen.getByTestId('disconnect-button');\n      fireEvent.click(disconnectButton);\n\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n      expect(screen.getByTestId('address')).toHaveTextContent('');\n      expect(screen.getByTestId('balance')).toHaveTextContent('0 ETH');\n      expect(screen.getByTestId('connect-button')).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["Counter","initialValue","count","setCount","React","useState","loading","setLoading","increment","prev","decrement","reset","asyncIncrement","Promise","resolve","setTimeout","div","data-testid","button","onClick","disabled","SimpleForm","onSubmit","name","setName","email","setEmail","errors","setErrors","validate","newErrors","trim","test","Object","keys","length","handleSubmit","e","preventDefault","form","input","type","placeholder","value","onChange","target","MockWalletConnect","isConnected","setIsConnected","address","setAddress","balance","setBalance","connect","error","console","disconnect","describe","it","render","expect","screen","getByTestId","toHaveTextContent","incrementButton","fireEvent","click","decrementButton","resetButton","asyncButton","toBeDisabled","waitFor","not","mockSubmit","jest","fn","beforeEach","mockClear","toBeInTheDocument","user","userEvent","setup","submitButton","toHaveBeenCalled","nameInput","emailInput","toHaveBeenCalledWith","connectButton","queryByTestId","disconnectButton"],"mappings":"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"}