{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/performance/Performance.test.tsx"],"sourcesContent":["/**\n * 性能测试\n * 测试组件渲染性能和交互性能\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// 性能测试工具函数\nconst measureRenderTime = (renderFn: () => void): number => {\n  const start = performance.now();\n  renderFn();\n  const end = performance.now();\n  return end - start;\n};\n\nconst measureAsyncOperation = async (asyncFn: () => Promise<void>): Promise<number> => {\n  const start = performance.now();\n  await asyncFn();\n  const end = performance.now();\n  return end - start;\n};\n\n// 模拟大数据量组件\nconst LargeDataComponent = ({ itemCount = 1000 }: { itemCount?: number }) => {\n  const [items] = React.useState(() => \n    Array.from({ length: itemCount }, (_, i) => ({\n      id: i,\n      name: `Item ${i}`,\n      value: Math.random() * 100,\n    }))\n  );\n\n  return (\n    <div data-testid=\"large-data-component\">\n      <h2>Large Data Component ({itemCount} items)</h2>\n      <div data-testid=\"items-container\">\n        {items.map((item) => (\n          <div key={item.id} data-testid={`item-${item.id}`}>\n            {item.name}: {item.value.toFixed(2)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// 模拟复杂交互组件\nconst ComplexInteractionComponent = () => {\n  const [count, setCount] = React.useState(0);\n  const [items, setItems] = React.useState<string[]>([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const handleAddItem = async () => {\n    setLoading(true);\n    // 模拟异步操作\n    await new Promise(resolve => setTimeout(resolve, 10));\n    setItems(prev => [...prev, `Item ${prev.length + 1}`]);\n    setLoading(false);\n  };\n\n  const handleIncrement = () => {\n    setCount(prev => prev + 1);\n  };\n\n  const handleBatchOperation = async () => {\n    setLoading(true);\n    // 模拟批量操作\n    for (let i = 0; i < 100; i++) {\n      setCount(prev => prev + 1);\n      await new Promise(resolve => setTimeout(resolve, 1));\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div data-testid=\"complex-interaction-component\">\n      <div data-testid=\"counter\">Count: {count}</div>\n      <button onClick={handleIncrement} data-testid=\"increment-button\">\n        Increment\n      </button>\n      <button onClick={handleAddItem} data-testid=\"add-item-button\" disabled={loading}>\n        {loading ? 'Adding...' : 'Add Item'}\n      </button>\n      <button onClick={handleBatchOperation} data-testid=\"batch-operation-button\" disabled={loading}>\n        {loading ? 'Processing...' : 'Batch Operation'}\n      </button>\n      <div data-testid=\"items-list\">\n        {items.map((item, index) => (\n          <div key={index} data-testid={`list-item-${index}`}>\n            {item}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// 模拟表单组件\nconst PerformanceForm = () => {\n  const [formData, setFormData] = React.useState({\n    name: '',\n    email: '',\n    message: '',\n    category: '',\n    priority: 'medium',\n  });\n\n  const [errors, setErrors] = React.useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // 清除错误\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.name.trim()) newErrors.name = 'Name is required';\n    if (!formData.email.trim()) newErrors.email = 'Email is required';\n    if (!formData.message.trim()) newErrors.message = 'Message is required';\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsSubmitting(true);\n    // 模拟提交\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setIsSubmitting(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} data-testid=\"performance-form\">\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={formData.name}\n          onChange={(e) => handleChange('name', e.target.value)}\n          data-testid=\"name-input\"\n        />\n        {errors.name && <div data-testid=\"name-error\">{errors.name}</div>}\n      </div>\n      \n      <div>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={formData.email}\n          onChange={(e) => handleChange('email', e.target.value)}\n          data-testid=\"email-input\"\n        />\n        {errors.email && <div data-testid=\"email-error\">{errors.email}</div>}\n      </div>\n      \n      <div>\n        <textarea\n          placeholder=\"Message\"\n          value={formData.message}\n          onChange={(e) => handleChange('message', e.target.value)}\n          data-testid=\"message-input\"\n        />\n        {errors.message && <div data-testid=\"message-error\">{errors.message}</div>}\n      </div>\n      \n      <div>\n        <select\n          value={formData.category}\n          onChange={(e) => handleChange('category', e.target.value)}\n          data-testid=\"category-select\"\n        >\n          <option value=\"\">Select Category</option>\n          <option value=\"general\">General</option>\n          <option value=\"support\">Support</option>\n          <option value=\"feedback\">Feedback</option>\n        </select>\n      </div>\n      \n      <button type=\"submit\" disabled={isSubmitting} data-testid=\"submit-button\">\n        {isSubmitting ? 'Submitting...' : 'Submit'}\n      </button>\n    </form>\n  );\n};\n\ndescribe('Performance Tests', () => {\n  describe('Render Performance', () => {\n    it('should render small data set quickly', () => {\n      const renderTime = measureRenderTime(() => {\n        render(<LargeDataComponent itemCount={100} />);\n      });\n      \n      expect(renderTime).toBeLessThan(100); // 应该在100ms内完成\n      expect(screen.getByTestId('large-data-component')).toBeInTheDocument();\n    });\n\n    it('should render medium data set within acceptable time', () => {\n      const renderTime = measureRenderTime(() => {\n        render(<LargeDataComponent itemCount={500} />);\n      });\n      \n      expect(renderTime).toBeLessThan(300); // 应该在300ms内完成\n      expect(screen.getByTestId('large-data-component')).toBeInTheDocument();\n    });\n\n    it('should handle large data set', () => {\n      const renderTime = measureRenderTime(() => {\n        render(<LargeDataComponent itemCount={1000} />);\n      });\n      \n      // 大数据集可能需要更多时间，但应该在合理范围内\n      expect(renderTime).toBeLessThan(1000); // 应该在1秒内完成\n      expect(screen.getByTestId('large-data-component')).toBeInTheDocument();\n    });\n\n    it('should render complex form quickly', () => {\n      const renderTime = measureRenderTime(() => {\n        render(<PerformanceForm />);\n      });\n      \n      expect(renderTime).toBeLessThan(50); // 表单应该很快渲染\n      expect(screen.getByTestId('performance-form')).toBeInTheDocument();\n    });\n  });\n\n  describe('Interaction Performance', () => {\n    it('should handle rapid clicks efficiently', async () => {\n      const user = userEvent.setup();\n      render(<ComplexInteractionComponent />);\n      \n      const button = screen.getByTestId('increment-button');\n      const startTime = performance.now();\n      \n      // 快速点击10次\n      for (let i = 0; i < 10; i++) {\n        await user.click(button);\n      }\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(totalTime).toBeLessThan(500); // 10次点击应该在500ms内完成\n      expect(screen.getByTestId('counter')).toHaveTextContent('Count: 10');\n    });\n\n    it('should handle form input changes efficiently', async () => {\n      const user = userEvent.setup();\n      render(<PerformanceForm />);\n      \n      const nameInput = screen.getByTestId('name-input');\n      const startTime = performance.now();\n      \n      // 输入长文本\n      await user.type(nameInput, 'This is a very long name that should test input performance');\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(totalTime).toBeLessThan(1000); // 输入应该在1秒内完成\n      expect(nameInput).toHaveValue('This is a very long name that should test input performance');\n    });\n\n    it('should handle async operations efficiently', async () => {\n      const user = userEvent.setup();\n      render(<ComplexInteractionComponent />);\n      \n      const addButton = screen.getByTestId('add-item-button');\n      \n      const operationTime = await measureAsyncOperation(async () => {\n        await user.click(addButton);\n        await waitFor(() => {\n          expect(screen.getByTestId('list-item-0')).toBeInTheDocument();\n        });\n      });\n      \n      expect(operationTime).toBeLessThan(100); // 异步操作应该很快完成\n    });\n\n    it('should handle form validation efficiently', async () => {\n      const user = userEvent.setup();\n      render(<PerformanceForm />);\n      \n      const submitButton = screen.getByTestId('submit-button');\n      \n      const validationTime = await measureAsyncOperation(async () => {\n        await user.click(submitButton);\n        await waitFor(() => {\n          expect(screen.getByTestId('name-error')).toBeInTheDocument();\n        });\n      });\n      \n      expect(validationTime).toBeLessThan(50); // 验证应该很快完成\n    });\n  });\n\n  describe('Memory Performance', () => {\n    it('should not cause memory leaks with repeated renders', () => {\n      // 测试重复渲染是否会导致内存泄漏\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n\n      // 多次渲染和卸载组件\n      for (let i = 0; i < 10; i++) {\n        const { unmount } = render(<LargeDataComponent itemCount={100} />);\n        unmount();\n      }\n\n      // 最后一次渲染用于检查\n      const { container } = render(<LargeDataComponent itemCount={100} />);\n\n      // 检查内存使用是否在合理范围内\n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n\n      if (initialMemory > 0 && finalMemory > 0) {\n        const memoryIncrease = finalMemory - initialMemory;\n        // 内存增长应该在合理范围内（比如不超过10MB）\n        expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024);\n      }\n\n      // 至少确保组件能正常渲染\n      expect(container.querySelector('[data-testid=\"large-data-component\"]')).toBeInTheDocument();\n    });\n\n    it('should handle component unmounting cleanly', () => {\n      const { unmount } = render(<ComplexInteractionComponent />);\n      \n      expect(screen.getByTestId('complex-interaction-component')).toBeInTheDocument();\n      \n      // 卸载组件应该不会抛出错误\n      expect(() => unmount()).not.toThrow();\n    });\n  });\n\n  describe('Stress Tests', () => {\n    it('should handle rapid state updates', async () => {\n      const user = userEvent.setup();\n      render(<ComplexInteractionComponent />);\n      \n      const batchButton = screen.getByTestId('batch-operation-button');\n      \n      const stressTime = await measureAsyncOperation(async () => {\n        await user.click(batchButton);\n        await waitFor(() => {\n          expect(screen.getByTestId('counter')).toHaveTextContent('Count: 100');\n        }, { timeout: 5000 });\n      });\n      \n      expect(stressTime).toBeLessThan(3000); // 批量操作应该在3秒内完成\n    });\n\n    it('should handle multiple simultaneous operations', async () => {\n      const user = userEvent.setup();\n      render(<ComplexInteractionComponent />);\n      \n      const addButton = screen.getByTestId('add-item-button');\n      const incrementButton = screen.getByTestId('increment-button');\n      \n      const startTime = performance.now();\n      \n      // 同时执行多个操作\n      const promises = [\n        user.click(addButton),\n        user.click(incrementButton),\n        user.click(incrementButton),\n        user.click(incrementButton),\n      ];\n      \n      await Promise.all(promises);\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(totalTime).toBeLessThan(200); // 多个操作应该快速完成\n      expect(screen.getByTestId('counter')).toHaveTextContent('Count: 3');\n    });\n\n    it('should maintain performance with large forms', async () => {\n      const user = userEvent.setup();\n      render(<PerformanceForm />);\n      \n      const inputs = [\n        screen.getByTestId('name-input'),\n        screen.getByTestId('email-input'),\n        screen.getByTestId('message-input'),\n      ];\n      \n      const startTime = performance.now();\n      \n      // 在所有输入框中输入数据\n      await user.type(inputs[0], 'John Doe');\n      await user.type(inputs[1], 'john@example.com');\n      await user.type(inputs[2], 'This is a test message with some content');\n      \n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n      \n      expect(totalTime).toBeLessThan(1500); // 表单填写应该在1.5秒内完成\n      expect(inputs[0]).toHaveValue('John Doe');\n      expect(inputs[1]).toHaveValue('john@example.com');\n      expect(inputs[2]).toHaveValue('This is a test message with some content');\n    });\n  });\n\n  describe('Performance Benchmarks', () => {\n    it('should meet render time benchmarks', () => {\n      const benchmarks = [\n        { itemCount: 10, maxTime: 10 },\n        { itemCount: 50, maxTime: 25 },\n        { itemCount: 100, maxTime: 50 },\n        { itemCount: 200, maxTime: 100 },\n      ];\n      \n      benchmarks.forEach(({ itemCount, maxTime }) => {\n        const renderTime = measureRenderTime(() => {\n          render(<LargeDataComponent itemCount={itemCount} />);\n        });\n        \n        expect(renderTime).toBeLessThan(maxTime);\n      });\n    });\n\n    it('should meet interaction time benchmarks', async () => {\n      const user = userEvent.setup();\n      render(<ComplexInteractionComponent />);\n      \n      const button = screen.getByTestId('increment-button');\n      \n      // 测试单次点击性能\n      const singleClickTime = await measureAsyncOperation(async () => {\n        await user.click(button);\n      });\n      \n      expect(singleClickTime).toBeLessThan(10); // 单次点击应该在10ms内完成\n      \n      // 测试连续点击性能\n      const startTime = performance.now();\n      for (let i = 0; i < 5; i++) {\n        await user.click(button);\n      }\n      const endTime = performance.now();\n      const averageClickTime = (endTime - startTime) / 5;\n      \n      expect(averageClickTime).toBeLessThan(20); // 平均点击时间应该在20ms内\n    });\n  });\n});\n"],"names":["measureRenderTime","renderFn","start","performance","now","end","measureAsyncOperation","asyncFn","LargeDataComponent","itemCount","items","React","useState","Array","from","length","_","i","id","name","value","Math","random","div","data-testid","h2","map","item","toFixed","ComplexInteractionComponent","count","setCount","setItems","loading","setLoading","handleAddItem","Promise","resolve","setTimeout","prev","handleIncrement","handleBatchOperation","button","onClick","disabled","index","PerformanceForm","formData","setFormData","email","message","category","priority","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","field","validateForm","newErrors","trim","Object","keys","handleSubmit","e","preventDefault","form","onSubmit","input","type","placeholder","onChange","target","textarea","select","option","describe","it","renderTime","render","expect","toBeLessThan","screen","getByTestId","toBeInTheDocument","user","userEvent","setup","startTime","click","endTime","totalTime","toHaveTextContent","nameInput","toHaveValue","addButton","operationTime","waitFor","submitButton","validationTime","initialMemory","memory","usedJSHeapSize","unmount","container","finalMemory","memoryIncrease","querySelector","not","toThrow","batchButton","stressTime","timeout","incrementButton","promises","all","inputs","benchmarks","maxTime","forEach","singleClickTime","averageClickTime"],"mappings":"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"}