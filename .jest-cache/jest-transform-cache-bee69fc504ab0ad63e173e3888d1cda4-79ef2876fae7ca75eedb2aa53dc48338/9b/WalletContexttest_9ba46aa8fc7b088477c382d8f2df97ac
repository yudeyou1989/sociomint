8fb6de6f6dd88b85d213470edee3879f
"use strict";
jest.mock('ethers', ()=>({
        BrowserProvider: jest.fn().mockImplementation(()=>mockProvider),
        formatEther: jest.fn().mockImplementation((value)=>{
            return (Number(value) / 1e18).toString();
        }),
        parseEther: jest.fn().mockImplementation((value)=>{
            return BigInt(Math.floor(parseFloat(value) * 1e18));
        }),
        Contract: jest.fn().mockImplementation(()=>({
                balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),
                symbol: jest.fn().mockResolvedValue('SM'),
                decimals: jest.fn().mockResolvedValue(18)
            }))
    }));
// 模拟合约服务
jest.mock('../services/contractService', ()=>({
        contractService: mockContractService
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _WalletContext = require("../contexts/WalletContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 模拟 window.ethereum
const mockEthereum = {
    request: jest.fn(),
    on: jest.fn(),
    removeListener: jest.fn(),
    isMetaMask: true
};
// 模拟合约服务
const mockContractService = {
    initialize: jest.fn().mockResolvedValue(undefined),
    getTokenBalance: jest.fn().mockResolvedValue('100.0')
};
// 模拟 ethers
const mockProvider = {
    send: jest.fn().mockResolvedValue([
        '0x123456789abcdef123456789abcdef123456789a'
    ]),
    getSigner: jest.fn().mockResolvedValue({
        getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a')
    }),
    getNetwork: jest.fn().mockResolvedValue({
        chainId: 97n
    }),
    getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000'))
};
// 测试组件
const TestComponent = ()=>{
    const { wallet, connect, disconnect, isConnecting } = (0, _WalletContext.useWallet)();
    const handleConnect = async ()=>{
        try {
            await connect();
        } catch (error) {
            console.error('Connection failed:', error);
        }
    };
    const handleDisconnect = async ()=>{
        try {
            await disconnect();
        } catch (error) {
            console.error('Disconnect failed:', error);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "connection-status",
                children: wallet.isConnected ? 'Connected' : 'Not Connected'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "address",
                children: wallet.address || ''
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chain-id",
                children: wallet.chainId || 0
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bnb-balance",
                children: wallet.balance?.bnb || '0'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "sm-balance",
                children: wallet.balance?.sm || '0'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "connecting-status",
                children: isConnecting ? 'Connecting' : 'Not Connecting'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: handleConnect,
                "data-testid": "connect-button",
                children: "Connect"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: handleDisconnect,
                "data-testid": "disconnect-button",
                children: "Disconnect"
            })
        ]
    });
};
describe('WalletContext', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // 重置 mock ethereum
        mockEthereum.request.mockClear();
        mockEthereum.on.mockClear();
        mockEthereum.removeListener.mockClear();
        // 设置默认成功响应
        mockEthereum.request.mockResolvedValue([
            '0x123456789abcdef'
        ]);
        // 模拟 window.ethereum
        Object.defineProperty(window, 'ethereum', {
            value: mockEthereum,
            writable: true,
            configurable: true
        });
    });
    it('provides initial wallet state', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
        expect(_react1.screen.getByTestId('address')).toHaveTextContent('');
        expect(_react1.screen.getByTestId('chain-id')).toHaveTextContent('0');
        expect(_react1.screen.getByTestId('bnb-balance')).toHaveTextContent('0');
        expect(_react1.screen.getByTestId('sm-balance')).toHaveTextContent('0');
        expect(_react1.screen.getByTestId('connecting-status')).toHaveTextContent('Not Connecting');
    });
    it('connects wallet successfully', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const connectButton = _react1.screen.getByTestId('connect-button');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(connectButton);
        });
        // 检查连接状态
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connecting-status')).toHaveTextContent('Connecting');
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
            expect(_react1.screen.getByTestId('address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');
            expect(_react1.screen.getByTestId('chain-id')).toHaveTextContent('97');
        }, {
            timeout: 3000
        });
    });
    it('disconnects wallet', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        // 先连接
        const connectButton = _react1.screen.getByTestId('connect-button');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(connectButton);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
        }, {
            timeout: 3000
        });
        // 然后断开连接
        const disconnectButton = _react1.screen.getByTestId('disconnect-button');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(disconnectButton);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
            expect(_react1.screen.getByTestId('address')).toHaveTextContent('');
        });
    });
    it('handles connection error', async ()=>{
        // 模拟连接错误
        mockEthereum.request.mockRejectedValue(new Error('User rejected'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const connectButton = _react1.screen.getByTestId('connect-button');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(connectButton);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
            expect(_react1.screen.getByTestId('connecting-status')).toHaveTextContent('Not Connecting');
        }, {
            timeout: 3000
        });
    });
    it('handles missing ethereum provider', async ()=>{
        // 移除 ethereum 对象
        Object.defineProperty(window, 'ethereum', {
            value: undefined,
            writable: true,
            configurable: true
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
        }));
        const connectButton = _react1.screen.getByTestId('connect-button');
        await (0, _react1.act)(async ()=>{
            _react1.fireEvent.click(connectButton);
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
        }, {
            timeout: 3000
        });
    });
});

//# sourceMappingURL=data:application/json;base64,