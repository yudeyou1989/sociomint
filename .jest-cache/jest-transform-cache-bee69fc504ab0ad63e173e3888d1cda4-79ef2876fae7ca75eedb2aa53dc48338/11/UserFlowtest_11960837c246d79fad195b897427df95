f1e4c75a85c6d8e3299a8433cac4fb26
/**
 * 简化的端到端用户流程测试
 * 测试关键业务流程而不依赖复杂的组件
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 模拟应用状态管理
class MockAppState {
    getState() {
        return {
            ...this.state
        };
    }
    connectWallet(address) {
        this.state.user = {
            isConnected: true,
            address,
            balance: {
                bnb: '5.0',
                sm: '100.0'
            }
        };
    }
    disconnectWallet() {
        this.state.user = {
            isConnected: false,
            address: '',
            balance: {
                bnb: '0',
                sm: '0'
            }
        };
    }
    addTransaction(tx) {
        this.state.transactions.push(tx);
    }
    updateBalance(bnb, sm) {
        this.state.user.balance = {
            bnb,
            sm
        };
    }
    constructor(){
        this.state = {
            user: {
                isConnected: false,
                address: '',
                balance: {
                    bnb: '0',
                    sm: '0'
                }
            },
            exchange: {
                isActive: true,
                currentPrice: '0.000000833',
                totalSold: '1000',
                totalRemaining: '9000'
            },
            transactions: []
        };
    }
}
// 分离的页面组件避免 Hooks 规则问题
const HomePage = ({ appState, onConnect, onDisconnect, onNavigate, loading, error })=>{
    const state = appState.getState();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "home-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "SocioMint"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "connection-status",
                children: state.user.isConnected ? '已连接' : '未连接'
            }),
            state.user.isConnected && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "user-address",
                        children: state.user.address
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "bnb-balance",
                        children: [
                            state.user.balance.bnb,
                            " BNB"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "sm-balance",
                        children: [
                            state.user.balance.sm,
                            " SM"
                        ]
                    })
                ]
            }),
            !state.user.isConnected ? /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onConnect,
                disabled: loading,
                "data-testid": "connect-button",
                children: loading ? '连接中...' : '连接钱包'
            }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onDisconnect,
                        "data-testid": "disconnect-button",
                        children: "断开连接"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onNavigate('exchange'),
                        "data-testid": "go-exchange",
                        children: "代币兑换"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onNavigate('history'),
                        "data-testid": "go-history",
                        children: "交易历史"
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error-message",
                children: error
            })
        ]
    });
};
const ExchangePage = ({ appState, onNavigate, onExchange, loading, error })=>{
    const [amount, setAmount] = _react.default.useState('');
    const state = appState.getState();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "exchange-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "代币兑换"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>onNavigate('home'),
                "data-testid": "back-home",
                children: "返回首页"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "exchange-stats",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "当前价格: ",
                            state.exchange.currentPrice,
                            " BNB/SM"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "已售出: ",
                            state.exchange.totalSold,
                            " SM"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "剩余: ",
                            state.exchange.totalRemaining,
                            " SM"
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "number",
                        placeholder: "输入 BNB 数量",
                        value: amount,
                        onChange: (e)=>setAmount(e.target.value),
                        "data-testid": "amount-input"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onExchange(amount),
                        disabled: loading || !amount,
                        "data-testid": "exchange-button",
                        children: loading ? '交易中...' : '购买代币'
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error-message",
                children: error
            })
        ]
    });
};
const HistoryPage = ({ appState, onNavigate })=>{
    const state = appState.getState();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "history-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "交易历史"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>onNavigate('home'),
                "data-testid": "back-home",
                children: "返回首页"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "transaction-list",
                children: state.transactions.length === 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "no-transactions",
                    children: "暂无交易记录"
                }) : state.transactions.map((tx, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": `transaction-${index}`,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "哈希: ",
                                    tx.hash
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "金额: ",
                                    tx.amount,
                                    " BNB"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "获得: ",
                                    tx.tokenAmount.toFixed(4),
                                    " SM"
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    "状态: ",
                                    tx.status
                                ]
                            })
                        ]
                    }, index))
            })
        ]
    });
};
// 主应用组件 - 使用固定的 Hooks 结构
const MockApp = ()=>{
    const [appState, setAppState] = _react.default.useState(new MockAppState());
    const [loading, setLoading] = _react.default.useState(false);
    const [error, setError] = _react.default.useState('');
    const [currentPage, setCurrentPage] = _react.default.useState('home');
    const handleConnect = async ()=>{
        setLoading(true);
        setError('');
        try {
            await new Promise((resolve)=>setTimeout(resolve, 100)); // 模拟异步
            appState.connectWallet('0x123456789abcdef123456789abcdef123456789a');
            // 强制重新渲染
            setAppState({
                ...appState
            });
        } catch (err) {
            setError('连接失败');
        } finally{
            setLoading(false);
        }
    };
    const handleDisconnect = ()=>{
        appState.disconnectWallet();
        // 强制重新渲染
        setAppState({
            ...appState
        });
        setCurrentPage('home');
    };
    const handleNavigate = (page)=>{
        setCurrentPage(page);
        setError(''); // 清除错误
    };
    const handleExchange = async (amount)=>{
        const state = appState.getState();
        if (!state.user.isConnected) {
            setError('请先连接钱包');
            return;
        }
        const bnbAmount = parseFloat(amount);
        if (bnbAmount <= 0) {
            setError('金额必须大于0');
            return;
        }
        if (bnbAmount > parseFloat(state.user.balance.bnb)) {
            setError('余额不足');
            return;
        }
        setLoading(true);
        setError('');
        try {
            await new Promise((resolve)=>setTimeout(resolve, 200)); // 模拟交易
            const tokenAmount = bnbAmount / parseFloat(state.exchange.currentPrice) * 1e-18;
            const newBnbBalance = (parseFloat(state.user.balance.bnb) - bnbAmount).toString();
            const newSmBalance = (parseFloat(state.user.balance.sm) + tokenAmount).toString();
            appState.updateBalance(newBnbBalance, newSmBalance);
            appState.addTransaction({
                hash: '0x' + Math.random().toString(16).substr(2, 8),
                amount: bnbAmount,
                tokenAmount,
                timestamp: Date.now(),
                status: 'success'
            });
            // 强制重新渲染
            setAppState({
                ...appState
            });
        } catch (err) {
            setError('交易失败');
        } finally{
            setLoading(false);
        }
    };
    // 使用分离的组件避免 Hooks 规则问题
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "app",
        children: [
            currentPage === 'home' && /*#__PURE__*/ (0, _jsxruntime.jsx)(HomePage, {
                appState: appState,
                onConnect: handleConnect,
                onDisconnect: handleDisconnect,
                onNavigate: handleNavigate,
                loading: loading,
                error: error
            }),
            currentPage === 'exchange' && /*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangePage, {
                appState: appState,
                onNavigate: handleNavigate,
                onExchange: handleExchange,
                loading: loading,
                error: error
            }),
            currentPage === 'history' && /*#__PURE__*/ (0, _jsxruntime.jsx)(HistoryPage, {
                appState: appState,
                onNavigate: handleNavigate
            })
        ]
    });
};
describe('End-to-End User Flow Tests', ()=>{
    const user = _userevent.default.setup();
    describe('Complete User Journey', ()=>{
        it('should complete full user journey from connection to purchase', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 1. 验证初始状态
            expect(_react1.screen.getByTestId('home-page')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('未连接');
            expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
            // 2. 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            // 验证连接中状态
            expect(_react1.screen.getByTestId('connect-button')).toHaveTextContent('连接中...');
            // 等待连接完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 3. 验证用户信息显示
            expect(_react1.screen.getByTestId('user-address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');
            expect(_react1.screen.getByTestId('bnb-balance')).toHaveTextContent('5.0 BNB');
            expect(_react1.screen.getByTestId('sm-balance')).toHaveTextContent('100.0 SM');
            // 4. 导航到交换页面
            await user.click(_react1.screen.getByTestId('go-exchange'));
            expect(_react1.screen.getByTestId('exchange-page')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('exchange-stats')).toBeInTheDocument();
            // 5. 执行代币购买
            const amountInput = _react1.screen.getByTestId('amount-input');
            await user.type(amountInput, '1.0');
            expect(amountInput).toHaveValue(1);
            await user.click(_react1.screen.getByTestId('exchange-button'));
            // 验证交易中状态
            expect(_react1.screen.getByTestId('exchange-button')).toHaveTextContent('交易中...');
            // 等待交易完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');
            });
            // 6. 返回首页验证余额更新
            await user.click(_react1.screen.getByTestId('back-home'));
            expect(_react1.screen.getByTestId('home-page')).toBeInTheDocument();
            // 余额应该有所变化（虽然具体数值可能因计算而异）
            expect(_react1.screen.getByTestId('bnb-balance')).not.toHaveTextContent('5.0 BNB');
            // 7. 查看交易历史
            await user.click(_react1.screen.getByTestId('go-history'));
            expect(_react1.screen.getByTestId('history-page')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('transaction-0')).toBeInTheDocument();
            // 8. 断开连接
            await user.click(_react1.screen.getByTestId('back-home'));
            await user.click(_react1.screen.getByTestId('disconnect-button'));
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('未连接');
            expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        });
        it('should handle wallet connection errors', async ()=>{
            // 这里可以测试连接失败的情况
            // 由于我们的 mock 实现比较简单，这里只做基本验证
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        });
        it('should validate exchange input', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 导航到交换页面
            await user.click(_react1.screen.getByTestId('go-exchange'));
            // 测试无效输入
            const amountInput = _react1.screen.getByTestId('amount-input');
            await user.type(amountInput, '0');
            await user.click(_react1.screen.getByTestId('exchange-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('error-message')).toHaveTextContent('金额必须大于0');
            });
        });
        it('should handle insufficient balance', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 导航到交换页面
            await user.click(_react1.screen.getByTestId('go-exchange'));
            // 尝试购买超过余额的金额
            const amountInput = _react1.screen.getByTestId('amount-input');
            await user.type(amountInput, '10.0'); // 超过 5.0 BNB 余额
            await user.click(_react1.screen.getByTestId('exchange-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('error-message')).toHaveTextContent('余额不足');
            });
        });
        it('should show empty transaction history initially', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 查看交易历史
            await user.click(_react1.screen.getByTestId('go-history'));
            expect(_react1.screen.getByTestId('no-transactions')).toHaveTextContent('暂无交易记录');
        });
        it('should handle navigation between pages', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 测试页面导航
            await user.click(_react1.screen.getByTestId('go-exchange'));
            expect(_react1.screen.getByTestId('exchange-page')).toBeInTheDocument();
            await user.click(_react1.screen.getByTestId('back-home'));
            expect(_react1.screen.getByTestId('home-page')).toBeInTheDocument();
            await user.click(_react1.screen.getByTestId('go-history'));
            expect(_react1.screen.getByTestId('history-page')).toBeInTheDocument();
            await user.click(_react1.screen.getByTestId('back-home'));
            expect(_react1.screen.getByTestId('home-page')).toBeInTheDocument();
        });
        it('should prevent exchange when wallet not connected', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 直接尝试访问交换功能（在实际应用中可能通过 URL 直接访问）
            // 这里我们模拟未连接状态下的交换尝试
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('未连接');
            expect(_react1.screen.queryByTestId('go-exchange')).not.toBeInTheDocument();
        });
        it('should handle multiple transactions', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 执行第一笔交易
            await user.click(_react1.screen.getByTestId('go-exchange'));
            let amountInput = _react1.screen.getByTestId('amount-input');
            await user.type(amountInput, '1.0');
            await user.click(_react1.screen.getByTestId('exchange-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');
            });
            // 执行第二笔交易
            await user.clear(amountInput);
            await user.type(amountInput, '0.5');
            await user.click(_react1.screen.getByTestId('exchange-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');
            });
            // 查看交易历史
            await user.click(_react1.screen.getByTestId('back-home'));
            await user.click(_react1.screen.getByTestId('go-history'));
            expect(_react1.screen.getByTestId('transaction-0')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('transaction-1')).toBeInTheDocument();
        });
    });
    describe('Error Scenarios', ()=>{
        it('should handle loading states correctly', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            const connectButton = _react1.screen.getByTestId('connect-button');
            // 点击连接按钮
            await user.click(connectButton);
            // 验证加载状态
            expect(connectButton).toHaveTextContent('连接中...');
            expect(connectButton).toBeDisabled();
            // 等待加载完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
        });
        it('should clear errors when performing new actions', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {}));
            // 连接钱包
            await user.click(_react1.screen.getByTestId('connect-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('已连接');
            });
            // 导航到交换页面并产生错误
            await user.click(_react1.screen.getByTestId('go-exchange'));
            const amountInput = _react1.screen.getByTestId('amount-input');
            await user.type(amountInput, '0');
            await user.click(_react1.screen.getByTestId('exchange-button'));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('error-message')).toBeInTheDocument();
            });
            // 输入有效金额应该清除错误
            await user.clear(amountInput);
            await user.type(amountInput, '1.0');
            await user.click(_react1.screen.getByTestId('exchange-button'));
            // 错误应该被清除（在交易开始时）
            expect(_react1.screen.queryByTestId('error-message')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,