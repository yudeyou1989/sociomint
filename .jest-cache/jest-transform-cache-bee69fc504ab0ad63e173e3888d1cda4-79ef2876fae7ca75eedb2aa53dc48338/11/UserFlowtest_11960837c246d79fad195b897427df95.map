{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/e2e/UserFlow.test.tsx"],"sourcesContent":["/**\n * 简化的端到端用户流程测试\n * 测试关键业务流程而不依赖复杂的组件\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// 模拟应用状态管理\nclass MockAppState {\n  private state = {\n    user: {\n      isConnected: false,\n      address: '',\n      balance: { bnb: '0', sm: '0' }\n    },\n    exchange: {\n      isActive: true,\n      currentPrice: '0.000000833',\n      totalSold: '1000',\n      totalRemaining: '9000'\n    },\n    transactions: [] as any[]\n  };\n\n  getState() {\n    return { ...this.state };\n  }\n\n  connectWallet(address: string) {\n    this.state.user = {\n      isConnected: true,\n      address,\n      balance: { bnb: '5.0', sm: '100.0' }\n    };\n  }\n\n  disconnectWallet() {\n    this.state.user = {\n      isConnected: false,\n      address: '',\n      balance: { bnb: '0', sm: '0' }\n    };\n  }\n\n  addTransaction(tx: any) {\n    this.state.transactions.push(tx);\n  }\n\n  updateBalance(bnb: string, sm: string) {\n    this.state.user.balance = { bnb, sm };\n  }\n}\n\n// 分离的页面组件避免 Hooks 规则问题\nconst HomePage = ({ appState, onConnect, onDisconnect, onNavigate, loading, error }: any) => {\n  const state = appState.getState();\n\n  return (\n    <div data-testid=\"home-page\">\n      <h1>SocioMint</h1>\n      <div data-testid=\"connection-status\">\n        {state.user.isConnected ? '已连接' : '未连接'}\n      </div>\n      {state.user.isConnected && (\n        <div>\n          <div data-testid=\"user-address\">{state.user.address}</div>\n          <div data-testid=\"bnb-balance\">{state.user.balance.bnb} BNB</div>\n          <div data-testid=\"sm-balance\">{state.user.balance.sm} SM</div>\n        </div>\n      )}\n      {!state.user.isConnected ? (\n        <button\n          onClick={onConnect}\n          disabled={loading}\n          data-testid=\"connect-button\"\n        >\n          {loading ? '连接中...' : '连接钱包'}\n        </button>\n      ) : (\n        <div>\n          <button onClick={onDisconnect} data-testid=\"disconnect-button\">\n            断开连接\n          </button>\n          <button\n            onClick={() => onNavigate('exchange')}\n            data-testid=\"go-exchange\"\n          >\n            代币兑换\n          </button>\n          <button\n            onClick={() => onNavigate('history')}\n            data-testid=\"go-history\"\n          >\n            交易历史\n          </button>\n        </div>\n      )}\n      {error && <div data-testid=\"error-message\">{error}</div>}\n    </div>\n  );\n};\n\nconst ExchangePage = ({ appState, onNavigate, onExchange, loading, error }: any) => {\n  const [amount, setAmount] = React.useState('');\n  const state = appState.getState();\n\n  return (\n    <div data-testid=\"exchange-page\">\n      <h2>代币兑换</h2>\n      <button onClick={() => onNavigate('home')} data-testid=\"back-home\">\n        返回首页\n      </button>\n\n      <div data-testid=\"exchange-stats\">\n        <div>当前价格: {state.exchange.currentPrice} BNB/SM</div>\n        <div>已售出: {state.exchange.totalSold} SM</div>\n        <div>剩余: {state.exchange.totalRemaining} SM</div>\n      </div>\n\n      <div>\n        <input\n          type=\"number\"\n          placeholder=\"输入 BNB 数量\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          data-testid=\"amount-input\"\n        />\n        <button\n          onClick={() => onExchange(amount)}\n          disabled={loading || !amount}\n          data-testid=\"exchange-button\"\n        >\n          {loading ? '交易中...' : '购买代币'}\n        </button>\n      </div>\n\n      {error && <div data-testid=\"error-message\">{error}</div>}\n    </div>\n  );\n};\n\nconst HistoryPage = ({ appState, onNavigate }: any) => {\n  const state = appState.getState();\n\n  return (\n    <div data-testid=\"history-page\">\n      <h2>交易历史</h2>\n      <button onClick={() => onNavigate('home')} data-testid=\"back-home\">\n        返回首页\n      </button>\n\n      <div data-testid=\"transaction-list\">\n        {state.transactions.length === 0 ? (\n          <div data-testid=\"no-transactions\">暂无交易记录</div>\n        ) : (\n          state.transactions.map((tx: any, index: number) => (\n            <div key={index} data-testid={`transaction-${index}`}>\n              <div>哈希: {tx.hash}</div>\n              <div>金额: {tx.amount} BNB</div>\n              <div>获得: {tx.tokenAmount.toFixed(4)} SM</div>\n              <div>状态: {tx.status}</div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\n// 主应用组件 - 使用固定的 Hooks 结构\nconst MockApp = () => {\n  const [appState, setAppState] = React.useState(new MockAppState());\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const [currentPage, setCurrentPage] = React.useState('home');\n\n  const handleConnect = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      await new Promise(resolve => setTimeout(resolve, 100)); // 模拟异步\n      appState.connectWallet('0x123456789abcdef123456789abcdef123456789a');\n      // 强制重新渲染\n      setAppState({ ...appState });\n    } catch (err) {\n      setError('连接失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisconnect = () => {\n    appState.disconnectWallet();\n    // 强制重新渲染\n    setAppState({ ...appState });\n    setCurrentPage('home');\n  };\n\n  const handleNavigate = (page: string) => {\n    setCurrentPage(page);\n    setError(''); // 清除错误\n  };\n\n  const handleExchange = async (amount: string) => {\n    const state = appState.getState();\n\n    if (!state.user.isConnected) {\n      setError('请先连接钱包');\n      return;\n    }\n\n    const bnbAmount = parseFloat(amount);\n    if (bnbAmount <= 0) {\n      setError('金额必须大于0');\n      return;\n    }\n\n    if (bnbAmount > parseFloat(state.user.balance.bnb)) {\n      setError('余额不足');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      await new Promise(resolve => setTimeout(resolve, 200)); // 模拟交易\n\n      const tokenAmount = (bnbAmount / parseFloat(state.exchange.currentPrice)) * 1e-18;\n      const newBnbBalance = (parseFloat(state.user.balance.bnb) - bnbAmount).toString();\n      const newSmBalance = (parseFloat(state.user.balance.sm) + tokenAmount).toString();\n\n      appState.updateBalance(newBnbBalance, newSmBalance);\n      appState.addTransaction({\n        hash: '0x' + Math.random().toString(16).substr(2, 8),\n        amount: bnbAmount,\n        tokenAmount,\n        timestamp: Date.now(),\n        status: 'success'\n      });\n\n      // 强制重新渲染\n      setAppState({ ...appState });\n    } catch (err) {\n      setError('交易失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 使用分离的组件避免 Hooks 规则问题\n  return (\n    <div data-testid=\"app\">\n      {currentPage === 'home' && (\n        <HomePage\n          appState={appState}\n          onConnect={handleConnect}\n          onDisconnect={handleDisconnect}\n          onNavigate={handleNavigate}\n          loading={loading}\n          error={error}\n        />\n      )}\n      {currentPage === 'exchange' && (\n        <ExchangePage\n          appState={appState}\n          onNavigate={handleNavigate}\n          onExchange={handleExchange}\n          loading={loading}\n          error={error}\n        />\n      )}\n      {currentPage === 'history' && (\n        <HistoryPage\n          appState={appState}\n          onNavigate={handleNavigate}\n        />\n      )}\n    </div>\n  );\n};\n\ndescribe('End-to-End User Flow Tests', () => {\n  const user = userEvent.setup();\n\n  describe('Complete User Journey', () => {\n    it('should complete full user journey from connection to purchase', async () => {\n      render(<MockApp />);\n\n      // 1. 验证初始状态\n      expect(screen.getByTestId('home-page')).toBeInTheDocument();\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('未连接');\n      expect(screen.getByTestId('connect-button')).toBeInTheDocument();\n\n      // 2. 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n\n      // 验证连接中状态\n      expect(screen.getByTestId('connect-button')).toHaveTextContent('连接中...');\n\n      // 等待连接完成\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 3. 验证用户信息显示\n      expect(screen.getByTestId('user-address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');\n      expect(screen.getByTestId('bnb-balance')).toHaveTextContent('5.0 BNB');\n      expect(screen.getByTestId('sm-balance')).toHaveTextContent('100.0 SM');\n\n      // 4. 导航到交换页面\n      await user.click(screen.getByTestId('go-exchange'));\n\n      expect(screen.getByTestId('exchange-page')).toBeInTheDocument();\n      expect(screen.getByTestId('exchange-stats')).toBeInTheDocument();\n\n      // 5. 执行代币购买\n      const amountInput = screen.getByTestId('amount-input');\n      await user.type(amountInput, '1.0');\n\n      expect(amountInput).toHaveValue(1);\n\n      await user.click(screen.getByTestId('exchange-button'));\n\n      // 验证交易中状态\n      expect(screen.getByTestId('exchange-button')).toHaveTextContent('交易中...');\n\n      // 等待交易完成\n      await waitFor(() => {\n        expect(screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');\n      });\n\n      // 6. 返回首页验证余额更新\n      await user.click(screen.getByTestId('back-home'));\n\n      expect(screen.getByTestId('home-page')).toBeInTheDocument();\n      // 余额应该有所变化（虽然具体数值可能因计算而异）\n      expect(screen.getByTestId('bnb-balance')).not.toHaveTextContent('5.0 BNB');\n\n      // 7. 查看交易历史\n      await user.click(screen.getByTestId('go-history'));\n\n      expect(screen.getByTestId('history-page')).toBeInTheDocument();\n      expect(screen.getByTestId('transaction-0')).toBeInTheDocument();\n\n      // 8. 断开连接\n      await user.click(screen.getByTestId('back-home'));\n      await user.click(screen.getByTestId('disconnect-button'));\n\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('未连接');\n      expect(screen.getByTestId('connect-button')).toBeInTheDocument();\n    });\n\n    it('should handle wallet connection errors', async () => {\n      // 这里可以测试连接失败的情况\n      // 由于我们的 mock 实现比较简单，这里只做基本验证\n      render(<MockApp />);\n\n      expect(screen.getByTestId('connect-button')).toBeInTheDocument();\n    });\n\n    it('should validate exchange input', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 导航到交换页面\n      await user.click(screen.getByTestId('go-exchange'));\n\n      // 测试无效输入\n      const amountInput = screen.getByTestId('amount-input');\n      await user.type(amountInput, '0');\n\n      await user.click(screen.getByTestId('exchange-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('金额必须大于0');\n      });\n    });\n\n    it('should handle insufficient balance', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 导航到交换页面\n      await user.click(screen.getByTestId('go-exchange'));\n\n      // 尝试购买超过余额的金额\n      const amountInput = screen.getByTestId('amount-input');\n      await user.type(amountInput, '10.0'); // 超过 5.0 BNB 余额\n\n      await user.click(screen.getByTestId('exchange-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('余额不足');\n      });\n    });\n\n    it('should show empty transaction history initially', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 查看交易历史\n      await user.click(screen.getByTestId('go-history'));\n\n      expect(screen.getByTestId('no-transactions')).toHaveTextContent('暂无交易记录');\n    });\n\n    it('should handle navigation between pages', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 测试页面导航\n      await user.click(screen.getByTestId('go-exchange'));\n      expect(screen.getByTestId('exchange-page')).toBeInTheDocument();\n\n      await user.click(screen.getByTestId('back-home'));\n      expect(screen.getByTestId('home-page')).toBeInTheDocument();\n\n      await user.click(screen.getByTestId('go-history'));\n      expect(screen.getByTestId('history-page')).toBeInTheDocument();\n\n      await user.click(screen.getByTestId('back-home'));\n      expect(screen.getByTestId('home-page')).toBeInTheDocument();\n    });\n\n    it('should prevent exchange when wallet not connected', async () => {\n      render(<MockApp />);\n\n      // 直接尝试访问交换功能（在实际应用中可能通过 URL 直接访问）\n      // 这里我们模拟未连接状态下的交换尝试\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('未连接');\n      expect(screen.queryByTestId('go-exchange')).not.toBeInTheDocument();\n    });\n\n    it('should handle multiple transactions', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 执行第一笔交易\n      await user.click(screen.getByTestId('go-exchange'));\n\n      let amountInput = screen.getByTestId('amount-input');\n      await user.type(amountInput, '1.0');\n      await user.click(screen.getByTestId('exchange-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');\n      });\n\n      // 执行第二笔交易\n      await user.clear(amountInput);\n      await user.type(amountInput, '0.5');\n      await user.click(screen.getByTestId('exchange-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('exchange-button')).toHaveTextContent('购买代币');\n      });\n\n      // 查看交易历史\n      await user.click(screen.getByTestId('back-home'));\n      await user.click(screen.getByTestId('go-history'));\n\n      expect(screen.getByTestId('transaction-0')).toBeInTheDocument();\n      expect(screen.getByTestId('transaction-1')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Scenarios', () => {\n    it('should handle loading states correctly', async () => {\n      render(<MockApp />);\n\n      const connectButton = screen.getByTestId('connect-button');\n\n      // 点击连接按钮\n      await user.click(connectButton);\n\n      // 验证加载状态\n      expect(connectButton).toHaveTextContent('连接中...');\n      expect(connectButton).toBeDisabled();\n\n      // 等待加载完成\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n    });\n\n    it('should clear errors when performing new actions', async () => {\n      render(<MockApp />);\n\n      // 连接钱包\n      await user.click(screen.getByTestId('connect-button'));\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('已连接');\n      });\n\n      // 导航到交换页面并产生错误\n      await user.click(screen.getByTestId('go-exchange'));\n\n      const amountInput = screen.getByTestId('amount-input');\n      await user.type(amountInput, '0');\n      await user.click(screen.getByTestId('exchange-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toBeInTheDocument();\n      });\n\n      // 输入有效金额应该清除错误\n      await user.clear(amountInput);\n      await user.type(amountInput, '1.0');\n      await user.click(screen.getByTestId('exchange-button'));\n\n      // 错误应该被清除（在交易开始时）\n      expect(screen.queryByTestId('error-message')).not.toBeInTheDocument();\n    });\n  });\n});\n"],"names":["MockAppState","getState","state","connectWallet","address","user","isConnected","balance","bnb","sm","disconnectWallet","addTransaction","tx","transactions","push","updateBalance","exchange","isActive","currentPrice","totalSold","totalRemaining","HomePage","appState","onConnect","onDisconnect","onNavigate","loading","error","div","data-testid","h1","button","onClick","disabled","ExchangePage","onExchange","amount","setAmount","React","useState","h2","input","type","placeholder","value","onChange","e","target","HistoryPage","length","map","index","hash","tokenAmount","toFixed","status","MockApp","setAppState","setLoading","setError","currentPage","setCurrentPage","handleConnect","Promise","resolve","setTimeout","err","handleDisconnect","handleNavigate","page","handleExchange","bnbAmount","parseFloat","newBnbBalance","toString","newSmBalance","Math","random","substr","timestamp","Date","now","describe","userEvent","setup","it","render","expect","screen","getByTestId","toBeInTheDocument","toHaveTextContent","click","waitFor","amountInput","toHaveValue","not","queryByTestId","clear","connectButton","toBeDisabled"],"mappings":"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"}