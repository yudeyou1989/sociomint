{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/contractService.test.ts"],"sourcesContent":["// 模拟 ethers\nconst mockEthers = {\n  BrowserProvider: jest.fn(),\n  JsonRpcProvider: jest.fn(),\n  Contract: jest.fn(),\n  formatEther: jest.fn().mockReturnValue('1.0'),\n  formatUnits: jest.fn().mockReturnValue('0.000001'),\n  parseEther: jest.fn().mockReturnValue(BigInt('1000000000000000000')),\n};\n\njest.mock('ethers', () => mockEthers);\n\n// Mock ContractService class\nclass MockContractService {\n  private provider: any = null;\n  private signer: any = null;\n\n  async initialize(provider: any) {\n    this.provider = provider;\n    this.signer = await provider.getSigner();\n  }\n\n  async getTokenBalance(address: string) {\n    return BigInt('1000000000000000000');\n  }\n\n  async getBNBBalance(address: string) {\n    return BigInt('5000000000000000000');\n  }\n\n  async getExchangeStats() {\n    return {\n      totalTokensSold: BigInt('1000000000000000000000'),\n      currentPrice: BigInt('833000000000'),\n      isActive: true,\n    };\n  }\n\n  async exchangeTokens(bnbAmount: string) {\n    return { hash: '0x123456789abcdef' };\n  }\n}\n\ndescribe('ContractService', () => {\n  let contractService: MockContractService;\n  let mockProvider: any;\n  let mockSigner: any;\n  let mockContract: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSigner = {\n      getAddress: jest.fn().mockResolvedValue('0x123456789abcdef'),\n    };\n\n    mockProvider = {\n      getSigner: jest.fn().mockResolvedValue(mockSigner),\n      getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n    };\n\n    mockContract = {\n      balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n      getExchangeStats: jest.fn().mockResolvedValue({\n        totalTokensSold: BigInt('1000000000000000000000'),\n        totalTokensRemaining: BigInt('9000000000000000000000'),\n        totalBnbRaised: BigInt('100000000000000000000'),\n        currentPrice: BigInt('1000000'),\n        nextRoundPrice: BigInt('1100000'),\n        isActive: true,\n        currentRound: 1,\n      }),\n      exchangeTokens: jest.fn().mockResolvedValue({\n        hash: '0x123456789abcdef',\n        wait: jest.fn().mockResolvedValue({ status: 1 }),\n      }),\n    };\n\n    mockEthers.BrowserProvider.mockImplementation(() => mockProvider);\n    mockEthers.Contract.mockImplementation(() => mockContract);\n\n    contractService = new MockContractService();\n  });\n\n  describe('initialization', () => {\n    it('initializes with provider', async () => {\n      await contractService.initialize(mockProvider);\n\n      expect(mockProvider.getSigner).toHaveBeenCalled();\n      expect(mockEthers.Contract).toHaveBeenCalledTimes(2); // SMToken and SMTokenExchange\n    });\n  });\n\n  describe('getSMTokenBalance', () => {\n    it('returns formatted token balance', async () => {\n      await contractService.initialize(mockProvider);\n\n      const balance = await contractService.getSMTokenBalance('0x123');\n\n      expect(mockContract.balanceOf).toHaveBeenCalledWith('0x123');\n      expect(mockEthers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('1.0');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getSMTokenBalance('0x123')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getBNBBalance', () => {\n    it('returns formatted BNB balance', async () => {\n      await contractService.initialize(mockProvider);\n\n      const balance = await contractService.getBNBBalance('0x123');\n\n      expect(mockProvider.getBalance).toHaveBeenCalledWith('0x123');\n      expect(mockEthers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('1.0');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getBNBBalance('0x123')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getExchangeStats', () => {\n    it('returns formatted exchange statistics', async () => {\n      await contractService.initialize(mockProvider);\n\n      const stats = await contractService.getExchangeStats();\n\n      expect(mockContract.getExchangeStats).toHaveBeenCalled();\n      expect(stats).toEqual({\n        totalTokensSold: '1.0',\n        totalTokensRemaining: '1.0',\n        totalBnbRaised: '1.0',\n        currentPrice: '0.000001',\n        nextRoundPrice: '0.000001',\n        isActive: true,\n        currentRound: 1,\n      });\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getExchangeStats()).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('exchangeTokens', () => {\n    it('exchanges BNB for tokens successfully', async () => {\n      await contractService.initialize(mockProvider);\n\n      const result = await contractService.exchangeTokens('1.0');\n\n      expect(mockEthers.parseEther).toHaveBeenCalledWith('1.0');\n      expect(mockContract.exchangeTokens).toHaveBeenCalledWith({\n        value: BigInt('1000000000000000000'),\n      });\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.exchangeTokens('1.0')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getReadOnlyProvider', () => {\n    it('returns JsonRpcProvider instance', () => {\n      const provider = ContractService.getReadOnlyProvider();\n\n      expect(mockEthers.JsonRpcProvider).toHaveBeenCalledWith('https://data-seed-prebsc-1-s1.binance.org:8545/');\n    });\n  });\n});\n"],"names":["jest","mock","mockEthers","BrowserProvider","fn","JsonRpcProvider","Contract","formatEther","mockReturnValue","formatUnits","parseEther","BigInt","MockContractService","initialize","provider","signer","getSigner","getTokenBalance","address","getBNBBalance","getExchangeStats","totalTokensSold","currentPrice","isActive","exchangeTokens","bnbAmount","hash","describe","contractService","mockProvider","mockSigner","mockContract","beforeEach","clearAllMocks","getAddress","mockResolvedValue","getBalance","balanceOf","totalTokensRemaining","totalBnbRaised","nextRoundPrice","currentRound","wait","status","mockImplementation","it","expect","toHaveBeenCalled","toHaveBeenCalledTimes","balance","getSMTokenBalance","toHaveBeenCalledWith","toBe","rejects","toThrow","stats","toEqual","result","value","ContractService","getReadOnlyProvider"],"mappings":"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"}