{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/components/TokenExchange.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// Mock TokenExchange component\nconst MockTokenExchange = () => {\n  const [bnbAmount, setBnbAmount] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handleExchange = async () => {\n    setLoading(true);\n    // Simulate exchange\n    setTimeout(() => setLoading(false), 1000);\n  };\n\n  return (\n    <div data-testid=\"token-exchange\">\n      <h2>Token Exchange</h2>\n      <div data-testid=\"exchange-stats\">\n        <div>Current Price: 0.000833 BNB</div>\n        <div>Tokens Sold: 1,000</div>\n        <div>Tokens Remaining: 9,000</div>\n      </div>\n      <div data-testid=\"exchange-form\">\n        <input\n          data-testid=\"bnb-input\"\n          type=\"number\"\n          placeholder=\"Enter BNB amount\"\n          value={bnbAmount}\n          onChange={(e) => setBnbAmount(e.target.value)}\n        />\n        <button\n          data-testid=\"exchange-button\"\n          onClick={handleExchange}\n          disabled={loading || !bnbAmount}\n        >\n          {loading ? 'Exchanging...' : 'Exchange Tokens'}\n        </button>\n      </div>\n      <div data-testid=\"user-balance\">\n        <div>BNB Balance: 5.0</div>\n        <div>SM Balance: 100</div>\n      </div>\n    </div>\n  );\n};\n\n// Mock WalletProvider\nconst MockWalletProvider = ({ children }: { children: React.ReactNode }) => {\n  return <div data-testid=\"wallet-provider\">{children}</div>;\n};\n\n// 模拟 ethers\nconst mockContract = {\n  getExchangeStats: jest.fn().mockResolvedValue({\n    totalTokensSold: BigInt('1000000000000000000000'),\n    totalTokensRemaining: BigInt('9000000000000000000000'),\n    totalBnbRaised: BigInt('100000000000000000000'),\n    currentPrice: BigInt('833000000000'),\n    nextRoundPrice: BigInt('974900000000'),\n    isActive: true,\n    currentRound: 0,\n  }),\n  exchangeTokens: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  minPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000')),\n  maxPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000000')),\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('5000000000000000000')),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation(() => mockContract),\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  formatUnits: jest.fn().mockImplementation((value, decimals) => {\n    return (Number(value) / Math.pow(10, decimals)).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n}));\n\n// 模拟 WalletContext\nconst mockWalletContext = {\n  wallet: {\n    isConnected: true,\n    address: '0x123456789abcdef123456789abcdef123456789a',\n    chainId: 97,\n    balance: {\n      bnb: '5.0',\n      sm: '100.0'\n    }\n  },\n  connectWallet: jest.fn(),\n  disconnectWallet: jest.fn(),\n  isConnecting: false,\n};\n\njest.mock('../../contexts/WalletContext', () => ({\n  useWallet: () => mockWalletContext,\n  WalletProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <MockWalletProvider>\n    {children}\n  </MockWalletProvider>\n);\n\ndescribe('TokenExchange Component', () => {\n  const user = userEvent.setup();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders exchange interface correctly', async () => {\n    render(\n      <TestWrapper>\n        <MockTokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Token Exchange')).toBeInTheDocument();\n      expect(screen.getByTestId('exchange-form')).toBeInTheDocument();\n    });\n  });\n\n  it('displays exchange statistics', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/已售出代币/)).toBeInTheDocument();\n      expect(screen.getByText(/剩余代币/)).toBeInTheDocument();\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n  });\n\n  it('handles BNB input correctly', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    expect(bnbInput).toHaveValue('1.0');\n  });\n\n  it('calculates token amount correctly', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    await waitFor(() => {\n      expect(screen.getByText(/您将获得/)).toBeInTheDocument();\n    });\n  });\n\n  it('validates minimum purchase amount', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '0.005'); // 低于最小金额\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/购买金额不能低于最小限制/)).toBeInTheDocument();\n    });\n  });\n\n  it('validates maximum purchase amount', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '15.0'); // 高于最大金额\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/购买金额不能超过最大限制/)).toBeInTheDocument();\n    });\n  });\n\n  it('validates sufficient balance', async () => {\n    // 模拟余额不足\n    mockProvider.getBalance.mockResolvedValue(BigInt('100000000000000000')); // 0.1 BNB\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/余额不足/)).toBeInTheDocument();\n    });\n  });\n\n  it('executes token purchase successfully', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(mockContract.exchangeTokens).toHaveBeenCalledWith({\n        value: expect.any(BigInt)\n      });\n    });\n\n    await waitFor(() => {\n      expect(screen.getByText(/交易成功/)).toBeInTheDocument();\n    });\n  });\n\n  it('handles transaction failure', async () => {\n    mockContract.exchangeTokens.mockRejectedValue(new Error('Transaction failed'));\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/交易失败/)).toBeInTheDocument();\n    });\n  });\n\n  it('displays loading state during transaction', async () => {\n    // 模拟慢交易\n    const slowWait = jest.fn().mockImplementation(() => \n      new Promise(resolve => setTimeout(() => resolve({ status: 1 }), 1000))\n    );\n    \n    mockContract.exchangeTokens.mockResolvedValue({\n      hash: '0x123456789abcdef',\n      wait: slowWait\n    });\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/交易进行中/)).toBeInTheDocument();\n    });\n  });\n\n  it('updates exchange stats after successful purchase', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n\n    const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n    \n    await user.clear(bnbInput);\n    await user.type(bnbInput, '1.0');\n\n    const purchaseButton = screen.getByText('购买代币');\n    await user.click(purchaseButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/交易成功/)).toBeInTheDocument();\n    });\n\n    // 应该重新获取统计信息\n    await waitFor(() => {\n      expect(mockContract.getExchangeStats).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  it('handles exchange inactive state', async () => {\n    mockContract.getExchangeStats.mockResolvedValue({\n      totalTokensSold: BigInt('1000000000000000000000'),\n      totalTokensRemaining: BigInt('9000000000000000000000'),\n      totalBnbRaised: BigInt('100000000000000000000'),\n      currentPrice: BigInt('833000000000'),\n      nextRoundPrice: BigInt('974900000000'),\n      isActive: false, // 交换未激活\n      currentRound: 0,\n    });\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/代币兑换暂未开放/)).toBeInTheDocument();\n    });\n\n    const purchaseButton = screen.getByText('购买代币');\n    expect(purchaseButton).toBeDisabled();\n  });\n\n  it('displays correct price formatting', async () => {\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/0\\.000000000833/)).toBeInTheDocument();\n    });\n  });\n\n  it('handles wallet not connected state', async () => {\n    // 模拟钱包未连接\n    const disconnectedWalletContext = {\n      ...mockWalletContext,\n      wallet: {\n        ...mockWalletContext.wallet,\n        isConnected: false,\n        address: '',\n      }\n    };\n\n    jest.mocked(require('../../contexts/WalletContext').useWallet).mockReturnValue(disconnectedWalletContext);\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('请先连接钱包')).toBeInTheDocument();\n    \n    const purchaseButton = screen.getByText('购买代币');\n    expect(purchaseButton).toBeDisabled();\n  });\n\n  it('handles network error gracefully', async () => {\n    mockContract.getExchangeStats.mockRejectedValue(new Error('Network error'));\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/加载失败/)).toBeInTheDocument();\n    });\n\n    const retryButton = screen.getByText('重试');\n    expect(retryButton).toBeInTheDocument();\n  });\n\n  it('retries loading on network error', async () => {\n    mockContract.getExchangeStats\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockResolvedValue({\n        totalTokensSold: BigInt('1000000000000000000000'),\n        totalTokensRemaining: BigInt('9000000000000000000000'),\n        totalBnbRaised: BigInt('100000000000000000000'),\n        currentPrice: BigInt('833000000000'),\n        nextRoundPrice: BigInt('974900000000'),\n        isActive: true,\n        currentRound: 0,\n      });\n\n    render(\n      <TestWrapper>\n        <TokenExchange />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/加载失败/)).toBeInTheDocument();\n    });\n\n    const retryButton = screen.getByText('重试');\n    await user.click(retryButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","Contract","mockContract","formatEther","value","Number","toString","formatUnits","decimals","Math","pow","parseEther","BigInt","floor","parseFloat","useWallet","mockWalletContext","WalletProvider","children","div","MockTokenExchange","bnbAmount","setBnbAmount","React","useState","loading","setLoading","handleExchange","setTimeout","data-testid","h2","input","type","placeholder","onChange","e","target","button","onClick","disabled","MockWalletProvider","getExchangeStats","mockResolvedValue","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","exchangeTokens","hash","wait","status","minPurchaseAmount","maxPurchaseAmount","getSigner","getAddress","getBalance","wallet","isConnected","address","chainId","balance","bnb","sm","connectWallet","disconnectWallet","isConnecting","TestWrapper","describe","user","userEvent","setup","beforeEach","clearAllMocks","it","render","waitFor","expect","screen","getByText","toBeInTheDocument","getByTestId","TokenExchange","bnbInput","getByPlaceholderText","clear","toHaveValue","purchaseButton","click","toHaveBeenCalledWith","any","mockRejectedValue","Error","slowWait","Promise","resolve","toHaveBeenCalledTimes","toBeDisabled","disconnectedWalletContext","mocked","require","mockReturnValue","retryButton","mockRejectedValueOnce"],"mappings":"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"}