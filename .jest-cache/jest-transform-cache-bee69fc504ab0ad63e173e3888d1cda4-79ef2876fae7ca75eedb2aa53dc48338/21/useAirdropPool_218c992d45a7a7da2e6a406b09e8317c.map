{"version":3,"names":["formatNumber","cov_1a6mnso6yt","f","s","formatTimeRemaining","useAirdropPool","AIRDROP_POOL_ABI","name","type","inputs","outputs","components","stateMutability","RED_FLOWER_TOKEN_ABI","SM_TOKEN_ABI","refreshKey","b","address","isConnected","_wagmi","useAccount","supabase","_authhelpersreact","useSupabaseClient","isLoadingData","setIsLoadingData","_react","useState","error","setError","refetchKey","setRefetchKey","airdropPoolAddress","process","env","NEXT_PUBLIC_AIRDROP_POOL_ADDRESS","redFlowerTokenAddress","NEXT_PUBLIC_RED_FLOWER_TOKEN_ADDRESS","smTokenAddress","NEXT_PUBLIC_SM_TOKEN_ADDRESS","contractReads","useContractReads","contracts","abi","functionName","args","watch","cacheTime","staleTime","enabled","onError","console","message","parseContractData","useCallback","data","currentRoundResult","poolConfigResult","userDepositResult","redFlowerBalanceResult","smBalanceResult","currentRound","status","id","result","startTime","endTime","totalDeposits","totalRewards","participantCount","distributed","poolConfig","weeklySmAmount","roundDuration","minDeposit","maxDeposit","isActive","userDeposit","amount","roundId","timestamp","claimed","userBalance","redFlower","sm","fetchDatabaseData","userStats","statsError","from","select","eq","single","code","currentRoundData","roundError","useEffect","loadData","isLoading","refetch","prev","contractData","seconds","days","Math","floor","hours","minutes","secs","toString","padStart","num","toFixed"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useAirdropPool.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useAccount, useContractRead, useContractReads } from 'wagmi';\nimport { useSupabaseClient } from '@supabase/auth-helpers-react';\nimport { formatEther, parseEther } from 'viem';\nimport type { Database } from '@/types/supabase';\n\ntype SupabaseClient = ReturnType<typeof useSupabaseClient<Database>>;\n\ninterface AirdropRound {\n  id: bigint;\n  startTime: bigint;\n  endTime: bigint;\n  totalDeposits: bigint;\n  totalRewards: bigint;\n  participantCount: bigint;\n  distributed: boolean;\n}\n\ninterface UserDeposit {\n  amount: bigint;\n  roundId: bigint;\n  timestamp: bigint;\n  claimed: boolean;\n}\n\ninterface UserBalance {\n  redFlower: bigint;\n  sm: bigint;\n}\n\ninterface PoolConfig {\n  weeklySmAmount: bigint;\n  roundDuration: bigint;\n  minDeposit: bigint;\n  maxDeposit: bigint;\n  isActive: boolean;\n}\n\ninterface AirdropPoolData {\n  currentRound: AirdropRound | null;\n  userDeposit: UserDeposit | null;\n  userBalance: UserBalance | null;\n  poolConfig: PoolConfig | null;\n  isLoadingData: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\nconst AIRDROP_POOL_ABI = [\n  {\n    name: 'getCurrentRound',\n    type: 'function',\n    inputs: [],\n    outputs: [\n      {\n        type: 'tuple',\n        components: [\n          { name: 'id', type: 'uint256' },\n          { name: 'startTime', type: 'uint256' },\n          { name: 'endTime', type: 'uint256' },\n          { name: 'totalDeposits', type: 'uint256' },\n          { name: 'totalRewards', type: 'uint256' },\n          { name: 'participantCount', type: 'uint256' },\n          { name: 'distributed', type: 'bool' }\n        ]\n      }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    name: 'getUserCurrentDeposit',\n    type: 'function',\n    inputs: [{ name: 'user', type: 'address' }],\n    outputs: [\n      {\n        type: 'tuple',\n        components: [\n          { name: 'amount', type: 'uint256' },\n          { name: 'roundId', type: 'uint256' },\n          { name: 'timestamp', type: 'uint256' },\n          { name: 'claimed', type: 'bool' }\n        ]\n      }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    name: 'poolConfig',\n    type: 'function',\n    inputs: [],\n    outputs: [\n      { name: 'weeklySmAmount', type: 'uint256' },\n      { name: 'roundDuration', type: 'uint256' },\n      { name: 'minDeposit', type: 'uint256' },\n      { name: 'maxDeposit', type: 'uint256' },\n      { name: 'isActive', type: 'bool' }\n    ],\n    stateMutability: 'view'\n  }\n] as const;\n\nconst RED_FLOWER_TOKEN_ABI = [\n  {\n    name: 'balanceOf',\n    type: 'function',\n    inputs: [{ name: 'account', type: 'address' }],\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view'\n  }\n] as const;\n\nconst SM_TOKEN_ABI = [\n  {\n    name: 'balanceOf',\n    type: 'function',\n    inputs: [{ name: 'account', type: 'address' }],\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view'\n  }\n] as const;\n\nexport function useAirdropPool(refreshKey: number = 0): AirdropPoolData {\n  const { address, isConnected } = useAccount();\n  const supabase = useSupabaseClient<Database>();\n  \n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refetchKey, setRefetchKey] = useState(0);\n  \n  const airdropPoolAddress = process.env.NEXT_PUBLIC_AIRDROP_POOL_ADDRESS as `0x${string}`;\n  const redFlowerTokenAddress = process.env.NEXT_PUBLIC_RED_FLOWER_TOKEN_ADDRESS as `0x${string}`;\n  const smTokenAddress = process.env.NEXT_PUBLIC_SM_TOKEN_ADDRESS as `0x${string}`;\n  \n  // 合约读取配置\n  const contractReads = useContractReads({\n    contracts: [\n      // 获取当前轮次\n      {\n        address: airdropPoolAddress,\n        abi: AIRDROP_POOL_ABI,\n        functionName: 'getCurrentRound'\n      },\n      // 获取池配置\n      {\n        address: airdropPoolAddress,\n        abi: AIRDROP_POOL_ABI,\n        functionName: 'poolConfig'\n      },\n      // 获取用户当前投入（如果已连接钱包）\n      ...(isConnected && address ? [{\n        address: airdropPoolAddress,\n        abi: AIRDROP_POOL_ABI,\n        functionName: 'getUserCurrentDeposit',\n        args: [address]\n      }] : []),\n      // 获取用户小红花余额\n      ...(isConnected && address ? [{\n        address: redFlowerTokenAddress,\n        abi: RED_FLOWER_TOKEN_ABI,\n        functionName: 'balanceOf',\n        args: [address]\n      }] : []),\n      // 获取用户 SM 余额\n      ...(isConnected && address ? [{\n        address: smTokenAddress,\n        abi: SM_TOKEN_ABI,\n        functionName: 'balanceOf',\n        args: [address]\n      }] : [])\n    ],\n    watch: true,\n    cacheTime: 5000, // 5秒缓存\n    staleTime: 2000, // 2秒后标记为过期\n    enabled: !!airdropPoolAddress,\n    onError: (error) => {\n      console.error('Contract read error:', error);\n      setError(error.message);\n    }\n  });\n  \n  // 解析合约数据\n  const parseContractData = useCallback(() => {\n    if (!contractReads.data) return null;\n    \n    try {\n      const [currentRoundResult, poolConfigResult, userDepositResult, redFlowerBalanceResult, smBalanceResult] = contractReads.data;\n      \n      // 解析当前轮次\n      const currentRound: AirdropRound | null = currentRoundResult.status === 'success' ? {\n        id: currentRoundResult.result[0],\n        startTime: currentRoundResult.result[1],\n        endTime: currentRoundResult.result[2],\n        totalDeposits: currentRoundResult.result[3],\n        totalRewards: currentRoundResult.result[4],\n        participantCount: currentRoundResult.result[5],\n        distributed: currentRoundResult.result[6]\n      } : null;\n      \n      // 解析池配置\n      const poolConfig: PoolConfig | null = poolConfigResult.status === 'success' ? {\n        weeklySmAmount: poolConfigResult.result[0],\n        roundDuration: poolConfigResult.result[1],\n        minDeposit: poolConfigResult.result[2],\n        maxDeposit: poolConfigResult.result[3],\n        isActive: poolConfigResult.result[4]\n      } : null;\n      \n      // 解析用户投入\n      const userDeposit: UserDeposit | null = userDepositResult?.status === 'success' ? {\n        amount: userDepositResult.result[0],\n        roundId: userDepositResult.result[1],\n        timestamp: userDepositResult.result[2],\n        claimed: userDepositResult.result[3]\n      } : null;\n      \n      // 解析用户余额\n      const userBalance: UserBalance | null = (\n        redFlowerBalanceResult?.status === 'success' && \n        smBalanceResult?.status === 'success'\n      ) ? {\n        redFlower: redFlowerBalanceResult.result,\n        sm: smBalanceResult.result\n      } : null;\n      \n      return {\n        currentRound,\n        poolConfig,\n        userDeposit,\n        userBalance\n      };\n    } catch (error) {\n      console.error('Parse contract data error:', error);\n      setError('Failed to parse contract data');\n      return null;\n    }\n  }, [contractReads.data]);\n  \n  // 从数据库获取补充信息\n  const fetchDatabaseData = useCallback(async () => {\n    if (!address) return;\n    \n    try {\n      // 获取用户空投统计\n      const { data: userStats, error: statsError } = await supabase\n        .from('user_airdrop_stats')\n        .select('*')\n        .eq('user_id', address)\n        .single();\n      \n      if (statsError && statsError.code !== 'PGRST116') {\n        console.error('Database query error:', statsError);\n      }\n      \n      // 获取当前轮次详情\n      const { data: currentRoundData, error: roundError } = await supabase\n        .from('current_airdrop_round')\n        .select('*')\n        .single();\n      \n      if (roundError && roundError.code !== 'PGRST116') {\n        console.error('Database query error:', roundError);\n      }\n      \n      return {\n        userStats,\n        currentRoundData\n      };\n    } catch (error) {\n      console.error('Database fetch error:', error);\n      return null;\n    }\n  }, [address, supabase]);\n  \n  // 主要数据获取效果\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoadingData(true);\n      setError(null);\n      \n      try {\n        // 等待合约数据\n        if (contractReads.isLoading) {\n          return;\n        }\n        \n        // 获取数据库补充数据\n        await fetchDatabaseData();\n        \n      } catch (error: any) {\n        console.error('Load data error:', error);\n        setError(error.message || 'Failed to load data');\n      } finally {\n        setIsLoadingData(false);\n      }\n    };\n    \n    loadData();\n  }, [contractReads.isLoading, fetchDatabaseData, refreshKey, refetchKey]);\n  \n  // 手动刷新函数\n  const refetch = useCallback(() => {\n    setRefetchKey(prev => prev + 1);\n    contractReads.refetch();\n  }, [contractReads]);\n  \n  // 解析最终数据\n  const contractData = parseContractData();\n  \n  return {\n    currentRound: contractData?.currentRound || null,\n    userDeposit: contractData?.userDeposit || null,\n    userBalance: contractData?.userBalance || null,\n    poolConfig: contractData?.poolConfig || null,\n    isLoadingData: isLoadingData || contractReads.isLoading,\n    error: error || (contractReads.error?.message),\n    refetch\n  };\n}\n\n// 辅助函数：格式化时间剩余\nexport function formatTimeRemaining(seconds: number): string {\n  if (seconds <= 0) return '00:00:00';\n  \n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  if (days > 0) {\n    return `${days}d ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n  \n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n}\n\n// 辅助函数：格式化数字\nexport function formatNumber(num: number): string {\n  if (num >= 1e9) {\n    return (num / 1e9).toFixed(1) + 'B';\n  }\n  if (num >= 1e6) {\n    return (num / 1e6).toFixed(1) + 'M';\n  }\n  if (num >= 1e3) {\n    return (num / 1e3).toFixed(1) + 'K';\n  }\n  return num.toFixed(0);\n}\n"],"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","ignoreList":[]}