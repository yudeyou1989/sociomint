{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/components/AdminPanel.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\n\n// Mock AdminPanel component\nconst MockAdminPanel = () => {\n  const [isAdmin, setIsAdmin] = React.useState(false);\n  const [isPaused, setIsPaused] = React.useState(false);\n  const [minAmount, setMinAmount] = React.useState('0.01');\n  const [maxAmount, setMaxAmount] = React.useState('10');\n\n  return (\n    <div data-testid=\"admin-panel\">\n      <h2>Admin Panel</h2>\n      {!isAdmin ? (\n        <div data-testid=\"access-denied\">\n          <p>Access Denied: Admin privileges required</p>\n          <button onClick={() => setIsAdmin(true)} data-testid=\"mock-admin-access\">\n            Grant Admin Access (Test)\n          </button>\n        </div>\n      ) : (\n        <div data-testid=\"admin-controls\">\n          <div data-testid=\"contract-controls\">\n            <h3>Contract Controls</h3>\n            <button\n              data-testid=\"pause-button\"\n              onClick={() => setIsPaused(!isPaused)}\n            >\n              {isPaused ? 'Unpause' : 'Pause'} Contract\n            </button>\n            <div data-testid=\"contract-status\">\n              Status: {isPaused ? 'Paused' : 'Active'}\n            </div>\n          </div>\n          <div data-testid=\"amount-controls\">\n            <h3>Purchase Limits</h3>\n            <div>\n              <label>Min Amount:</label>\n              <input\n                data-testid=\"min-amount-input\"\n                value={minAmount}\n                onChange={(e) => setMinAmount(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Max Amount:</label>\n              <input\n                data-testid=\"max-amount-input\"\n                value={maxAmount}\n                onChange={(e) => setMaxAmount(e.target.value)}\n              />\n            </div>\n            <button data-testid=\"update-limits-button\">Update Limits</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 模拟 ethers\nconst mockContract = {\n  getExchangeStats: jest.fn(),\n  minPurchaseAmount: jest.fn(),\n  maxPurchaseAmount: jest.fn(),\n  isUserVerified: jest.fn(),\n  verifyUser: jest.fn(),\n  setMinPurchaseAmount: jest.fn(),\n  setMaxPurchaseAmount: jest.fn(),\n  pause: jest.fn(),\n  unpause: jest.fn(),\n  paused: jest.fn(),\n  wait: jest.fn().mockResolvedValue({ status: 1 }),\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation(() => mockContract),\n  formatEther: jest.fn().mockReturnValue('1.0'),\n  parseEther: jest.fn().mockReturnValue(BigInt('1000000000000000000')),\n}));\n\n// 模拟 window.ethereum\nconst mockEthereum = {\n  request: jest.fn().mockResolvedValue(['0x123456789abcdef']),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n};\n\ndescribe('AdminPanel', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 设置默认返回值\n    mockContract.getExchangeStats.mockResolvedValue({\n      totalTokensSold: BigInt('1000000000000000000000'),\n      totalTokensRemaining: BigInt('9000000000000000000000'),\n      totalBnbRaised: BigInt('100000000000000000000'),\n      currentPrice: BigInt('1000000'),\n      nextRoundPrice: BigInt('1100000'),\n      isActive: true,\n      currentRound: 1,\n    });\n    \n    mockContract.minPurchaseAmount.mockResolvedValue(BigInt('10000000000000000'));\n    mockContract.maxPurchaseAmount.mockResolvedValue(BigInt('10000000000000000000'));\n    mockContract.isUserVerified.mockResolvedValue(false);\n    mockContract.paused.mockResolvedValue(false);\n    \n    // 模拟 window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: mockEthereum,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  it('renders admin panel correctly', async () => {\n    render(<MockAdminPanel />);\n\n    // 等待组件加载\n    await waitFor(() => {\n      expect(screen.getByText('Admin Panel')).toBeInTheDocument();\n    });\n\n    expect(screen.getByTestId('access-denied')).toBeInTheDocument();\n  });\n\n  it('grants admin access successfully', async () => {\n    render(<MockAdminPanel />);\n\n    const grantAccessButton = screen.getByTestId('mock-admin-access');\n    fireEvent.click(grantAccessButton);\n\n    await waitFor(() => {\n      expect(screen.getByTestId('admin-controls')).toBeInTheDocument();\n    });\n  });\n\n  it('loads exchange stats after wallet connection', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(mockContract.getExchangeStats).toHaveBeenCalled();\n    });\n  });\n\n  it('verifies user correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 输入用户地址\n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { \n      target: { value: '0x1234567890abcdef1234567890abcdef12345678' } \n    });\n    \n    // 点击验证用户\n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    await waitFor(() => {\n      expect(mockContract.verifyUser).toHaveBeenCalledWith(\n        '0x1234567890abcdef1234567890abcdef12345678',\n        true\n      );\n    });\n  });\n\n  it('updates purchase limits correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 更新最小购买金额\n    const minAmountInput = screen.getByDisplayValue('0.01');\n    fireEvent.change(minAmountInput, { target: { value: '0.02' } });\n    \n    const updateLimitsButton = screen.getByText('更新限制');\n    fireEvent.click(updateLimitsButton);\n    \n    await waitFor(() => {\n      expect(mockContract.setMinPurchaseAmount).toHaveBeenCalled();\n    });\n  });\n\n  it('handles pause/unpause correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 暂停合约\n    const pauseButton = screen.getByText('暂停合约');\n    fireEvent.click(pauseButton);\n    \n    await waitFor(() => {\n      expect(mockContract.pause).toHaveBeenCalled();\n    });\n  });\n\n  it('displays loading states correctly', async () => {\n    render(<AdminPanel />);\n    \n    expect(screen.getByText('加载中...')).toBeInTheDocument();\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.queryByText('加载中...')).not.toBeInTheDocument();\n    });\n  });\n\n  it('handles errors gracefully', async () => {\n    // 模拟错误\n    mockContract.getExchangeStats.mockRejectedValue(new Error('Contract error'));\n    \n    render(<AdminPanel />);\n    \n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      // 应该显示错误状态或回退到默认状态\n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n    });\n  });\n\n  it('validates user address input', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 输入无效地址\n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { target: { value: 'invalid-address' } });\n    \n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    // 应该不会调用合约函数\n    expect(mockContract.verifyUser).not.toHaveBeenCalled();\n  });\n\n  it('displays transaction status correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 模拟交易进行中\n    mockContract.verifyUser.mockReturnValue({\n      hash: '0x123',\n      wait: jest.fn().mockImplementation(() => new Promise(resolve => {\n        setTimeout(() => resolve({ status: 1 }), 100);\n      }))\n    });\n    \n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { \n      target: { value: '0x1234567890abcdef1234567890abcdef12345678' } \n    });\n    \n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    // 应该显示交易进行中的状态\n    await waitFor(() => {\n      expect(screen.getByText('交易进行中...')).toBeInTheDocument();\n    });\n  });\n\n  it('handles network switching', async () => {\n    render(<AdminPanel />);\n    \n    // 模拟网络切换错误\n    mockEthereum.request.mockRejectedValueOnce(new Error('User rejected'));\n    \n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      // 应该处理网络切换错误\n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","Contract","mockContract","formatEther","mockReturnValue","parseEther","BigInt","MockAdminPanel","isAdmin","setIsAdmin","React","useState","isPaused","setIsPaused","minAmount","setMinAmount","maxAmount","setMaxAmount","div","data-testid","h2","p","button","onClick","h3","label","input","value","onChange","e","target","getExchangeStats","minPurchaseAmount","maxPurchaseAmount","isUserVerified","verifyUser","setMinPurchaseAmount","setMaxPurchaseAmount","pause","unpause","paused","wait","mockResolvedValue","status","getSigner","getAddress","getBalance","mockEthereum","request","on","removeListener","isMetaMask","describe","beforeEach","clearAllMocks","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","Object","defineProperty","window","writable","configurable","it","render","waitFor","expect","screen","getByText","toBeInTheDocument","getByTestId","grantAccessButton","fireEvent","click","AdminPanel","connectButton","toHaveBeenCalled","userAddressInput","getByPlaceholderText","change","verifyButton","toHaveBeenCalledWith","minAmountInput","getByDisplayValue","updateLimitsButton","pauseButton","queryByText","not","mockRejectedValue","Error","hash","Promise","resolve","setTimeout","mockRejectedValueOnce"],"mappings":"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"}