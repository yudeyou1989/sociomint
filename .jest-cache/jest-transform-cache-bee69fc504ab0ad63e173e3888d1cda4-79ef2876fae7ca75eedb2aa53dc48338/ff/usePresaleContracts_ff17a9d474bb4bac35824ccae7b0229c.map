{"version":3,"names":["cov_1zn1tuppv9","actualCoverage","s","usePresaleContract","f","isLoading","setIsLoading","_react","useState","presaleEnded","setPresaleEnded","currentPrice","setCurrentPrice","BigInt","soldTokens","setSoldTokens","totalPresaleTokens","setTotalPresaleTokens","minPurchaseAmount","setMinPurchaseAmount","maxPurchaseAmount","setMaxPurchaseAmount","userPurchase","setUserPurchase","buyTokens","getCurrentPrice","exchangeLoading","_useSMTokenExchange","useSMTokenExchange","useEffect","initializePresaleData","price","b","_viem","parseEther","error","console","purchaseTokens","amount","prev"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/contracts/usePresaleContracts.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { parseEther, formatEther } from 'viem';\nimport { useSMTokenExchange } from '../useSMTokenExchange';\n\nexport interface PresaleContractData {\n  purchaseTokens: (amount: bigint) => Promise<void>;\n  isLoading: boolean;\n  presaleEnded?: boolean;\n  currentPrice?: bigint;\n  soldTokens?: bigint;\n  totalPresaleTokens?: bigint;\n  minPurchaseAmount?: bigint;\n  maxPurchaseAmount?: bigint;\n  userPurchase?: bigint[];\n}\n\nexport function usePresaleContract(): PresaleContractData {\n  const [isLoading, setIsLoading] = useState(false);\n  const [presaleEnded, setPresaleEnded] = useState(false);\n  const [currentPrice, setCurrentPrice] = useState<bigint>(BigInt(0));\n  const [soldTokens, setSoldTokens] = useState<bigint>(BigInt(0));\n  const [totalPresaleTokens, setTotalPresaleTokens] = useState<bigint>(BigInt(0));\n  const [minPurchaseAmount, setMinPurchaseAmount] = useState<bigint>(BigInt(0));\n  const [maxPurchaseAmount, setMaxPurchaseAmount] = useState<bigint>(BigInt(0));\n  const [userPurchase, setUserPurchase] = useState<bigint[]>([]);\n\n  // 使用现有的 SMTokenExchange hook\n  const { buyTokens, getCurrentPrice, isLoading: exchangeLoading } = useSMTokenExchange();\n\n  useEffect(() => {\n    // 初始化预售数据\n    const initializePresaleData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // 获取当前价格\n        const price = await getCurrentPrice();\n        if (price) {\n          setCurrentPrice(BigInt(price));\n        }\n        \n        // 设置默认值\n        setTotalPresaleTokens(parseEther('1000000')); // 100万代币\n        setSoldTokens(parseEther('250000')); // 已售出25万\n        setMinPurchaseAmount(parseEther('0.01')); // 最小0.01 BNB\n        setMaxPurchaseAmount(parseEther('10')); // 最大10 BNB\n        setPresaleEnded(false);\n        \n      } catch (error) {\n        console.error('初始化预售数据失败:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializePresaleData();\n  }, [getCurrentPrice]);\n\n  const purchaseTokens = async (amount: bigint) => {\n    try {\n      setIsLoading(true);\n      await buyTokens(amount);\n      \n      // 更新已售出代币数量\n      setSoldTokens(prev => prev + amount);\n    } catch (error) {\n      console.error('购买代币失败:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    purchaseTokens,\n    isLoading: isLoading || exchangeLoading,\n    presaleEnded,\n    currentPrice,\n    soldTokens,\n    totalPresaleTokens,\n    minPurchaseAmount,\n    maxPurchaseAmount,\n    userPurchase\n  };\n}\n"],"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","ignoreList":[]}