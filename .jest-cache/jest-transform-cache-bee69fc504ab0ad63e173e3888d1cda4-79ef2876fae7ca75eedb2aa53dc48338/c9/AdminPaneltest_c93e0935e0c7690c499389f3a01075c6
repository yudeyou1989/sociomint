cb308151bc3446c3949a5fdd3263058f
"use strict";
jest.mock('ethers', ()=>({
        BrowserProvider: jest.fn().mockImplementation(()=>mockProvider),
        Contract: jest.fn().mockImplementation(()=>mockContract),
        formatEther: jest.fn().mockReturnValue('1.0'),
        parseEther: jest.fn().mockReturnValue(BigInt('1000000000000000000'))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _AdminPanel = /*#__PURE__*/ _interop_require_default(require("../../AdminPanel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 模拟 ethers
const mockContract = {
    getExchangeStats: jest.fn(),
    minPurchaseAmount: jest.fn(),
    maxPurchaseAmount: jest.fn(),
    isUserVerified: jest.fn(),
    verifyUser: jest.fn(),
    setMinPurchaseAmount: jest.fn(),
    setMaxPurchaseAmount: jest.fn(),
    pause: jest.fn(),
    unpause: jest.fn(),
    paused: jest.fn(),
    wait: jest.fn().mockResolvedValue({
        status: 1
    })
};
const mockProvider = {
    getSigner: jest.fn().mockResolvedValue({
        getAddress: jest.fn().mockResolvedValue('0x123456789abcdef')
    }),
    getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000'))
};
// 模拟 window.ethereum
const mockEthereum = {
    request: jest.fn().mockResolvedValue([
        '0x123456789abcdef'
    ]),
    on: jest.fn(),
    removeListener: jest.fn(),
    isMetaMask: true
};
describe('AdminPanel', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // 设置默认返回值
        mockContract.getExchangeStats.mockResolvedValue({
            totalTokensSold: BigInt('1000000000000000000000'),
            totalTokensRemaining: BigInt('9000000000000000000000'),
            totalBnbRaised: BigInt('100000000000000000000'),
            currentPrice: BigInt('1000000'),
            nextRoundPrice: BigInt('1100000'),
            isActive: true,
            currentRound: 1
        });
        mockContract.minPurchaseAmount.mockResolvedValue(BigInt('10000000000000000'));
        mockContract.maxPurchaseAmount.mockResolvedValue(BigInt('10000000000000000000'));
        mockContract.isUserVerified.mockResolvedValue(false);
        mockContract.paused.mockResolvedValue(false);
        // 模拟 window.ethereum
        Object.defineProperty(window, 'ethereum', {
            value: mockEthereum,
            writable: true,
            configurable: true
        });
    });
    it('renders admin panel correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 等待组件加载
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('管理员面板')).toBeInTheDocument();
        });
        expect(_react1.screen.getByText('连接钱包')).toBeInTheDocument();
    });
    it('connects wallet successfully', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockEthereum.request).toHaveBeenCalledWith({
                method: 'eth_requestAccounts'
            });
        });
    });
    it('loads exchange stats after wallet connection', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.getExchangeStats).toHaveBeenCalled();
        });
    });
    it('verifies user correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
        });
        // 输入用户地址
        const userAddressInput = _react1.screen.getByPlaceholderText('输入用户地址');
        _react1.fireEvent.change(userAddressInput, {
            target: {
                value: '0x1234567890abcdef1234567890abcdef12345678'
            }
        });
        // 点击验证用户
        const verifyButton = _react1.screen.getByText('验证用户');
        _react1.fireEvent.click(verifyButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.verifyUser).toHaveBeenCalledWith('0x1234567890abcdef1234567890abcdef12345678', true);
        });
    });
    it('updates purchase limits correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
        });
        // 更新最小购买金额
        const minAmountInput = _react1.screen.getByDisplayValue('0.01');
        _react1.fireEvent.change(minAmountInput, {
            target: {
                value: '0.02'
            }
        });
        const updateLimitsButton = _react1.screen.getByText('更新限制');
        _react1.fireEvent.click(updateLimitsButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.setMinPurchaseAmount).toHaveBeenCalled();
        });
    });
    it('handles pause/unpause correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
        });
        // 暂停合约
        const pauseButton = _react1.screen.getByText('暂停合约');
        _react1.fireEvent.click(pauseButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.pause).toHaveBeenCalled();
        });
    });
    it('displays loading states correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        expect(_react1.screen.getByText('加载中...')).toBeInTheDocument();
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByText('加载中...')).not.toBeInTheDocument();
        });
    });
    it('handles errors gracefully', async ()=>{
        // 模拟错误
        mockContract.getExchangeStats.mockRejectedValue(new Error('Contract error'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            // 应该显示错误状态或回退到默认状态
            expect(_react1.screen.getByText('连接钱包')).toBeInTheDocument();
        });
    });
    it('validates user address input', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
        });
        // 输入无效地址
        const userAddressInput = _react1.screen.getByPlaceholderText('输入用户地址');
        _react1.fireEvent.change(userAddressInput, {
            target: {
                value: 'invalid-address'
            }
        });
        const verifyButton = _react1.screen.getByText('验证用户');
        _react1.fireEvent.click(verifyButton);
        // 应该不会调用合约函数
        expect(mockContract.verifyUser).not.toHaveBeenCalled();
    });
    it('displays transaction status correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 连接钱包
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
        });
        // 模拟交易进行中
        mockContract.verifyUser.mockReturnValue({
            hash: '0x123',
            wait: jest.fn().mockImplementation(()=>new Promise((resolve)=>{
                    setTimeout(()=>resolve({
                            status: 1
                        }), 100);
                }))
        });
        const userAddressInput = _react1.screen.getByPlaceholderText('输入用户地址');
        _react1.fireEvent.change(userAddressInput, {
            target: {
                value: '0x1234567890abcdef1234567890abcdef12345678'
            }
        });
        const verifyButton = _react1.screen.getByText('验证用户');
        _react1.fireEvent.click(verifyButton);
        // 应该显示交易进行中的状态
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('交易进行中...')).toBeInTheDocument();
        });
    });
    it('handles network switching', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AdminPanel.default, {}));
        // 模拟网络切换错误
        mockEthereum.request.mockRejectedValueOnce(new Error('User rejected'));
        const connectButton = _react1.screen.getByText('连接钱包');
        _react1.fireEvent.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            // 应该处理网络切换错误
            expect(_react1.screen.getByText('连接钱包')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,