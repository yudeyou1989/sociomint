{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/components/AdminPanel.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport AdminPanel from '../../AdminPanel';\n\n// 模拟 ethers\nconst mockContract = {\n  getExchangeStats: jest.fn(),\n  minPurchaseAmount: jest.fn(),\n  maxPurchaseAmount: jest.fn(),\n  isUserVerified: jest.fn(),\n  verifyUser: jest.fn(),\n  setMinPurchaseAmount: jest.fn(),\n  setMaxPurchaseAmount: jest.fn(),\n  pause: jest.fn(),\n  unpause: jest.fn(),\n  paused: jest.fn(),\n  wait: jest.fn().mockResolvedValue({ status: 1 }),\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation(() => mockContract),\n  formatEther: jest.fn().mockReturnValue('1.0'),\n  parseEther: jest.fn().mockReturnValue(BigInt('1000000000000000000')),\n}));\n\n// 模拟 window.ethereum\nconst mockEthereum = {\n  request: jest.fn().mockResolvedValue(['0x123456789abcdef']),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n};\n\ndescribe('AdminPanel', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 设置默认返回值\n    mockContract.getExchangeStats.mockResolvedValue({\n      totalTokensSold: BigInt('1000000000000000000000'),\n      totalTokensRemaining: BigInt('9000000000000000000000'),\n      totalBnbRaised: BigInt('100000000000000000000'),\n      currentPrice: BigInt('1000000'),\n      nextRoundPrice: BigInt('1100000'),\n      isActive: true,\n      currentRound: 1,\n    });\n    \n    mockContract.minPurchaseAmount.mockResolvedValue(BigInt('10000000000000000'));\n    mockContract.maxPurchaseAmount.mockResolvedValue(BigInt('10000000000000000000'));\n    mockContract.isUserVerified.mockResolvedValue(false);\n    mockContract.paused.mockResolvedValue(false);\n    \n    // 模拟 window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: mockEthereum,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  it('renders admin panel correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 等待组件加载\n    await waitFor(() => {\n      expect(screen.getByText('管理员面板')).toBeInTheDocument();\n    });\n    \n    expect(screen.getByText('连接钱包')).toBeInTheDocument();\n  });\n\n  it('connects wallet successfully', async () => {\n    render(<AdminPanel />);\n    \n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(mockEthereum.request).toHaveBeenCalledWith({\n        method: 'eth_requestAccounts'\n      });\n    });\n  });\n\n  it('loads exchange stats after wallet connection', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(mockContract.getExchangeStats).toHaveBeenCalled();\n    });\n  });\n\n  it('verifies user correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 输入用户地址\n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { \n      target: { value: '0x1234567890abcdef1234567890abcdef12345678' } \n    });\n    \n    // 点击验证用户\n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    await waitFor(() => {\n      expect(mockContract.verifyUser).toHaveBeenCalledWith(\n        '0x1234567890abcdef1234567890abcdef12345678',\n        true\n      );\n    });\n  });\n\n  it('updates purchase limits correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 更新最小购买金额\n    const minAmountInput = screen.getByDisplayValue('0.01');\n    fireEvent.change(minAmountInput, { target: { value: '0.02' } });\n    \n    const updateLimitsButton = screen.getByText('更新限制');\n    fireEvent.click(updateLimitsButton);\n    \n    await waitFor(() => {\n      expect(mockContract.setMinPurchaseAmount).toHaveBeenCalled();\n    });\n  });\n\n  it('handles pause/unpause correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 暂停合约\n    const pauseButton = screen.getByText('暂停合约');\n    fireEvent.click(pauseButton);\n    \n    await waitFor(() => {\n      expect(mockContract.pause).toHaveBeenCalled();\n    });\n  });\n\n  it('displays loading states correctly', async () => {\n    render(<AdminPanel />);\n    \n    expect(screen.getByText('加载中...')).toBeInTheDocument();\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.queryByText('加载中...')).not.toBeInTheDocument();\n    });\n  });\n\n  it('handles errors gracefully', async () => {\n    // 模拟错误\n    mockContract.getExchangeStats.mockRejectedValue(new Error('Contract error'));\n    \n    render(<AdminPanel />);\n    \n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      // 应该显示错误状态或回退到默认状态\n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n    });\n  });\n\n  it('validates user address input', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 输入无效地址\n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { target: { value: 'invalid-address' } });\n    \n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    // 应该不会调用合约函数\n    expect(mockContract.verifyUser).not.toHaveBeenCalled();\n  });\n\n  it('displays transaction status correctly', async () => {\n    render(<AdminPanel />);\n    \n    // 连接钱包\n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n    });\n    \n    // 模拟交易进行中\n    mockContract.verifyUser.mockReturnValue({\n      hash: '0x123',\n      wait: jest.fn().mockImplementation(() => new Promise(resolve => {\n        setTimeout(() => resolve({ status: 1 }), 100);\n      }))\n    });\n    \n    const userAddressInput = screen.getByPlaceholderText('输入用户地址');\n    fireEvent.change(userAddressInput, { \n      target: { value: '0x1234567890abcdef1234567890abcdef12345678' } \n    });\n    \n    const verifyButton = screen.getByText('验证用户');\n    fireEvent.click(verifyButton);\n    \n    // 应该显示交易进行中的状态\n    await waitFor(() => {\n      expect(screen.getByText('交易进行中...')).toBeInTheDocument();\n    });\n  });\n\n  it('handles network switching', async () => {\n    render(<AdminPanel />);\n    \n    // 模拟网络切换错误\n    mockEthereum.request.mockRejectedValueOnce(new Error('User rejected'));\n    \n    const connectButton = screen.getByText('连接钱包');\n    fireEvent.click(connectButton);\n    \n    await waitFor(() => {\n      // 应该处理网络切换错误\n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","Contract","mockContract","formatEther","mockReturnValue","parseEther","BigInt","getExchangeStats","minPurchaseAmount","maxPurchaseAmount","isUserVerified","verifyUser","setMinPurchaseAmount","setMaxPurchaseAmount","pause","unpause","paused","wait","mockResolvedValue","status","getSigner","getAddress","getBalance","mockEthereum","request","on","removeListener","isMetaMask","describe","beforeEach","clearAllMocks","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","Object","defineProperty","window","value","writable","configurable","it","render","AdminPanel","waitFor","expect","screen","getByText","toBeInTheDocument","connectButton","fireEvent","click","toHaveBeenCalledWith","method","toHaveBeenCalled","userAddressInput","getByPlaceholderText","change","target","verifyButton","minAmountInput","getByDisplayValue","updateLimitsButton","pauseButton","queryByText","not","mockRejectedValue","Error","hash","Promise","resolve","setTimeout","mockRejectedValueOnce"],"mappings":"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"}