{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/integration/ContractIntegration.test.ts"],"sourcesContent":["/**\n * 简化的智能合约集成测试\n * 测试合约交互逻辑而不依赖复杂的 ethers 库\n */\n\ndescribe('Smart Contract Integration Tests', () => {\n  // 模拟合约地址\n  const MOCK_TOKEN_ADDRESS = '0xd7d7dd989642222B6f685aF0220dc0065F489ae0';\n  const MOCK_EXCHANGE_ADDRESS = '0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E';\n\n  // 模拟合约服务\n  class MockContractService {\n    private isInitialized = false;\n    private mockProvider: any = null;\n\n    async initialize(provider: any) {\n      this.mockProvider = provider;\n      this.isInitialized = true;\n    }\n\n    checkInitialized() {\n      if (!this.isInitialized) {\n        throw new Error('合约服务未初始化');\n      }\n    }\n\n    async getTokenBalance(address: string): Promise<string> {\n      this.checkInitialized();\n      if (!this.isValidAddress(address)) {\n        throw new Error('无效的地址');\n      }\n      // 模拟返回余额\n      return '100.0';\n    }\n\n    async getBNBBalance(address: string): Promise<string> {\n      this.checkInitialized();\n      if (!this.isValidAddress(address)) {\n        throw new Error('无效的地址');\n      }\n      return '1.5';\n    }\n\n    async getExchangeStats() {\n      this.checkInitialized();\n      return {\n        totalTokensSold: '1000',\n        totalTokensRemaining: '9000',\n        totalBnbRaised: '100',\n        currentPrice: '0.000000000833',\n        nextRoundPrice: '0.0000000009749',\n        isActive: true,\n        currentRound: 0,\n      };\n    }\n\n    async exchangeTokens(bnbAmount: string) {\n      this.checkInitialized();\n      const amount = parseFloat(bnbAmount);\n      if (amount <= 0) {\n        throw new Error('购买金额必须大于0');\n      }\n      if (amount < 0.01) {\n        throw new Error('购买金额不能低于最小限制');\n      }\n      if (amount > 10) {\n        throw new Error('购买金额不能超过最大限制');\n      }\n\n      // 模拟交易\n      return {\n        hash: '0x123456789abcdef',\n        wait: async () => ({ status: 1, blockNumber: 12345 })\n      };\n    }\n\n    async getUserData(address: string) {\n      this.checkInitialized();\n      if (!this.isValidAddress(address)) {\n        throw new Error('无效的地址');\n      }\n      return {\n        totalPurchased: '50.0',\n        lastPurchaseTime: Math.floor(Date.now() / 1000),\n        isVerified: true,\n      };\n    }\n\n    async verifyUser(address: string, verified: boolean) {\n      this.checkInitialized();\n      if (!this.isValidAddress(address)) {\n        throw new Error('无效的地址');\n      }\n      return {\n        hash: '0xabcdef123456789',\n        wait: async () => ({ status: 1 })\n      };\n    }\n\n    async updateRoundPrice(roundIndex: number, newPrice: string) {\n      this.checkInitialized();\n      if (roundIndex < 0) {\n        throw new Error('轮次索引无效');\n      }\n      const price = parseFloat(newPrice);\n      if (price <= 0) {\n        throw new Error('价格必须大于0');\n      }\n      return {\n        hash: '0xprice123456789',\n        wait: async () => ({ status: 1 })\n      };\n    }\n\n    async setExchangeActive(active: boolean) {\n      this.checkInitialized();\n      return {\n        hash: '0xactive123456789',\n        wait: async () => ({ status: 1 })\n      };\n    }\n\n    async withdrawFunds(amount: string) {\n      this.checkInitialized();\n      const amountNum = parseFloat(amount);\n      if (amountNum <= 0) {\n        throw new Error('提取金额必须大于0');\n      }\n      return {\n        hash: '0xwithdraw123456789',\n        wait: async () => ({ status: 1 })\n      };\n    }\n\n    private isValidAddress(address: string): boolean {\n      return /^0x[a-fA-F0-9]{40}$/.test(address);\n    }\n  }\n\n  // 模拟交易历史服务\n  class MockTransactionService {\n    async getTransactionHistory(address: string) {\n      if (!address) {\n        throw new Error('地址不能为空');\n      }\n      \n      return [\n        {\n          hash: '0x123456789abcdef',\n          blockNumber: 12345,\n          timestamp: Math.floor(Date.now() / 1000) - 3600,\n          from: address,\n          to: MOCK_EXCHANGE_ADDRESS,\n          value: '1000000000000000000', // 1 BNB\n          tokenAmount: '1200000000000000000000', // 1200 SM\n          price: '833000000000',\n          round: 0,\n          status: 'success'\n        },\n        {\n          hash: '0xabcdef123456789',\n          blockNumber: 12346,\n          timestamp: Math.floor(Date.now() / 1000) - 1800,\n          from: address,\n          to: MOCK_EXCHANGE_ADDRESS,\n          value: '500000000000000000', // 0.5 BNB\n          tokenAmount: '600000000000000000000', // 600 SM\n          price: '833000000000',\n          round: 0,\n          status: 'success'\n        }\n      ];\n    }\n\n    async getTransactionDetails(hash: string) {\n      if (!hash) {\n        throw new Error('交易哈希不能为空');\n      }\n      \n      return {\n        hash,\n        blockNumber: 12345,\n        timestamp: Math.floor(Date.now() / 1000) - 3600,\n        gasUsed: '21000',\n        gasPrice: '5000000000',\n        status: 'success',\n        confirmations: 10\n      };\n    }\n  }\n\n  let contractService: MockContractService;\n  let transactionService: MockTransactionService;\n  let mockProvider: any;\n\n  beforeEach(() => {\n    contractService = new MockContractService();\n    transactionService = new MockTransactionService();\n    mockProvider = {\n      getSigner: jest.fn().mockResolvedValue({\n        getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a'),\n      }),\n      getBalance: jest.fn().mockResolvedValue('1000000000000000000'),\n      getNetwork: jest.fn().mockResolvedValue({ chainId: 97, name: 'bsc-testnet' }),\n    };\n  });\n\n  describe('Contract Service Initialization', () => {\n    it('should initialize contract service successfully', async () => {\n      await contractService.initialize(mockProvider);\n      \n      // 初始化后应该能正常调用方法\n      const balance = await contractService.getTokenBalance('0x123456789abcdef123456789abcdef123456789a');\n      expect(balance).toBe('100.0');\n    });\n\n    it('should throw error when not initialized', async () => {\n      await expect(contractService.getTokenBalance('0x123456789abcdef123456789abcdef123456789a'))\n        .rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('Token Operations', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should get token balance correctly', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      const balance = await contractService.getTokenBalance(address);\n      \n      expect(balance).toBe('100.0');\n    });\n\n    it('should get BNB balance correctly', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      const balance = await contractService.getBNBBalance(address);\n      \n      expect(balance).toBe('1.5');\n    });\n\n    it('should reject invalid addresses', async () => {\n      await expect(contractService.getTokenBalance('invalid-address'))\n        .rejects.toThrow('无效的地址');\n    });\n  });\n\n  describe('Exchange Operations', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should get exchange statistics', async () => {\n      const stats = await contractService.getExchangeStats();\n      \n      expect(stats).toEqual({\n        totalTokensSold: '1000',\n        totalTokensRemaining: '9000',\n        totalBnbRaised: '100',\n        currentPrice: '0.000000000833',\n        nextRoundPrice: '0.0000000009749',\n        isActive: true,\n        currentRound: 0,\n      });\n    });\n\n    it('should exchange tokens successfully', async () => {\n      const result = await contractService.exchangeTokens('1.0');\n      \n      expect(result.hash).toBe('0x123456789abcdef');\n      \n      const receipt = await result.wait();\n      expect(receipt.status).toBe(1);\n    });\n\n    it('should validate exchange amount limits', async () => {\n      // 测试最小限制\n      await expect(contractService.exchangeTokens('0.005'))\n        .rejects.toThrow('购买金额不能低于最小限制');\n      \n      // 测试最大限制\n      await expect(contractService.exchangeTokens('15'))\n        .rejects.toThrow('购买金额不能超过最大限制');\n      \n      // 测试无效金额\n      await expect(contractService.exchangeTokens('0'))\n        .rejects.toThrow('购买金额必须大于0');\n    });\n  });\n\n  describe('User Management', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should get user data correctly', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      const userData = await contractService.getUserData(address);\n      \n      expect(userData.totalPurchased).toBe('50.0');\n      expect(userData.isVerified).toBe(true);\n      expect(userData.lastPurchaseTime).toBeGreaterThan(0);\n    });\n\n    it('should verify user successfully', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      const result = await contractService.verifyUser(address, true);\n      \n      expect(result.hash).toBe('0xabcdef123456789');\n      \n      const receipt = await result.wait();\n      expect(receipt.status).toBe(1);\n    });\n  });\n\n  describe('Admin Operations', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should update round price successfully', async () => {\n      const result = await contractService.updateRoundPrice(1, '0.000001');\n      \n      expect(result.hash).toBe('0xprice123456789');\n      \n      const receipt = await result.wait();\n      expect(receipt.status).toBe(1);\n    });\n\n    it('should validate price update parameters', async () => {\n      await expect(contractService.updateRoundPrice(-1, '0.000001'))\n        .rejects.toThrow('轮次索引无效');\n      \n      await expect(contractService.updateRoundPrice(1, '0'))\n        .rejects.toThrow('价格必须大于0');\n    });\n\n    it('should set exchange active status', async () => {\n      const result = await contractService.setExchangeActive(false);\n      \n      expect(result.hash).toBe('0xactive123456789');\n      \n      const receipt = await result.wait();\n      expect(receipt.status).toBe(1);\n    });\n\n    it('should withdraw funds successfully', async () => {\n      const result = await contractService.withdrawFunds('10.0');\n      \n      expect(result.hash).toBe('0xwithdraw123456789');\n      \n      const receipt = await result.wait();\n      expect(receipt.status).toBe(1);\n    });\n\n    it('should validate withdrawal amount', async () => {\n      await expect(contractService.withdrawFunds('0'))\n        .rejects.toThrow('提取金额必须大于0');\n    });\n  });\n\n  describe('Transaction History', () => {\n    it('should get transaction history correctly', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      const history = await transactionService.getTransactionHistory(address);\n      \n      expect(history).toHaveLength(2);\n      expect(history[0].hash).toBe('0x123456789abcdef');\n      expect(history[0].status).toBe('success');\n      expect(history[1].hash).toBe('0xabcdef123456789');\n    });\n\n    it('should get transaction details correctly', async () => {\n      const hash = '0x123456789abcdef';\n      const details = await transactionService.getTransactionDetails(hash);\n      \n      expect(details.hash).toBe(hash);\n      expect(details.status).toBe('success');\n      expect(details.confirmations).toBe(10);\n    });\n\n    it('should handle empty address', async () => {\n      await expect(transactionService.getTransactionHistory(''))\n        .rejects.toThrow('地址不能为空');\n    });\n\n    it('should handle empty hash', async () => {\n      await expect(transactionService.getTransactionDetails(''))\n        .rejects.toThrow('交易哈希不能为空');\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should handle network errors gracefully', async () => {\n      // 模拟网络错误\n      const failingService = new MockContractService();\n      failingService.getExchangeStats = jest.fn().mockRejectedValue(new Error('Network error'));\n      \n      await failingService.initialize(mockProvider);\n      \n      await expect(failingService.getExchangeStats())\n        .rejects.toThrow('Network error');\n    });\n\n    it('should handle contract call failures', async () => {\n      // 模拟合约调用失败\n      const failingService = new MockContractService();\n      failingService.exchangeTokens = jest.fn().mockRejectedValue(new Error('Transaction failed'));\n      \n      await failingService.initialize(mockProvider);\n      \n      await expect(failingService.exchangeTokens('1.0'))\n        .rejects.toThrow('Transaction failed');\n    });\n  });\n\n  describe('Integration Scenarios', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should complete full exchange flow', async () => {\n      const address = '0x123456789abcdef123456789abcdef123456789a';\n      \n      // 1. 获取用户余额\n      const bnbBalance = await contractService.getBNBBalance(address);\n      expect(parseFloat(bnbBalance)).toBeGreaterThan(0);\n      \n      // 2. 获取交换统计\n      const stats = await contractService.getExchangeStats();\n      expect(stats.isActive).toBe(true);\n      \n      // 3. 执行代币交换\n      const exchangeResult = await contractService.exchangeTokens('1.0');\n      expect(exchangeResult.hash).toBeTruthy();\n      \n      // 4. 等待交易确认\n      const receipt = await exchangeResult.wait();\n      expect(receipt.status).toBe(1);\n      \n      // 5. 获取更新后的用户数据\n      const userData = await contractService.getUserData(address);\n      expect(userData.totalPurchased).toBeTruthy();\n    });\n\n    it('should handle admin management flow', async () => {\n      const userAddress = '0x123456789abcdef123456789abcdef123456789a';\n      \n      // 1. 验证用户\n      const verifyResult = await contractService.verifyUser(userAddress, true);\n      await verifyResult.wait();\n      \n      // 2. 更新价格\n      const priceResult = await contractService.updateRoundPrice(1, '0.000001');\n      await priceResult.wait();\n      \n      // 3. 设置交换状态\n      const statusResult = await contractService.setExchangeActive(true);\n      await statusResult.wait();\n      \n      // 4. 获取更新后的统计\n      const stats = await contractService.getExchangeStats();\n      expect(stats.isActive).toBe(true);\n    });\n  });\n});\n"],"names":["describe","MOCK_TOKEN_ADDRESS","MOCK_EXCHANGE_ADDRESS","MockContractService","initialize","provider","mockProvider","isInitialized","checkInitialized","Error","getTokenBalance","address","isValidAddress","getBNBBalance","getExchangeStats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","exchangeTokens","bnbAmount","amount","parseFloat","hash","wait","status","blockNumber","getUserData","totalPurchased","lastPurchaseTime","Math","floor","Date","now","isVerified","verifyUser","verified","updateRoundPrice","roundIndex","newPrice","price","setExchangeActive","active","withdrawFunds","amountNum","test","MockTransactionService","getTransactionHistory","timestamp","from","to","value","tokenAmount","round","getTransactionDetails","gasUsed","gasPrice","confirmations","contractService","transactionService","beforeEach","getSigner","jest","fn","mockResolvedValue","getAddress","getBalance","getNetwork","chainId","name","it","balance","expect","toBe","rejects","toThrow","stats","toEqual","result","receipt","userData","toBeGreaterThan","history","toHaveLength","details","failingService","mockRejectedValue","bnbBalance","exchangeResult","toBeTruthy","userAddress","verifyResult","priceResult","statusResult"],"mappings":"AAAA;;;CAGC;AAEDA,SAAS,oCAAoC;IAC3C,SAAS;IACT,MAAMC,qBAAqB;IAC3B,MAAMC,wBAAwB;IAE9B,SAAS;IACT,MAAMC;QAIJ,MAAMC,WAAWC,QAAa,EAAE;YAC9B,IAAI,CAACC,YAAY,GAAGD;YACpB,IAAI,CAACE,aAAa,GAAG;QACvB;QAEAC,mBAAmB;YACjB,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;gBACvB,MAAM,IAAIE,MAAM;YAClB;QACF;QAEA,MAAMC,gBAAgBC,OAAe,EAAmB;YACtD,IAAI,CAACH,gBAAgB;YACrB,IAAI,CAAC,IAAI,CAACI,cAAc,CAACD,UAAU;gBACjC,MAAM,IAAIF,MAAM;YAClB;YACA,SAAS;YACT,OAAO;QACT;QAEA,MAAMI,cAAcF,OAAe,EAAmB;YACpD,IAAI,CAACH,gBAAgB;YACrB,IAAI,CAAC,IAAI,CAACI,cAAc,CAACD,UAAU;gBACjC,MAAM,IAAIF,MAAM;YAClB;YACA,OAAO;QACT;QAEA,MAAMK,mBAAmB;YACvB,IAAI,CAACN,gBAAgB;YACrB,OAAO;gBACLO,iBAAiB;gBACjBC,sBAAsB;gBACtBC,gBAAgB;gBAChBC,cAAc;gBACdC,gBAAgB;gBAChBC,UAAU;gBACVC,cAAc;YAChB;QACF;QAEA,MAAMC,eAAeC,SAAiB,EAAE;YACtC,IAAI,CAACf,gBAAgB;YACrB,MAAMgB,SAASC,WAAWF;YAC1B,IAAIC,UAAU,GAAG;gBACf,MAAM,IAAIf,MAAM;YAClB;YACA,IAAIe,SAAS,MAAM;gBACjB,MAAM,IAAIf,MAAM;YAClB;YACA,IAAIe,SAAS,IAAI;gBACf,MAAM,IAAIf,MAAM;YAClB;YAEA,OAAO;YACP,OAAO;gBACLiB,MAAM;gBACNC,MAAM,UAAa,CAAA;wBAAEC,QAAQ;wBAAGC,aAAa;oBAAM,CAAA;YACrD;QACF;QAEA,MAAMC,YAAYnB,OAAe,EAAE;YACjC,IAAI,CAACH,gBAAgB;YACrB,IAAI,CAAC,IAAI,CAACI,cAAc,CAACD,UAAU;gBACjC,MAAM,IAAIF,MAAM;YAClB;YACA,OAAO;gBACLsB,gBAAgB;gBAChBC,kBAAkBC,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK;gBAC1CC,YAAY;YACd;QACF;QAEA,MAAMC,WAAW3B,OAAe,EAAE4B,QAAiB,EAAE;YACnD,IAAI,CAAC/B,gBAAgB;YACrB,IAAI,CAAC,IAAI,CAACI,cAAc,CAACD,UAAU;gBACjC,MAAM,IAAIF,MAAM;YAClB;YACA,OAAO;gBACLiB,MAAM;gBACNC,MAAM,UAAa,CAAA;wBAAEC,QAAQ;oBAAE,CAAA;YACjC;QACF;QAEA,MAAMY,iBAAiBC,UAAkB,EAAEC,QAAgB,EAAE;YAC3D,IAAI,CAAClC,gBAAgB;YACrB,IAAIiC,aAAa,GAAG;gBAClB,MAAM,IAAIhC,MAAM;YAClB;YACA,MAAMkC,QAAQlB,WAAWiB;YACzB,IAAIC,SAAS,GAAG;gBACd,MAAM,IAAIlC,MAAM;YAClB;YACA,OAAO;gBACLiB,MAAM;gBACNC,MAAM,UAAa,CAAA;wBAAEC,QAAQ;oBAAE,CAAA;YACjC;QACF;QAEA,MAAMgB,kBAAkBC,MAAe,EAAE;YACvC,IAAI,CAACrC,gBAAgB;YACrB,OAAO;gBACLkB,MAAM;gBACNC,MAAM,UAAa,CAAA;wBAAEC,QAAQ;oBAAE,CAAA;YACjC;QACF;QAEA,MAAMkB,cAActB,MAAc,EAAE;YAClC,IAAI,CAAChB,gBAAgB;YACrB,MAAMuC,YAAYtB,WAAWD;YAC7B,IAAIuB,aAAa,GAAG;gBAClB,MAAM,IAAItC,MAAM;YAClB;YACA,OAAO;gBACLiB,MAAM;gBACNC,MAAM,UAAa,CAAA;wBAAEC,QAAQ;oBAAE,CAAA;YACjC;QACF;QAEQhB,eAAeD,OAAe,EAAW;YAC/C,OAAO,sBAAsBqC,IAAI,CAACrC;QACpC;;iBA5HQJ,gBAAgB;iBAChBD,eAAoB;;IA4H9B;IAEA,WAAW;IACX,MAAM2C;QACJ,MAAMC,sBAAsBvC,OAAe,EAAE;YAC3C,IAAI,CAACA,SAAS;gBACZ,MAAM,IAAIF,MAAM;YAClB;YAEA,OAAO;gBACL;oBACEiB,MAAM;oBACNG,aAAa;oBACbsB,WAAWlB,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK,QAAQ;oBAC3CgB,MAAMzC;oBACN0C,IAAInD;oBACJoD,OAAO;oBACPC,aAAa;oBACbZ,OAAO;oBACPa,OAAO;oBACP5B,QAAQ;gBACV;gBACA;oBACEF,MAAM;oBACNG,aAAa;oBACbsB,WAAWlB,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK,QAAQ;oBAC3CgB,MAAMzC;oBACN0C,IAAInD;oBACJoD,OAAO;oBACPC,aAAa;oBACbZ,OAAO;oBACPa,OAAO;oBACP5B,QAAQ;gBACV;aACD;QACH;QAEA,MAAM6B,sBAAsB/B,IAAY,EAAE;YACxC,IAAI,CAACA,MAAM;gBACT,MAAM,IAAIjB,MAAM;YAClB;YAEA,OAAO;gBACLiB;gBACAG,aAAa;gBACbsB,WAAWlB,KAAKC,KAAK,CAACC,KAAKC,GAAG,KAAK,QAAQ;gBAC3CsB,SAAS;gBACTC,UAAU;gBACV/B,QAAQ;gBACRgC,eAAe;YACjB;QACF;IACF;IAEA,IAAIC;IACJ,IAAIC;IACJ,IAAIxD;IAEJyD,WAAW;QACTF,kBAAkB,IAAI1D;QACtB2D,qBAAqB,IAAIb;QACzB3C,eAAe;YACb0D,WAAWC,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;gBACrCC,YAAYH,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;YAC1C;YACAE,YAAYJ,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;YACxCG,YAAYL,KAAKC,EAAE,GAAGC,iBAAiB,CAAC;gBAAEI,SAAS;gBAAIC,MAAM;YAAc;QAC7E;IACF;IAEAxE,SAAS,mCAAmC;QAC1CyE,GAAG,mDAAmD;YACpD,MAAMZ,gBAAgBzD,UAAU,CAACE;YAEjC,gBAAgB;YAChB,MAAMoE,UAAU,MAAMb,gBAAgBnD,eAAe,CAAC;YACtDiE,OAAOD,SAASE,IAAI,CAAC;QACvB;QAEAH,GAAG,2CAA2C;YAC5C,MAAME,OAAOd,gBAAgBnD,eAAe,CAAC,+CAC1CmE,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,oBAAoB;QAC3B+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,sCAAsC;YACvC,MAAM9D,UAAU;YAChB,MAAM+D,UAAU,MAAMb,gBAAgBnD,eAAe,CAACC;YAEtDgE,OAAOD,SAASE,IAAI,CAAC;QACvB;QAEAH,GAAG,oCAAoC;YACrC,MAAM9D,UAAU;YAChB,MAAM+D,UAAU,MAAMb,gBAAgBhD,aAAa,CAACF;YAEpDgE,OAAOD,SAASE,IAAI,CAAC;QACvB;QAEAH,GAAG,mCAAmC;YACpC,MAAME,OAAOd,gBAAgBnD,eAAe,CAAC,oBAC1CmE,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,uBAAuB;QAC9B+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,kCAAkC;YACnC,MAAMM,QAAQ,MAAMlB,gBAAgB/C,gBAAgB;YAEpD6D,OAAOI,OAAOC,OAAO,CAAC;gBACpBjE,iBAAiB;gBACjBC,sBAAsB;gBACtBC,gBAAgB;gBAChBC,cAAc;gBACdC,gBAAgB;gBAChBC,UAAU;gBACVC,cAAc;YAChB;QACF;QAEAoD,GAAG,uCAAuC;YACxC,MAAMQ,SAAS,MAAMpB,gBAAgBvC,cAAc,CAAC;YAEpDqD,OAAOM,OAAOvD,IAAI,EAAEkD,IAAI,CAAC;YAEzB,MAAMM,UAAU,MAAMD,OAAOtD,IAAI;YACjCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;QAC9B;QAEAH,GAAG,0CAA0C;YAC3C,SAAS;YACT,MAAME,OAAOd,gBAAgBvC,cAAc,CAAC,UACzCuD,OAAO,CAACC,OAAO,CAAC;YAEnB,SAAS;YACT,MAAMH,OAAOd,gBAAgBvC,cAAc,CAAC,OACzCuD,OAAO,CAACC,OAAO,CAAC;YAEnB,SAAS;YACT,MAAMH,OAAOd,gBAAgBvC,cAAc,CAAC,MACzCuD,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,mBAAmB;QAC1B+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,kCAAkC;YACnC,MAAM9D,UAAU;YAChB,MAAMwE,WAAW,MAAMtB,gBAAgB/B,WAAW,CAACnB;YAEnDgE,OAAOQ,SAASpD,cAAc,EAAE6C,IAAI,CAAC;YACrCD,OAAOQ,SAAS9C,UAAU,EAAEuC,IAAI,CAAC;YACjCD,OAAOQ,SAASnD,gBAAgB,EAAEoD,eAAe,CAAC;QACpD;QAEAX,GAAG,mCAAmC;YACpC,MAAM9D,UAAU;YAChB,MAAMsE,SAAS,MAAMpB,gBAAgBvB,UAAU,CAAC3B,SAAS;YAEzDgE,OAAOM,OAAOvD,IAAI,EAAEkD,IAAI,CAAC;YAEzB,MAAMM,UAAU,MAAMD,OAAOtD,IAAI;YACjCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;QAC9B;IACF;IAEA5E,SAAS,oBAAoB;QAC3B+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,0CAA0C;YAC3C,MAAMQ,SAAS,MAAMpB,gBAAgBrB,gBAAgB,CAAC,GAAG;YAEzDmC,OAAOM,OAAOvD,IAAI,EAAEkD,IAAI,CAAC;YAEzB,MAAMM,UAAU,MAAMD,OAAOtD,IAAI;YACjCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;QAC9B;QAEAH,GAAG,2CAA2C;YAC5C,MAAME,OAAOd,gBAAgBrB,gBAAgB,CAAC,CAAC,GAAG,aAC/CqC,OAAO,CAACC,OAAO,CAAC;YAEnB,MAAMH,OAAOd,gBAAgBrB,gBAAgB,CAAC,GAAG,MAC9CqC,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAL,GAAG,qCAAqC;YACtC,MAAMQ,SAAS,MAAMpB,gBAAgBjB,iBAAiB,CAAC;YAEvD+B,OAAOM,OAAOvD,IAAI,EAAEkD,IAAI,CAAC;YAEzB,MAAMM,UAAU,MAAMD,OAAOtD,IAAI;YACjCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;QAC9B;QAEAH,GAAG,sCAAsC;YACvC,MAAMQ,SAAS,MAAMpB,gBAAgBf,aAAa,CAAC;YAEnD6B,OAAOM,OAAOvD,IAAI,EAAEkD,IAAI,CAAC;YAEzB,MAAMM,UAAU,MAAMD,OAAOtD,IAAI;YACjCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;QAC9B;QAEAH,GAAG,qCAAqC;YACtC,MAAME,OAAOd,gBAAgBf,aAAa,CAAC,MACxC+B,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,uBAAuB;QAC9ByE,GAAG,4CAA4C;YAC7C,MAAM9D,UAAU;YAChB,MAAM0E,UAAU,MAAMvB,mBAAmBZ,qBAAqB,CAACvC;YAE/DgE,OAAOU,SAASC,YAAY,CAAC;YAC7BX,OAAOU,OAAO,CAAC,EAAE,CAAC3D,IAAI,EAAEkD,IAAI,CAAC;YAC7BD,OAAOU,OAAO,CAAC,EAAE,CAACzD,MAAM,EAAEgD,IAAI,CAAC;YAC/BD,OAAOU,OAAO,CAAC,EAAE,CAAC3D,IAAI,EAAEkD,IAAI,CAAC;QAC/B;QAEAH,GAAG,4CAA4C;YAC7C,MAAM/C,OAAO;YACb,MAAM6D,UAAU,MAAMzB,mBAAmBL,qBAAqB,CAAC/B;YAE/DiD,OAAOY,QAAQ7D,IAAI,EAAEkD,IAAI,CAAClD;YAC1BiD,OAAOY,QAAQ3D,MAAM,EAAEgD,IAAI,CAAC;YAC5BD,OAAOY,QAAQ3B,aAAa,EAAEgB,IAAI,CAAC;QACrC;QAEAH,GAAG,+BAA+B;YAChC,MAAME,OAAOb,mBAAmBZ,qBAAqB,CAAC,KACnD2B,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAL,GAAG,4BAA4B;YAC7B,MAAME,OAAOb,mBAAmBL,qBAAqB,CAAC,KACnDoB,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,kBAAkB;QACzB+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,2CAA2C;YAC5C,SAAS;YACT,MAAMe,iBAAiB,IAAIrF;YAC3BqF,eAAe1E,gBAAgB,GAAGmD,KAAKC,EAAE,GAAGuB,iBAAiB,CAAC,IAAIhF,MAAM;YAExE,MAAM+E,eAAepF,UAAU,CAACE;YAEhC,MAAMqE,OAAOa,eAAe1E,gBAAgB,IACzC+D,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAL,GAAG,wCAAwC;YACzC,WAAW;YACX,MAAMe,iBAAiB,IAAIrF;YAC3BqF,eAAelE,cAAc,GAAG2C,KAAKC,EAAE,GAAGuB,iBAAiB,CAAC,IAAIhF,MAAM;YAEtE,MAAM+E,eAAepF,UAAU,CAACE;YAEhC,MAAMqE,OAAOa,eAAelE,cAAc,CAAC,QACxCuD,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEA9E,SAAS,yBAAyB;QAChC+D,WAAW;YACT,MAAMF,gBAAgBzD,UAAU,CAACE;QACnC;QAEAmE,GAAG,sCAAsC;YACvC,MAAM9D,UAAU;YAEhB,YAAY;YACZ,MAAM+E,aAAa,MAAM7B,gBAAgBhD,aAAa,CAACF;YACvDgE,OAAOlD,WAAWiE,aAAaN,eAAe,CAAC;YAE/C,YAAY;YACZ,MAAML,QAAQ,MAAMlB,gBAAgB/C,gBAAgB;YACpD6D,OAAOI,MAAM3D,QAAQ,EAAEwD,IAAI,CAAC;YAE5B,YAAY;YACZ,MAAMe,iBAAiB,MAAM9B,gBAAgBvC,cAAc,CAAC;YAC5DqD,OAAOgB,eAAejE,IAAI,EAAEkE,UAAU;YAEtC,YAAY;YACZ,MAAMV,UAAU,MAAMS,eAAehE,IAAI;YACzCgD,OAAOO,QAAQtD,MAAM,EAAEgD,IAAI,CAAC;YAE5B,gBAAgB;YAChB,MAAMO,WAAW,MAAMtB,gBAAgB/B,WAAW,CAACnB;YACnDgE,OAAOQ,SAASpD,cAAc,EAAE6D,UAAU;QAC5C;QAEAnB,GAAG,uCAAuC;YACxC,MAAMoB,cAAc;YAEpB,UAAU;YACV,MAAMC,eAAe,MAAMjC,gBAAgBvB,UAAU,CAACuD,aAAa;YACnE,MAAMC,aAAanE,IAAI;YAEvB,UAAU;YACV,MAAMoE,cAAc,MAAMlC,gBAAgBrB,gBAAgB,CAAC,GAAG;YAC9D,MAAMuD,YAAYpE,IAAI;YAEtB,YAAY;YACZ,MAAMqE,eAAe,MAAMnC,gBAAgBjB,iBAAiB,CAAC;YAC7D,MAAMoD,aAAarE,IAAI;YAEvB,cAAc;YACd,MAAMoD,QAAQ,MAAMlB,gBAAgB/C,gBAAgB;YACpD6D,OAAOI,MAAM3D,QAAQ,EAAEwD,IAAI,CAAC;QAC9B;IACF;AACF"}