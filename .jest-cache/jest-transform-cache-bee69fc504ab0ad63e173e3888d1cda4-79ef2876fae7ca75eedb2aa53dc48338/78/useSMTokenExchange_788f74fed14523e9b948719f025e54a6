dea515bf4a294c4dc780901dc43f746e
"use strict";

/* istanbul ignore next */
function cov_1e5bo04z3v() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useSMTokenExchange.ts";
  var hash = "4cf7dde09c586efe150f0cf529bf3608e98f97d6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useSMTokenExchange.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "5": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "6": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 49
        }
      },
      "7": {
        start: {
          line: 16,
          column: 37
        },
        end: {
          line: 16,
          column: 61
        }
      },
      "8": {
        start: {
          line: 17,
          column: 44
        },
        end: {
          line: 17,
          column: 71
        }
      },
      "9": {
        start: {
          line: 18,
          column: 32
        },
        end: {
          line: 18,
          column: 58
        }
      },
      "10": {
        start: {
          line: 19,
          column: 30
        },
        end: {
          line: 19,
          column: 56
        }
      },
      "11": {
        start: {
          line: 21,
          column: 86
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "12": {
        start: {
          line: 28,
          column: 62
        },
        end: {
          line: 28,
          column: 92
        }
      },
      "13": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 42
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 23
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 24
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "21": {
        start: {
          line: 40,
          column: 31
        },
        end: {
          line: 40,
          column: 63
        }
      },
      "22": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 47,
          column: 14
        }
      },
      "23": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 28
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 33
        }
      },
      "25": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "26": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "27": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 22
        }
      },
      "28": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 35
        }
      },
      "29": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 74,
          column: 12
        }
      },
      "30": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 83,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "useSMTokenExchange",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 27
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 27
          },
          end: {
            line: 30,
            column: 28
          }
        },
        loc: {
          start: {
            line: 30,
            column: 46
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 30
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 24
          }
        }, {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 31,
            column: 36
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 21
          },
          end: {
            line: 53,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 44
          },
          end: {
            line: 53,
            column: 47
          }
        }, {
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 53,
            column: 67
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 27
          },
          end: {
            line: 74,
            column: 12
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 43
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 12
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 22
          },
          end: {
            line: 79,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 22
          },
          end: {
            line: 79,
            column: 34
          }
        }, {
          start: {
            line: 79,
            column: 38
          },
          end: {
            line: 79,
            column: 52
          }
        }],
        line: 79
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useSMTokenExchange.ts"],
      sourcesContent: ["import { useAccount, useReadContract, useWriteContract } from 'wagmi';\nimport { parseEther, formatEther, formatUnits } from 'viem';\nimport { useState } from 'react';\nimport { contractAbis, contractAddresses, ExchangeStats } from '../config/contracts';\n\n// \u5B9A\u4E49\u5408\u7EA6\u8FD4\u56DE\u7684\u539F\u59CB\u6570\u636E\u7C7B\u578B\ntype ExchangeStatsResult = [\n  bigint, // totalTokensSold\n  bigint, // totalTokensRemaining\n  bigint, // totalBnbRaised\n  bigint, // currentPrice\n  bigint, // nextRoundPrice\n  boolean, // isActive\n  number  // currentRound\n];\n\nexport function useSMTokenExchange() {\n  const { address, isConnected } = useAccount();\n  const [isExchanging, setIsExchanging] = useState(false);\n  const [txHash, setTxHash] = useState<`0x${string}` | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  // \u8BFB\u53D6\u4EA4\u6613\u6240\u7EDF\u8BA1\u4FE1\u606F\n  const { \n    data: exchangeStats, \n    isLoading: isLoadingStats, \n    refetch: refetchStats\n  } = useReadContract({\n    address: contractAddresses.smTokenExchange,\n    abi: contractAbis.smTokenExchange,\n    functionName: 'getExchangeStats',\n    enabled: !!contractAddresses.smTokenExchange,\n  }) as { data: ExchangeStatsResult | undefined, isLoading: boolean, refetch: () => Promise<any> };\n\n  // \u51C6\u5907\u5199\u5165\u5408\u7EA6\u51FD\u6570\n  const { writeContractAsync, isPending: isWritePending } = useWriteContract();\n\n  // \u6267\u884C\u4EE3\u5E01\u5151\u6362\n  const exchangeTokens = async (bnbAmount: string) => {\n    if (!isConnected || !address) {\n      setError(new Error('\u8BF7\u5148\u8FDE\u63A5\u94B1\u5305'));\n      return;\n    }\n\n    setIsExchanging(true);\n    setError(null);\n    setTxHash(null);\n\n    try {\n      // \u5C06BNB\u6570\u91CF\u8F6C\u6362\u4E3AWei\n      const valueInWei = parseEther(bnbAmount);\n\n      // \u8C03\u7528\u5408\u7EA6\u7684exchangeTokens\u51FD\u6570\n      const hash = await writeContractAsync({\n        address: contractAddresses.smTokenExchange,\n        abi: contractAbis.smTokenExchange,\n        functionName: 'exchangeTokens',\n        value: valueInWei,\n      });\n\n      setTxHash(hash);\n      \n      // \u4EA4\u6613\u6210\u529F\u540E\u5237\u65B0\u6570\u636E\n      await refetchStats();\n      \n      return hash;\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('\u5151\u6362\u5931\u8D25'));\n      throw err;\n    } finally {\n      setIsExchanging(false);\n    }\n  };\n\n  // \u683C\u5F0F\u5316\u7EDF\u8BA1\u6570\u636E\n  const formattedStats = exchangeStats ? {\n    totalTokensSold: exchangeStats[0],\n    totalTokensRemaining: exchangeStats[1],\n    totalBnbRaised: exchangeStats[2],\n    currentPrice: exchangeStats[3],\n    nextRoundPrice: exchangeStats[4],\n    isActive: exchangeStats[5],\n    currentRound: exchangeStats[6],\n    // \u6DFB\u52A0\u4E00\u4E9B\u683C\u5F0F\u5316\u7684\u503C\n    formattedTokensSold: formatUnits(exchangeStats[0], 18),\n    formattedTokensRemaining: formatUnits(exchangeStats[1], 18),\n    formattedBnbRaised: formatEther(exchangeStats[2]),\n    formattedCurrentPrice: formatEther(exchangeStats[3]),\n    formattedNextRoundPrice: formatEther(exchangeStats[4]),\n  } : null;\n\n  return {\n    exchangeStats: formattedStats,\n    exchangeTokens,\n    isLoadingStats,\n    isExchanging: isExchanging || isWritePending,\n    txHash,\n    error,\n    refetchStats,\n  };\n}\n"],
      names: ["useSMTokenExchange", "address", "isConnected", "useAccount", "isExchanging", "setIsExchanging", "useState", "txHash", "setTxHash", "error", "setError", "data", "exchangeStats", "isLoading", "isLoadingStats", "refetch", "refetchStats", "useReadContract", "contractAddresses", "smTokenExchange", "abi", "contractAbis", "functionName", "enabled", "writeContractAsync", "isPending", "isWritePending", "useWriteContract", "exchangeTokens", "bnbAmount", "Error", "valueInWei", "parseEther", "hash", "value", "err", "formattedStats", "totalTokensSold", "totalTokensRemaining", "totalBnbRaised", "currentPrice", "nextRoundPrice", "isActive", "currentRound", "formattedTokensSold", "formatUnits", "formattedTokensRemaining", "formattedBnbRaised", "formatEther", "formattedCurrentPrice", "formattedNextRoundPrice"],
      mappings: ";;;;+BAgBgBA;;;eAAAA;;;uBAhB8C;sBACT;uBAC5B;2BACsC;AAaxD,SAASA;IACd,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAE,GAAGC,IAAAA,iBAAU;IAC3C,MAAM,CAACC,cAAcC,gBAAgB,GAAGC,IAAAA,eAAQ,EAAC;IACjD,MAAM,CAACC,QAAQC,UAAU,GAAGF,IAAAA,eAAQ,EAAuB;IAC3D,MAAM,CAACG,OAAOC,SAAS,GAAGJ,IAAAA,eAAQ,EAAe;IAEjD,YAAY;IACZ,MAAM,EACJK,MAAMC,aAAa,EACnBC,WAAWC,cAAc,EACzBC,SAASC,YAAY,EACtB,GAAGC,IAAAA,sBAAe,EAAC;QAClBhB,SAASiB,4BAAiB,CAACC,eAAe;QAC1CC,KAAKC,uBAAY,CAACF,eAAe;QACjCG,cAAc;QACdC,SAAS,CAAC,CAACL,4BAAiB,CAACC,eAAe;IAC9C;IAEA,WAAW;IACX,MAAM,EAAEK,kBAAkB,EAAEC,WAAWC,cAAc,EAAE,GAAGC,IAAAA,uBAAgB;IAE1E,SAAS;IACT,MAAMC,iBAAiB,OAAOC;QAC5B,IAAI,CAAC3B,eAAe,CAACD,SAAS;YAC5BS,SAAS,IAAIoB,MAAM;YACnB;QACF;QAEAzB,gBAAgB;QAChBK,SAAS;QACTF,UAAU;QAEV,IAAI;YACF,eAAe;YACf,MAAMuB,aAAaC,IAAAA,gBAAU,EAACH;YAE9B,wBAAwB;YACxB,MAAMI,OAAO,MAAMT,mBAAmB;gBACpCvB,SAASiB,4BAAiB,CAACC,eAAe;gBAC1CC,KAAKC,uBAAY,CAACF,eAAe;gBACjCG,cAAc;gBACdY,OAAOH;YACT;YAEAvB,UAAUyB;YAEV,YAAY;YACZ,MAAMjB;YAEN,OAAOiB;QACT,EAAE,OAAOE,KAAK;YACZzB,SAASyB,eAAeL,QAAQK,MAAM,IAAIL,MAAM;YAChD,MAAMK;QACR,SAAU;YACR9B,gBAAgB;QAClB;IACF;IAEA,UAAU;IACV,MAAM+B,iBAAiBxB,gBAAgB;QACrCyB,iBAAiBzB,aAAa,CAAC,EAAE;QACjC0B,sBAAsB1B,aAAa,CAAC,EAAE;QACtC2B,gBAAgB3B,aAAa,CAAC,EAAE;QAChC4B,cAAc5B,aAAa,CAAC,EAAE;QAC9B6B,gBAAgB7B,aAAa,CAAC,EAAE;QAChC8B,UAAU9B,aAAa,CAAC,EAAE;QAC1B+B,cAAc/B,aAAa,CAAC,EAAE;QAC9B,YAAY;QACZgC,qBAAqBC,IAAAA,iBAAW,EAACjC,aAAa,CAAC,EAAE,EAAE;QACnDkC,0BAA0BD,IAAAA,iBAAW,EAACjC,aAAa,CAAC,EAAE,EAAE;QACxDmC,oBAAoBC,IAAAA,iBAAW,EAACpC,aAAa,CAAC,EAAE;QAChDqC,uBAAuBD,IAAAA,iBAAW,EAACpC,aAAa,CAAC,EAAE;QACnDsC,yBAAyBF,IAAAA,iBAAW,EAACpC,aAAa,CAAC,EAAE;IACvD,IAAI;IAEJ,OAAO;QACLA,eAAewB;QACfR;QACAd;QACAV,cAAcA,gBAAgBsB;QAC9BnB;QACAE;QACAO;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4cf7dde09c586efe150f0cf529bf3608e98f97d6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1e5bo04z3v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1e5bo04z3v();
cov_1e5bo04z3v().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1e5bo04z3v().s[1]++;
Object.defineProperty(exports, "useSMTokenExchange", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1e5bo04z3v().f[0]++;
    cov_1e5bo04z3v().s[2]++;
    return useSMTokenExchange;
  }
});
const _wagmi =
/* istanbul ignore next */
(cov_1e5bo04z3v().s[3]++, require("wagmi"));
const _viem =
/* istanbul ignore next */
(cov_1e5bo04z3v().s[4]++, require("viem"));
const _react =
/* istanbul ignore next */
(cov_1e5bo04z3v().s[5]++, require("react"));
const _contracts =
/* istanbul ignore next */
(cov_1e5bo04z3v().s[6]++, require("../config/contracts"));
function useSMTokenExchange() {
  /* istanbul ignore next */
  cov_1e5bo04z3v().f[1]++;
  const {
    address,
    isConnected
  } =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[7]++, (0, _wagmi.useAccount)());
  const [isExchanging, setIsExchanging] =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[8]++, (0, _react.useState)(false));
  const [txHash, setTxHash] =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[9]++, (0, _react.useState)(null));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[10]++, (0, _react.useState)(null));
  // 读取交易所统计信息
  const {
    data: exchangeStats,
    isLoading: isLoadingStats,
    refetch: refetchStats
  } =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[11]++, (0, _wagmi.useReadContract)({
    address: _contracts.contractAddresses.smTokenExchange,
    abi: _contracts.contractAbis.smTokenExchange,
    functionName: 'getExchangeStats',
    enabled: !!_contracts.contractAddresses.smTokenExchange
  }));
  // 准备写入合约函数
  const {
    writeContractAsync,
    isPending: isWritePending
  } =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[12]++, (0, _wagmi.useWriteContract)());
  // 执行代币兑换
  /* istanbul ignore next */
  cov_1e5bo04z3v().s[13]++;
  const exchangeTokens = async bnbAmount => {
    /* istanbul ignore next */
    cov_1e5bo04z3v().f[2]++;
    cov_1e5bo04z3v().s[14]++;
    if (
    /* istanbul ignore next */
    (cov_1e5bo04z3v().b[1][0]++, !isConnected) ||
    /* istanbul ignore next */
    (cov_1e5bo04z3v().b[1][1]++, !address)) {
      /* istanbul ignore next */
      cov_1e5bo04z3v().b[0][0]++;
      cov_1e5bo04z3v().s[15]++;
      setError(new Error('请先连接钱包'));
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[16]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1e5bo04z3v().b[0][1]++;
    }
    cov_1e5bo04z3v().s[17]++;
    setIsExchanging(true);
    /* istanbul ignore next */
    cov_1e5bo04z3v().s[18]++;
    setError(null);
    /* istanbul ignore next */
    cov_1e5bo04z3v().s[19]++;
    setTxHash(null);
    /* istanbul ignore next */
    cov_1e5bo04z3v().s[20]++;
    try {
      // 将BNB数量转换为Wei
      const valueInWei =
      /* istanbul ignore next */
      (cov_1e5bo04z3v().s[21]++, (0, _viem.parseEther)(bnbAmount));
      // 调用合约的exchangeTokens函数
      const hash =
      /* istanbul ignore next */
      (cov_1e5bo04z3v().s[22]++, await writeContractAsync({
        address: _contracts.contractAddresses.smTokenExchange,
        abi: _contracts.contractAbis.smTokenExchange,
        functionName: 'exchangeTokens',
        value: valueInWei
      }));
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[23]++;
      setTxHash(hash);
      // 交易成功后刷新数据
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[24]++;
      await refetchStats();
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[25]++;
      return hash;
    } catch (err) {
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[26]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_1e5bo04z3v().b[2][0]++, err) :
      /* istanbul ignore next */
      (cov_1e5bo04z3v().b[2][1]++, new Error('兑换失败')));
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[27]++;
      throw err;
    } finally {
      /* istanbul ignore next */
      cov_1e5bo04z3v().s[28]++;
      setIsExchanging(false);
    }
  };
  // 格式化统计数据
  const formattedStats =
  /* istanbul ignore next */
  (cov_1e5bo04z3v().s[29]++, exchangeStats ?
  /* istanbul ignore next */
  (cov_1e5bo04z3v().b[3][0]++, {
    totalTokensSold: exchangeStats[0],
    totalTokensRemaining: exchangeStats[1],
    totalBnbRaised: exchangeStats[2],
    currentPrice: exchangeStats[3],
    nextRoundPrice: exchangeStats[4],
    isActive: exchangeStats[5],
    currentRound: exchangeStats[6],
    // 添加一些格式化的值
    formattedTokensSold: (0, _viem.formatUnits)(exchangeStats[0], 18),
    formattedTokensRemaining: (0, _viem.formatUnits)(exchangeStats[1], 18),
    formattedBnbRaised: (0, _viem.formatEther)(exchangeStats[2]),
    formattedCurrentPrice: (0, _viem.formatEther)(exchangeStats[3]),
    formattedNextRoundPrice: (0, _viem.formatEther)(exchangeStats[4])
  }) :
  /* istanbul ignore next */
  (cov_1e5bo04z3v().b[3][1]++, null));
  /* istanbul ignore next */
  cov_1e5bo04z3v().s[30]++;
  return {
    exchangeStats: formattedStats,
    exchangeTokens,
    isLoadingStats,
    isExchanging:
    /* istanbul ignore next */
    (cov_1e5bo04z3v().b[4][0]++, isExchanging) ||
    /* istanbul ignore next */
    (cov_1e5bo04z3v().b[4][1]++, isWritePending),
    txHash,
    error,
    refetchStats
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,