70aac2201f79635907f1d02b2d3ca01b
/**
 * 简化的组件测试
 * 测试基础的 React 组件功能
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 简单的计数器组件
const Counter = ({ initialValue = 0 })=>{
    const [count, setCount] = _react.default.useState(initialValue);
    const [loading, setLoading] = _react.default.useState(false);
    const increment = ()=>setCount((prev)=>prev + 1);
    const decrement = ()=>setCount((prev)=>prev - 1);
    const reset = ()=>setCount(initialValue);
    const asyncIncrement = async ()=>{
        setLoading(true);
        await new Promise((resolve)=>setTimeout(resolve, 100));
        setCount((prev)=>prev + 1);
        setLoading(false);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "count",
                children: count
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loading",
                children: loading ? 'Loading...' : 'Ready'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: increment,
                "data-testid": "increment",
                children: "+"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: decrement,
                "data-testid": "decrement",
                children: "-"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: reset,
                "data-testid": "reset",
                children: "Reset"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: asyncIncrement,
                "data-testid": "async-increment",
                disabled: loading,
                children: "Async +"
            })
        ]
    });
};
// 表单组件
const SimpleForm = ({ onSubmit })=>{
    const [name, setName] = _react.default.useState('');
    const [email, setEmail] = _react.default.useState('');
    const [errors, setErrors] = _react.default.useState({});
    const validate = ()=>{
        const newErrors = {};
        if (!name.trim()) {
            newErrors.name = 'Name is required';
        }
        if (!email.trim()) {
            newErrors.email = 'Email is required';
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            newErrors.email = 'Email is invalid';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e)=>{
        e.preventDefault();
        if (validate()) {
            onSubmit({
                name,
                email
            });
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        onSubmit: handleSubmit,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "text",
                        placeholder: "Name",
                        value: name,
                        onChange: (e)=>setName(e.target.value),
                        "data-testid": "name-input"
                    }),
                    errors.name && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "name-error",
                        children: errors.name
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "email",
                        placeholder: "Email",
                        value: email,
                        onChange: (e)=>setEmail(e.target.value),
                        "data-testid": "email-input"
                    }),
                    errors.email && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "email-error",
                        children: errors.email
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                "data-testid": "submit-button",
                children: "Submit"
            })
        ]
    });
};
// 模拟钱包连接组件
const MockWalletConnect = ()=>{
    const [isConnected, setIsConnected] = _react.default.useState(false);
    const [address, setAddress] = _react.default.useState('');
    const [balance, setBalance] = _react.default.useState('0');
    const [loading, setLoading] = _react.default.useState(false);
    const connect = async ()=>{
        setLoading(true);
        try {
            // 模拟连接延迟
            await new Promise((resolve)=>setTimeout(resolve, 200));
            setIsConnected(true);
            setAddress('0x123456789abcdef123456789abcdef123456789a');
            setBalance('1.5');
        } catch (error) {
            console.error('Connection failed:', error);
        } finally{
            setLoading(false);
        }
    };
    const disconnect = ()=>{
        setIsConnected(false);
        setAddress('');
        setBalance('0');
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "connection-status",
                children: isConnected ? 'Connected' : 'Not Connected'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "address",
                children: address
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "balance",
                children: [
                    balance,
                    " ETH"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loading-status",
                children: loading ? 'Connecting...' : 'Ready'
            }),
            !isConnected ? /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: connect,
                disabled: loading,
                "data-testid": "connect-button",
                children: "Connect Wallet"
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: disconnect,
                "data-testid": "disconnect-button",
                children: "Disconnect"
            })
        ]
    });
};
describe('Simple Component Tests', ()=>{
    describe('Counter Component', ()=>{
        it('renders with initial value', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Counter, {
                initialValue: 5
            }));
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('5');
        });
        it('increments count', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Counter, {}));
            const incrementButton = _react1.screen.getByTestId('increment');
            _react1.fireEvent.click(incrementButton);
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('1');
            _react1.fireEvent.click(incrementButton);
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('2');
        });
        it('decrements count', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Counter, {
                initialValue: 5
            }));
            const decrementButton = _react1.screen.getByTestId('decrement');
            _react1.fireEvent.click(decrementButton);
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('4');
        });
        it('resets count', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Counter, {
                initialValue: 3
            }));
            const incrementButton = _react1.screen.getByTestId('increment');
            const resetButton = _react1.screen.getByTestId('reset');
            _react1.fireEvent.click(incrementButton);
            _react1.fireEvent.click(incrementButton);
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('5');
            _react1.fireEvent.click(resetButton);
            expect(_react1.screen.getByTestId('count')).toHaveTextContent('3');
        });
        it('handles async increment', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Counter, {}));
            const asyncButton = _react1.screen.getByTestId('async-increment');
            _react1.fireEvent.click(asyncButton);
            // 检查加载状态
            expect(_react1.screen.getByTestId('loading')).toHaveTextContent('Loading...');
            expect(asyncButton).toBeDisabled();
            // 等待异步操作完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('count')).toHaveTextContent('1');
                expect(_react1.screen.getByTestId('loading')).toHaveTextContent('Ready');
            });
            expect(asyncButton).not.toBeDisabled();
        });
    });
    describe('SimpleForm Component', ()=>{
        const mockSubmit = jest.fn();
        beforeEach(()=>{
            mockSubmit.mockClear();
        });
        it('renders form fields', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleForm, {
                onSubmit: mockSubmit
            }));
            expect(_react1.screen.getByTestId('name-input')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('email-input')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('submit-button')).toBeInTheDocument();
        });
        it('validates required fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleForm, {
                onSubmit: mockSubmit
            }));
            const submitButton = _react1.screen.getByTestId('submit-button');
            await user.click(submitButton);
            expect(_react1.screen.getByTestId('name-error')).toHaveTextContent('Name is required');
            expect(_react1.screen.getByTestId('email-error')).toHaveTextContent('Email is required');
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('validates email format', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleForm, {
                onSubmit: mockSubmit
            }));
            const nameInput = _react1.screen.getByTestId('name-input');
            const emailInput = _react1.screen.getByTestId('email-input');
            const submitButton = _react1.screen.getByTestId('submit-button');
            await user.type(nameInput, 'John Doe');
            await user.type(emailInput, 'invalid-email');
            // 触发表单提交
            _react1.fireEvent.click(submitButton);
            // 等待错误消息出现
            await (0, _react1.waitFor)(()=>{
                const errorElement = _react1.screen.queryByTestId('email-error');
                expect(errorElement).toBeInTheDocument();
                expect(errorElement).toHaveTextContent('Email is invalid');
            }, {
                timeout: 3000
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('submits valid form', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(SimpleForm, {
                onSubmit: mockSubmit
            }));
            const nameInput = _react1.screen.getByTestId('name-input');
            const emailInput = _react1.screen.getByTestId('email-input');
            const submitButton = _react1.screen.getByTestId('submit-button');
            await user.type(nameInput, 'John Doe');
            await user.type(emailInput, 'john@example.com');
            await user.click(submitButton);
            expect(mockSubmit).toHaveBeenCalledWith({
                name: 'John Doe',
                email: 'john@example.com'
            });
        });
    });
    describe('MockWalletConnect Component', ()=>{
        it('renders initial state', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWalletConnect, {}));
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
            expect(_react1.screen.getByTestId('address')).toHaveTextContent('');
            expect(_react1.screen.getByTestId('balance')).toHaveTextContent('0 ETH');
            expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        });
        it('connects wallet', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWalletConnect, {}));
            const connectButton = _react1.screen.getByTestId('connect-button');
            _react1.fireEvent.click(connectButton);
            // 检查加载状态
            expect(_react1.screen.getByTestId('loading-status')).toHaveTextContent('Connecting...');
            expect(connectButton).toBeDisabled();
            // 等待连接完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
                expect(_react1.screen.getByTestId('address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');
                expect(_react1.screen.getByTestId('balance')).toHaveTextContent('1.5 ETH');
            });
            expect(_react1.screen.getByTestId('disconnect-button')).toBeInTheDocument();
            expect(_react1.screen.queryByTestId('connect-button')).not.toBeInTheDocument();
        });
        it('disconnects wallet', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWalletConnect, {}));
            // 先连接
            const connectButton = _react1.screen.getByTestId('connect-button');
            _react1.fireEvent.click(connectButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
            });
            // 然后断开连接
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('disconnect-button')).toBeInTheDocument();
            });
            const disconnectButton = _react1.screen.getByTestId('disconnect-button');
            _react1.fireEvent.click(disconnectButton);
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');
            expect(_react1.screen.getByTestId('address')).toHaveTextContent('');
            expect(_react1.screen.getByTestId('balance')).toHaveTextContent('0 ETH');
            expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,