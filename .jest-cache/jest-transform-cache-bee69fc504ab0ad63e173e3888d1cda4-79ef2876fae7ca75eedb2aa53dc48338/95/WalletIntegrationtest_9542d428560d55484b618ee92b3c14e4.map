{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/integration/WalletIntegration.test.ts"],"sourcesContent":["/**\n * 钱包集成测试\n * 测试真实的钱包连接和交互逻辑\n */\n\n// 模拟 wagmi 和 ethers\njest.mock('wagmi', () => ({\n  useAccount: jest.fn(),\n  useConnect: jest.fn(),\n  useDisconnect: jest.fn(),\n  useBalance: jest.fn(),\n  useContractRead: jest.fn(),\n  useContractWrite: jest.fn(),\n  usePrepareContractWrite: jest.fn(),\n  useWaitForTransaction: jest.fn(),\n  createConfig: jest.fn(),\n  configureChains: jest.fn(),\n  mainnet: { id: 1, name: 'Ethereum' },\n  WagmiConfig: ({ children }: any) => children,\n}));\n\njest.mock('ethers', () => ({\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n  formatUnits: jest.fn().mockImplementation((value, decimals) => {\n    return (Number(value) / Math.pow(10, decimals)).toString();\n  }),\n  parseUnits: jest.fn().mockImplementation((value, decimals) => {\n    return BigInt(Math.floor(parseFloat(value) * Math.pow(10, decimals)));\n  }),\n  Contract: jest.fn().mockImplementation(() => ({\n    balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n    transfer: jest.fn().mockResolvedValue({ hash: '0x123456789abcdef' }),\n    approve: jest.fn().mockResolvedValue({ hash: '0x123456789abcdef' }),\n  })),\n  JsonRpcProvider: jest.fn().mockImplementation(() => ({\n    getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n    getTransactionReceipt: jest.fn().mockResolvedValue({\n      status: 1,\n      confirmations: 3,\n    }),\n  })),\n}));\n\nimport { formatEther, parseEther, formatUnits, parseUnits } from 'ethers';\n\n// 钱包服务类\nclass WalletService {\n  private isConnected = false;\n  private address = '';\n  private balance = '0';\n\n  async connect(): Promise<{ address: string; balance: string }> {\n    // 模拟钱包连接\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    this.isConnected = true;\n    this.address = '0x123456789abcdef123456789abcdef123456789a';\n    this.balance = '1.5';\n\n    return {\n      address: this.address,\n      balance: this.balance,\n    };\n  }\n\n  async disconnect(): Promise<void> {\n    this.isConnected = false;\n    this.address = '';\n    this.balance = '0';\n  }\n\n  getConnectionStatus(): boolean {\n    return this.isConnected;\n  }\n\n  getAddress(): string {\n    return this.address;\n  }\n\n  async getBalance(address?: string): Promise<string> {\n    if (!address && !this.isConnected) {\n      throw new Error('Wallet not connected');\n    }\n\n    // 模拟获取余额\n    await new Promise(resolve => setTimeout(resolve, 50));\n    return this.balance;\n  }\n\n  async getTokenBalance(tokenAddress: string, userAddress?: string): Promise<string> {\n    if (!userAddress && !this.isConnected) {\n      throw new Error('Wallet not connected');\n    }\n\n    // 模拟获取代币余额\n    await new Promise(resolve => setTimeout(resolve, 50));\n    return '100.0';\n  }\n\n  async sendTransaction(to: string, value: string): Promise<string> {\n    if (!this.isConnected) {\n      throw new Error('Wallet not connected');\n    }\n\n    const amount = parseFloat(value);\n    if (amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    if (amount > parseFloat(this.balance)) {\n      throw new Error('Insufficient balance');\n    }\n\n    // 模拟发送交易\n    await new Promise(resolve => setTimeout(resolve, 200));\n\n    // 更新余额\n    this.balance = (parseFloat(this.balance) - amount).toString();\n\n    return '0x' + Math.random().toString(16).substr(2, 8);\n  }\n\n  async waitForTransaction(txHash: string): Promise<{ status: number; confirmations: number }> {\n    // 模拟等待交易确认\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    return {\n      status: 1,\n      confirmations: 3,\n    };\n  }\n}\n\n// 代币交换服务类\nclass TokenExchangeService {\n  private walletService: WalletService;\n  private currentPrice = 0.000000833; // BNB per SM\n\n  constructor(walletService: WalletService) {\n    this.walletService = walletService;\n  }\n\n  getCurrentPrice(): number {\n    return this.currentPrice;\n  }\n\n  calculateTokenAmount(bnbAmount: string): string {\n    const amount = parseFloat(bnbAmount);\n    const tokenAmount = amount / this.currentPrice;\n    return tokenAmount.toFixed(2);\n  }\n\n  async exchangeTokens(bnbAmount: string): Promise<{\n    txHash: string;\n    tokenAmount: string;\n    bnbAmount: string;\n  }> {\n    if (!this.walletService.getConnectionStatus()) {\n      throw new Error('Wallet not connected');\n    }\n\n    const amount = parseFloat(bnbAmount);\n    if (amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    if (amount < 0.01) {\n      throw new Error('Minimum amount is 0.01 BNB');\n    }\n\n    if (amount > 10) {\n      throw new Error('Maximum amount is 10 BNB');\n    }\n\n    const balance = await this.walletService.getBalance();\n    if (amount > parseFloat(balance)) {\n      throw new Error('Insufficient balance');\n    }\n\n    // 发送交易\n    const txHash = await this.walletService.sendTransaction(\n      '0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E', // Exchange contract\n      bnbAmount\n    );\n\n    const tokenAmount = this.calculateTokenAmount(bnbAmount);\n\n    return {\n      txHash,\n      tokenAmount,\n      bnbAmount,\n    };\n  }\n\n  async getExchangeStats(): Promise<{\n    totalSold: string;\n    totalRemaining: string;\n    currentRound: number;\n    currentPrice: string;\n  }> {\n    // 模拟获取交换统计\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    return {\n      totalSold: '1000000',\n      totalRemaining: '9000000',\n      currentRound: 1,\n      currentPrice: this.currentPrice.toFixed(9), // 使用 toFixed 避免科学计数法\n    };\n  }\n}\n\ndescribe('Wallet Integration Tests', () => {\n  let walletService: WalletService;\n\n  beforeEach(() => {\n    walletService = new WalletService();\n  });\n\n  describe('Wallet Connection', () => {\n    it('should connect wallet successfully', async () => {\n      const result = await walletService.connect();\n\n      expect(result.address).toBe('0x123456789abcdef123456789abcdef123456789a');\n      expect(result.balance).toBe('1.5');\n      expect(walletService.getConnectionStatus()).toBe(true);\n    });\n\n    it('should disconnect wallet', async () => {\n      await walletService.connect();\n      expect(walletService.getConnectionStatus()).toBe(true);\n\n      await walletService.disconnect();\n      expect(walletService.getConnectionStatus()).toBe(false);\n      expect(walletService.getAddress()).toBe('');\n    });\n\n    it('should get balance when connected', async () => {\n      await walletService.connect();\n      const balance = await walletService.getBalance();\n\n      expect(balance).toBe('1.5');\n    });\n\n    it('should throw error when getting balance without connection', async () => {\n      await expect(walletService.getBalance()).rejects.toThrow('Wallet not connected');\n    });\n\n    it('should get token balance', async () => {\n      await walletService.connect();\n      const tokenBalance = await walletService.getTokenBalance('0xd7d7dd989642222B6f685aF0220dc0065F489ae0');\n\n      expect(tokenBalance).toBe('100.0');\n    });\n  });\n\n  describe('Transaction Operations', () => {\n    beforeEach(async () => {\n      await walletService.connect();\n    });\n\n    it('should send transaction successfully', async () => {\n      const txHash = await walletService.sendTransaction(\n        '0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E',\n        '0.5'\n      );\n\n      expect(txHash).toMatch(/^0x[a-f0-9]{8}$/);\n\n      // 余额应该减少\n      const newBalance = await walletService.getBalance();\n      expect(parseFloat(newBalance)).toBe(1.0);\n    });\n\n    it('should throw error for invalid amount', async () => {\n      await expect(\n        walletService.sendTransaction('0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E', '0')\n      ).rejects.toThrow('Invalid amount');\n    });\n\n    it('should throw error for insufficient balance', async () => {\n      await expect(\n        walletService.sendTransaction('0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E', '2.0')\n      ).rejects.toThrow('Insufficient balance');\n    });\n\n    it('should wait for transaction confirmation', async () => {\n      const txHash = await walletService.sendTransaction(\n        '0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E',\n        '0.1'\n      );\n\n      const receipt = await walletService.waitForTransaction(txHash);\n\n      expect(receipt.status).toBe(1);\n      expect(receipt.confirmations).toBe(3);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle connection timeout', async () => {\n      // 模拟连接超时\n      const originalConnect = walletService.connect;\n      walletService.connect = jest.fn().mockRejectedValue(new Error('Connection timeout'));\n\n      await expect(walletService.connect()).rejects.toThrow('Connection timeout');\n    });\n\n    it('should handle transaction failure', async () => {\n      await walletService.connect();\n\n      // 模拟交易失败\n      const originalSendTransaction = walletService.sendTransaction;\n      walletService.sendTransaction = jest.fn().mockRejectedValue(new Error('Transaction failed'));\n\n      await expect(\n        walletService.sendTransaction('0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E', '0.1')\n      ).rejects.toThrow('Transaction failed');\n    });\n  });\n});\n\ndescribe('Token Exchange Integration Tests', () => {\n  let walletService: WalletService;\n  let exchangeService: TokenExchangeService;\n\n  beforeEach(async () => {\n    walletService = new WalletService();\n    exchangeService = new TokenExchangeService(walletService);\n    await walletService.connect();\n  });\n\n  describe('Price Calculation', () => {\n    it('should get current price', () => {\n      const price = exchangeService.getCurrentPrice();\n      expect(price).toBe(0.000000833);\n    });\n\n    it('should calculate token amount correctly', () => {\n      const tokenAmount = exchangeService.calculateTokenAmount('1.0');\n      const expectedAmount = 1.0 / 0.000000833;\n      expect(parseFloat(tokenAmount)).toBeCloseTo(expectedAmount, 0);\n    });\n  });\n\n  describe('Token Exchange', () => {\n    it('should exchange tokens successfully', async () => {\n      const result = await exchangeService.exchangeTokens('1.0');\n\n      expect(result.txHash).toMatch(/^0x[a-f0-9]{8}$/);\n      expect(result.bnbAmount).toBe('1.0');\n      expect(parseFloat(result.tokenAmount)).toBeGreaterThan(0);\n    });\n\n    it('should validate minimum amount', async () => {\n      await expect(\n        exchangeService.exchangeTokens('0.005')\n      ).rejects.toThrow('Minimum amount is 0.01 BNB');\n    });\n\n    it('should validate maximum amount', async () => {\n      await expect(\n        exchangeService.exchangeTokens('15')\n      ).rejects.toThrow('Maximum amount is 10 BNB');\n    });\n\n    it('should check wallet connection', async () => {\n      await walletService.disconnect();\n\n      await expect(\n        exchangeService.exchangeTokens('1.0')\n      ).rejects.toThrow('Wallet not connected');\n    });\n\n    it('should check sufficient balance', async () => {\n      await expect(\n        exchangeService.exchangeTokens('2.0')\n      ).rejects.toThrow('Insufficient balance');\n    });\n\n    it('should get exchange statistics', async () => {\n      const stats = await exchangeService.getExchangeStats();\n\n      expect(stats.totalSold).toBe('1000000');\n      expect(stats.totalRemaining).toBe('9000000');\n      expect(stats.currentRound).toBe(1);\n      expect(stats.currentPrice).toBe('0.000000833');\n    });\n  });\n\n  describe('Integration Scenarios', () => {\n    it('should handle complete exchange flow', async () => {\n      // 1. 检查初始状态\n      expect(walletService.getConnectionStatus()).toBe(true);\n      const initialBalance = await walletService.getBalance();\n      expect(initialBalance).toBe('1.5');\n\n      // 2. 获取交换统计\n      const stats = await exchangeService.getExchangeStats();\n      expect(stats.currentPrice).toBe('0.000000833');\n\n      // 3. 计算代币数量\n      const tokenAmount = exchangeService.calculateTokenAmount('0.5');\n      expect(parseFloat(tokenAmount)).toBeGreaterThan(0);\n\n      // 4. 执行交换\n      const result = await exchangeService.exchangeTokens('0.5');\n      expect(result.txHash).toBeDefined();\n      expect(result.bnbAmount).toBe('0.5');\n\n      // 5. 等待交易确认\n      const receipt = await walletService.waitForTransaction(result.txHash);\n      expect(receipt.status).toBe(1);\n\n      // 6. 检查余额更新\n      const newBalance = await walletService.getBalance();\n      expect(parseFloat(newBalance)).toBe(1.0);\n    });\n\n    it('should handle multiple exchanges', async () => {\n      // 第一次交换\n      const result1 = await exchangeService.exchangeTokens('0.3');\n      expect(result1.txHash).toBeDefined();\n\n      // 检查余额\n      let balance = await walletService.getBalance();\n      expect(parseFloat(balance)).toBe(1.2);\n\n      // 第二次交换\n      const result2 = await exchangeService.exchangeTokens('0.2');\n      expect(result2.txHash).toBeDefined();\n\n      // 检查最终余额\n      balance = await walletService.getBalance();\n      expect(parseFloat(balance)).toBe(1.0);\n    });\n\n    it('should handle exchange with insufficient balance after partial use', async () => {\n      // 先进行一次交换\n      await exchangeService.exchangeTokens('1.0');\n\n      // 余额应该是 0.5\n      const balance = await walletService.getBalance();\n      expect(parseFloat(balance)).toBe(0.5);\n\n      // 尝试交换超过余额的金额\n      await expect(\n        exchangeService.exchangeTokens('1.0')\n      ).rejects.toThrow('Insufficient balance');\n    });\n  });\n});\n"],"names":["jest","mock","useAccount","fn","useConnect","useDisconnect","useBalance","useContractRead","useContractWrite","usePrepareContractWrite","useWaitForTransaction","createConfig","configureChains","mainnet","id","name","WagmiConfig","children","formatEther","mockImplementation","value","Number","toString","parseEther","BigInt","Math","floor","parseFloat","formatUnits","decimals","pow","parseUnits","Contract","balanceOf","mockResolvedValue","transfer","hash","approve","JsonRpcProvider","getBalance","getTransactionReceipt","status","confirmations","WalletService","connect","Promise","resolve","setTimeout","isConnected","address","balance","disconnect","getConnectionStatus","getAddress","Error","getTokenBalance","tokenAddress","userAddress","sendTransaction","to","amount","random","substr","waitForTransaction","txHash","TokenExchangeService","constructor","walletService","currentPrice","getCurrentPrice","calculateTokenAmount","bnbAmount","tokenAmount","toFixed","exchangeTokens","getExchangeStats","totalSold","totalRemaining","currentRound","describe","beforeEach","it","result","expect","toBe","rejects","toThrow","tokenBalance","toMatch","newBalance","receipt","originalConnect","mockRejectedValue","originalSendTransaction","exchangeService","price","expectedAmount","toBeCloseTo","toBeGreaterThan","stats","initialBalance","toBeDefined","result1","result2"],"mappings":"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"}