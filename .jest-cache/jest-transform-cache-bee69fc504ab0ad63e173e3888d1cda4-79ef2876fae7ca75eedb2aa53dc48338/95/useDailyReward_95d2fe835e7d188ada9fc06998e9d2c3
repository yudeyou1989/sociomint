c6eaf71ca56c0a4f2984ea189a24e1a0
"use strict";

/* istanbul ignore next */
function cov_2ih9zencbd() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useDailyReward.ts";
  var hash = "bfda5ae4a7298882e91b7a6d4216bdae2e77471c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useDailyReward.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "8": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 31
        }
      },
      "9": {
        start: {
          line: 26,
          column: 15
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "10": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 65
        }
      },
      "11": {
        start: {
          line: 29,
          column: 30
        },
        end: {
          line: 83,
          column: 1
        }
      },
      "12": {
        start: {
          line: 85,
          column: 37
        },
        end: {
          line: 85,
          column: 61
        }
      },
      "13": {
        start: {
          line: 86,
          column: 21
        },
        end: {
          line: 86,
          column: 63
        }
      },
      "14": {
        start: {
          line: 87,
          column: 46
        },
        end: {
          line: 87,
          column: 72
        }
      },
      "15": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 88,
          column: 56
        }
      },
      "16": {
        start: {
          line: 89,
          column: 40
        },
        end: {
          line: 89,
          column: 63
        }
      },
      "17": {
        start: {
          line: 90,
          column: 40
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "18": {
        start: {
          line: 91,
          column: 42
        },
        end: {
          line: 91,
          column: 66
        }
      },
      "19": {
        start: {
          line: 92,
          column: 35
        },
        end: {
          line: 92,
          column: 84
        }
      },
      "20": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 122,
          column: 6
        }
      },
      "21": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 57
        }
      },
      "22": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 36
        }
      },
      "23": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 146,
          column: 6
        }
      },
      "24": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 45
        }
      },
      "25": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 125,
          column: 45
        }
      },
      "26": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "27": {
        start: {
          line: 127,
          column: 53
        },
        end: {
          line: 127,
          column: 71
        }
      },
      "28": {
        start: {
          line: 129,
          column: 35
        },
        end: {
          line: 135,
          column: 20
        }
      },
      "29": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "30": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 63
        }
      },
      "31": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 54
        }
      },
      "32": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 24
        }
      },
      "33": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 190,
          column: 6
        }
      },
      "34": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "35": {
        start: {
          line: 151,
          column: 60
        },
        end: {
          line: 151,
          column: 182
        }
      },
      "36": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "37": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 73
        }
      },
      "38": {
        start: {
          line: 156,
          column: 71
        },
        end: {
          line: 158,
          column: 24
        }
      },
      "39": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "40": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 85
        }
      },
      "41": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "42": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 168,
          column: 19
        }
      },
      "43": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "44": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 178,
          column: 25
        }
      },
      "45": {
        start: {
          line: 172,
          column: 60
        },
        end: {
          line: 178,
          column: 21
        }
      },
      "46": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 183,
          column: 14
        }
      },
      "47": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 58
        }
      },
      "48": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 24
        }
      },
      "49": {
        start: {
          line: 192,
          column: 38
        },
        end: {
          line: 207,
          column: 6
        }
      },
      "50": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 34
        }
      },
      "51": {
        start: {
          line: 193,
          column: 22
        },
        end: {
          line: 193,
          column: 34
        }
      },
      "52": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "53": {
        start: {
          line: 195,
          column: 39
        },
        end: {
          line: 198,
          column: 14
        }
      },
      "54": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 28
        }
      },
      "55": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "56": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 24
        }
      },
      "57": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 223,
          column: 6
        }
      },
      "58": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 31
        }
      },
      "59": {
        start: {
          line: 210,
          column: 22
        },
        end: {
          line: 210,
          column: 31
        }
      },
      "60": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "61": {
        start: {
          line: 212,
          column: 37
        },
        end: {
          line: 214,
          column: 14
        }
      },
      "62": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 31
        }
      },
      "63": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 65
        }
      },
      "64": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "65": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 255,
          column: 7
        }
      },
      "66": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "67": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 35
        }
      },
      "68": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 27
        }
      },
      "69": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "70": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 233,
          column: 17
        }
      },
      "71": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 27
        }
      },
      "72": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "73": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 57
        }
      },
      "74": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 65
        }
      },
      "75": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 40
        }
      },
      "76": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 19
        }
      },
      "77": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 262,
          column: 6
        }
      },
      "78": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 40
        }
      },
      "79": {
        start: {
          line: 258,
          column: 30
        },
        end: {
          line: 258,
          column: 38
        }
      },
      "80": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 32
        }
      },
      "81": {
        start: {
          line: 264,
          column: 25
        },
        end: {
          line: 264,
          column: 44
        }
      },
      "82": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 272,
          column: 6
        }
      },
      "83": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "84": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 51
        }
      },
      "85": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 280,
          column: 5
        }
      },
      "86": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 48
        }
      },
      "87": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 281,
          column: 29
        }
      },
      "88": {
        start: {
          line: 284,
          column: 19
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "89": {
        start: {
          line: 314,
          column: 23
        },
        end: {
          line: 314,
          column: 24
        }
      },
      "90": {
        start: {
          line: 315,
          column: 23
        },
        end: {
          line: 315,
          column: 38
        }
      },
      "91": {
        start: {
          line: 316,
          column: 24
        },
        end: {
          line: 316,
          column: 43
        }
      },
      "92": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 325,
          column: 5
        }
      },
      "93": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "94": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "95": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 29
        }
      },
      "96": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 43
        }
      },
      "97": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 98
        }
      },
      "98": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 18
        }
      },
      "99": {
        start: {
          line: 326,
          column: 21
        },
        end: {
          line: 326,
          column: 168
        }
      },
      "100": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 332,
          column: 6
        }
      },
      "101": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 337,
          column: 5
        }
      },
      "102": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 35
        }
      },
      "103": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 340,
          column: 5
        }
      },
      "104": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 53
        }
      },
      "105": {
        start: {
          line: 341,
          column: 4
        },
        end: {
          line: 344,
          column: 5
        }
      },
      "106": {
        start: {
          line: 342,
          column: 25
        },
        end: {
          line: 342,
          column: 50
        }
      },
      "107": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 49
        }
      },
      "108": {
        start: {
          line: 345,
          column: 4
        },
        end: {
          line: 345,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 25
          }
        },
        loc: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 26
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 21,
            column: 21
          }
        },
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "useDailyReward",
        decl: {
          start: {
            line: 84,
            column: 9
          },
          end: {
            line: 84,
            column: 23
          }
        },
        loc: {
          start: {
            line: 84,
            column: 40
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 118,
            column: 17
          },
          end: {
            line: 118,
            column: 18
          }
        },
        loc: {
          start: {
            line: 118,
            column: 26
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 118
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 124,
            column: 54
          },
          end: {
            line: 124,
            column: 55
          }
        },
        loc: {
          start: {
            line: 124,
            column: 58
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 124
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 148,
            column: 54
          },
          end: {
            line: 148,
            column: 55
          }
        },
        loc: {
          start: {
            line: 148,
            column: 64
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 148
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 172,
            column: 51
          },
          end: {
            line: 172,
            column: 52
          }
        },
        loc: {
          start: {
            line: 172,
            column: 60
          },
          end: {
            line: 178,
            column: 21
          }
        },
        line: 172
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 192,
            column: 62
          },
          end: {
            line: 192,
            column: 63
          }
        },
        loc: {
          start: {
            line: 192,
            column: 72
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 192
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 209,
            column: 50
          },
          end: {
            line: 209,
            column: 51
          }
        },
        loc: {
          start: {
            line: 209,
            column: 60
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 209
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 225,
            column: 26
          },
          end: {
            line: 225,
            column: 27
          }
        },
        loc: {
          start: {
            line: 225,
            column: 30
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 225
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 226,
            column: 25
          },
          end: {
            line: 226,
            column: 26
          }
        },
        loc: {
          start: {
            line: 226,
            column: 35
          },
          end: {
            line: 246,
            column: 9
          }
        },
        line: 226
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 257,
            column: 44
          },
          end: {
            line: 257,
            column: 45
          }
        },
        loc: {
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 257
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 258,
            column: 22
          },
          end: {
            line: 258,
            column: 23
          }
        },
        loc: {
          start: {
            line: 258,
            column: 30
          },
          end: {
            line: 258,
            column: 38
          }
        },
        line: 258
      },
      "16": {
        name: "formatRewardAmount",
        decl: {
          start: {
            line: 274,
            column: 9
          },
          end: {
            line: 274,
            column: 27
          }
        },
        loc: {
          start: {
            line: 274,
            column: 36
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 274
      },
      "17": {
        name: "getRewardLevel",
        decl: {
          start: {
            line: 283,
            column: 9
          },
          end: {
            line: 283,
            column: 23
          }
        },
        loc: {
          start: {
            line: 283,
            column: 38
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 283
      },
      "18": {
        name: "getRewardSuggestion",
        decl: {
          start: {
            line: 334,
            column: 9
          },
          end: {
            line: 334,
            column: 28
          }
        },
        loc: {
          start: {
            line: 334,
            column: 54
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 334
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 84,
            column: 24
          },
          end: {
            line: 84,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 37
          },
          end: {
            line: 84,
            column: 38
          }
        }],
        line: 84
      },
      "1": {
        loc: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 106,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 40
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 18
          }
        }],
        line: 97
      },
      "2": {
        loc: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 26
          }
        }, {
          start: {
            line: 97,
            column: 30
          },
          end: {
            line: 97,
            column: 37
          }
        }],
        line: 97
      },
      "3": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 125,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 125,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "4": {
        loc: {
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 135,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 76
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 20
          }
        }],
        line: 129
      },
      "5": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "6": {
        loc: {
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 152,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 152,
            column: 26
          }
        }, {
          start: {
            line: 152,
            column: 30
          },
          end: {
            line: 152,
            column: 60
          }
        }],
        line: 152
      },
      "7": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "8": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "9": {
        loc: {
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 35
          },
          end: {
            line: 165,
            column: 60
          }
        }, {
          start: {
            line: 165,
            column: 64
          },
          end: {
            line: 165,
            column: 65
          }
        }],
        line: 165
      },
      "10": {
        loc: {
          start: {
            line: 166,
            column: 56
          },
          end: {
            line: 166,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 56
          },
          end: {
            line: 166,
            column: 92
          }
        }, {
          start: {
            line: 166,
            column: 96
          },
          end: {
            line: 166,
            column: 99
          }
        }],
        line: 166
      },
      "11": {
        loc: {
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 167,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 167,
            column: 89
          }
        }, {
          start: {
            line: 167,
            column: 93
          },
          end: {
            line: 167,
            column: 96
          }
        }],
        line: 167
      },
      "12": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 176,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 46
          },
          end: {
            line: 176,
            column: 61
          }
        }, {
          start: {
            line: 176,
            column: 65
          },
          end: {
            line: 176,
            column: 68
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 177,
            column: 50
          },
          end: {
            line: 177,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 50
          },
          end: {
            line: 177,
            column: 70
          }
        }, {
          start: {
            line: 177,
            column: 74
          },
          end: {
            line: 177,
            column: 77
          }
        }],
        line: 177
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "16": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 210,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 210,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "17": {
        loc: {
          start: {
            line: 215,
            column: 19
          },
          end: {
            line: 215,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 19
          },
          end: {
            line: 215,
            column: 25
          }
        }, {
          start: {
            line: 215,
            column: 29
          },
          end: {
            line: 215,
            column: 30
          }
        }],
        line: 215
      },
      "18": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "19": {
        loc: {
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 38
          }
        }, {
          start: {
            line: 242,
            column: 42
          },
          end: {
            line: 242,
            column: 63
          }
        }],
        line: 242
      },
      "20": {
        loc: {
          start: {
            line: 266,
            column: 24
          },
          end: {
            line: 266,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 24
          },
          end: {
            line: 266,
            column: 52
          }
        }, {
          start: {
            line: 266,
            column: 56
          },
          end: {
            line: 266,
            column: 60
          }
        }],
        line: 266
      },
      "21": {
        loc: {
          start: {
            line: 269,
            column: 23
          },
          end: {
            line: 269,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 23
          },
          end: {
            line: 269,
            column: 36
          }
        }, {
          start: {
            line: 269,
            column: 40
          },
          end: {
            line: 269,
            column: 63
          }
        }],
        line: 269
      },
      "22": {
        loc: {
          start: {
            line: 270,
            column: 15
          },
          end: {
            line: 270,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 15
          },
          end: {
            line: 270,
            column: 20
          }
        }, {
          start: {
            line: 270,
            column: 24
          },
          end: {
            line: 270,
            column: 52
          }
        }],
        line: 270
      },
      "23": {
        loc: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "24": {
        loc: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "25": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: 322,
            column: 15
          },
          end: {
            line: 324,
            column: 9
          }
        }],
        line: 318
      },
      "26": {
        loc: {
          start: {
            line: 321,
            column: 28
          },
          end: {
            line: 321,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 321,
            column: 52
          },
          end: {
            line: 321,
            column: 75
          }
        }, {
          start: {
            line: 321,
            column: 78
          },
          end: {
            line: 321,
            column: 97
          }
        }],
        line: 321
      },
      "27": {
        loc: {
          start: {
            line: 326,
            column: 21
          },
          end: {
            line: 326,
            column: 168
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 58
          },
          end: {
            line: 326,
            column: 61
          }
        }, {
          start: {
            line: 326,
            column: 64
          },
          end: {
            line: 326,
            column: 168
          }
        }],
        line: 326
      },
      "28": {
        loc: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "29": {
        loc: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "30": {
        loc: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useDailyReward.ts"],
      sourcesContent: ["import { useState, useEffect, useCallback } from 'react';\nimport { useAccount, useContractReads } from 'wagmi';\nimport { useSupabaseClient } from '@supabase/auth-helpers-react';\nimport type { Database } from '@/types/supabase';\n\ntype SupabaseClient = ReturnType<typeof useSupabaseClient<Database>>;\n\ninterface UserRewardInfo {\n  smBalance: bigint;\n  dailyFlowers: number;\n  canClaim: boolean;\n  nextClaimTime: number;\n  totalClaimed: number;\n}\n\ninterface DailyRewardStats {\n  totalClaimers: number;\n  totalFlowersDistributed: number;\n  averageFlowersPerUser: number;\n  userRank?: number;\n}\n\ninterface DailyRewardData {\n  userRewardInfo: UserRewardInfo | null;\n  dailyStats: DailyRewardStats | null;\n  leaderboard: Array<{\n    rank: number;\n    wallet: string;\n    username?: string;\n    smBalance: number;\n    flowersAmount: number;\n  }>;\n  isLoadingData: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\n// \u5408\u7EA6 ABI\nconst SM_TOKEN_EXCHANGE_ABI = [\n  {\n    name: 'getUserDailyRewardInfo',\n    type: 'function',\n    inputs: [{ name: 'user', type: 'address' }],\n    outputs: [\n      { name: 'smBalance', type: 'uint256' },\n      { name: 'dailyFlowers', type: 'uint256' },\n      { name: 'canClaim', type: 'bool' },\n      { name: 'nextClaimTime', type: 'uint256' },\n      { name: 'totalClaimed', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    name: 'getDailyRewardConfig',\n    type: 'function',\n    inputs: [],\n    outputs: [\n      { name: 'flowersPer500Sm', type: 'uint256' },\n      { name: 'maxDailyFlowersPerUser', type: 'uint256' },\n      { name: 'dailyClaimInterval', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  }\n] as const;\n\nexport function useDailyReward(refreshKey: number = 0): DailyRewardData {\n  const { address, isConnected } = useAccount();\n  const supabase = useSupabaseClient<Database>();\n  \n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refetchKey, setRefetchKey] = useState(0);\n  const [dailyStats, setDailyStats] = useState<DailyRewardStats | null>(null);\n  const [leaderboard, setLeaderboard] = useState<Array<any>>([]);\n  \n  const smTokenExchangeAddress = process.env.NEXT_PUBLIC_SM_TOKEN_EXCHANGE_ADDRESS as `0x${string}`;\n  \n  // \u5408\u7EA6\u8BFB\u53D6\u914D\u7F6E\n  const contractReads = useContractReads({\n    contracts: [\n      // \u83B7\u53D6\u7528\u6237\u6BCF\u65E5\u5956\u52B1\u4FE1\u606F\n      ...(isConnected && address ? [{\n        address: smTokenExchangeAddress,\n        abi: SM_TOKEN_EXCHANGE_ABI,\n        functionName: 'getUserDailyRewardInfo',\n        args: [address]\n      }] : []),\n      // \u83B7\u53D6\u6BCF\u65E5\u5956\u52B1\u914D\u7F6E\n      {\n        address: smTokenExchangeAddress,\n        abi: SM_TOKEN_EXCHANGE_ABI,\n        functionName: 'getDailyRewardConfig'\n      }\n    ],\n    watch: true,\n    cacheTime: 10000, // 10\u79D2\u7F13\u5B58\n    staleTime: 5000, // 5\u79D2\u540E\u6807\u8BB0\u4E3A\u8FC7\u671F\n    enabled: !!smTokenExchangeAddress,\n    onError: (error) => {\n      console.error('Contract read error:', error);\n      setError(error.message);\n    }\n  });\n  \n  // \u89E3\u6790\u5408\u7EA6\u6570\u636E\n  const parseContractData = useCallback(() => {\n    if (!contractReads.data) return null;\n    \n    try {\n      const [userRewardResult, configResult] = contractReads.data;\n      \n      // \u89E3\u6790\u7528\u6237\u5956\u52B1\u4FE1\u606F\n      const userRewardInfo: UserRewardInfo | null = userRewardResult?.status === 'success' ? {\n        smBalance: userRewardResult.result[0],\n        dailyFlowers: Number(userRewardResult.result[1]),\n        canClaim: userRewardResult.result[2],\n        nextClaimTime: Number(userRewardResult.result[3]),\n        totalClaimed: Number(userRewardResult.result[4])\n      } : null;\n      \n      return {\n        userRewardInfo\n      };\n    } catch (error) {\n      console.error('Parse contract data error:', error);\n      setError('Failed to parse contract data');\n      return null;\n    }\n  }, [contractReads.data]);\n  \n  // \u4ECE\u6570\u636E\u5E93\u83B7\u53D6\u7EDF\u8BA1\u6570\u636E\n  const fetchDatabaseData = useCallback(async () => {\n    try {\n      // \u83B7\u53D6\u4ECA\u65E5\u7EDF\u8BA1\u6570\u636E\n      const { data: todayStats, error: statsError } = await supabase\n        .from('daily_reward_overview')\n        .select('*')\n        .eq('claim_date', new Date().toISOString().split('T')[0])\n        .single();\n      \n      if (statsError && statsError.code !== 'PGRST116') {\n        console.error('Database stats query error:', statsError);\n      }\n      \n      // \u83B7\u53D6\u6392\u884C\u699C\u6570\u636E\n      const { data: leaderboardData, error: leaderboardError } = await supabase\n        .from('current_daily_leaderboard')\n        .select('*')\n        .order('rank', { ascending: true })\n        .limit(20);\n      \n      if (leaderboardError) {\n        console.error('Database leaderboard query error:', leaderboardError);\n      }\n      \n      // \u8BBE\u7F6E\u7EDF\u8BA1\u6570\u636E\n      if (todayStats) {\n        setDailyStats({\n          totalClaimers: todayStats.total_claimers || 0,\n          totalFlowersDistributed: parseFloat(todayStats.total_flowers_distributed || '0'),\n          averageFlowersPerUser: parseFloat(todayStats.average_flowers_per_user || '0')\n        });\n      }\n      \n      // \u8BBE\u7F6E\u6392\u884C\u699C\u6570\u636E\n      if (leaderboardData) {\n        setLeaderboard(leaderboardData.map(item => ({\n          rank: item.rank,\n          wallet: item.user_wallet,\n          username: item.username,\n          smBalance: parseFloat(item.sm_balance || '0'),\n          flowersAmount: parseFloat(item.flowers_claimed || '0')\n        })));\n      }\n      \n      return {\n        todayStats,\n        leaderboardData\n      };\n    } catch (error) {\n      console.error('Database fetch error:', error);\n      return null;\n    }\n  }, [supabase]);\n  \n  // \u68C0\u67E5\u7528\u6237\u662F\u5426\u53EF\u4EE5\u9886\u53D6\u5956\u52B1\uFF08\u6570\u636E\u5E93\u9A8C\u8BC1\uFF09\n  const checkCanClaimFromDatabase = useCallback(async () => {\n    if (!address) return true;\n    \n    try {\n      const { data: canClaim } = await supabase.rpc('can_claim_daily_reward', {\n        p_user_wallet: address,\n        p_claim_date: new Date().toISOString().split('T')[0]\n      });\n      \n      return canClaim;\n    } catch (error) {\n      console.error('Database claim check error:', error);\n      return true; // \u9ED8\u8BA4\u5141\u8BB8\u9886\u53D6\uFF0C\u7531\u5408\u7EA6\u8FDB\u884C\u6700\u7EC8\u9A8C\u8BC1\n    }\n  }, [address, supabase]);\n  \n  // \u83B7\u53D6\u7528\u6237\u8FDE\u7EED\u9886\u53D6\u5929\u6570\n  const getUserStreak = useCallback(async () => {\n    if (!address) return 0;\n    \n    try {\n      const { data: streak } = await supabase.rpc('get_user_streak', {\n        p_user_wallet: address\n      });\n      \n      return streak || 0;\n    } catch (error) {\n      console.error('Database streak query error:', error);\n      return 0;\n    }\n  }, [address, supabase]);\n  \n  // \u4E3B\u8981\u6570\u636E\u83B7\u53D6\u6548\u679C\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoadingData(true);\n      setError(null);\n      \n      try {\n        // \u7B49\u5F85\u5408\u7EA6\u6570\u636E\n        if (contractReads.isLoading) {\n          return;\n        }\n        \n        // \u83B7\u53D6\u6570\u636E\u5E93\u6570\u636E\n        await Promise.all([\n          fetchDatabaseData(),\n          checkCanClaimFromDatabase(),\n          getUserStreak()\n        ]);\n        \n      } catch (error: any) {\n        console.error('Load data error:', error);\n        setError(error.message || 'Failed to load data');\n      } finally {\n        setIsLoadingData(false);\n      }\n    };\n    \n    loadData();\n  }, [contractReads.isLoading, fetchDatabaseData, checkCanClaimFromDatabase, getUserStreak, refreshKey, refetchKey]);\n  \n  // \u624B\u52A8\u5237\u65B0\u51FD\u6570\n  const refetch = useCallback(() => {\n    setRefetchKey(prev => prev + 1);\n    contractReads.refetch();\n  }, [contractReads]);\n  \n  // \u89E3\u6790\u6700\u7EC8\u6570\u636E\n  const contractData = parseContractData();\n  \n  return {\n    userRewardInfo: contractData?.userRewardInfo || null,\n    dailyStats,\n    leaderboard,\n    isLoadingData: isLoadingData || contractReads.isLoading,\n    error: error || (contractReads.error?.message),\n    refetch\n  };\n}\n\n// \u8F85\u52A9\u51FD\u6570\uFF1A\u683C\u5F0F\u5316\u5956\u52B1\u6570\u91CF\nexport function formatRewardAmount(amount: number): string {\n  if (amount >= 1000000) {\n    return (amount / 1000000).toFixed(1) + 'M';\n  }\n  if (amount >= 1000) {\n    return (amount / 1000).toFixed(1) + 'K';\n  }\n  return amount.toFixed(0);\n}\n\n// \u8F85\u52A9\u51FD\u6570\uFF1A\u8BA1\u7B97\u5956\u52B1\u7B49\u7EA7\nexport function getRewardLevel(totalClaimed: number): {\n  level: number;\n  title: string;\n  nextLevelThreshold: number;\n  progress: number;\n} {\n  const levels = [\n    { threshold: 0, title: '\u65B0\u624B' },\n    { threshold: 100, title: '\u521D\u7EA7' },\n    { threshold: 500, title: '\u4E2D\u7EA7' },\n    { threshold: 1000, title: '\u9AD8\u7EA7' },\n    { threshold: 2000, title: '\u4E13\u5BB6' },\n    { threshold: 5000, title: '\u5927\u5E08' },\n    { threshold: 10000, title: '\u4F20\u5947' }\n  ];\n  \n  let currentLevel = 0;\n  let currentTitle = levels[0].title;\n  let nextThreshold = levels[1].threshold;\n  \n  for (let i = 0; i < levels.length; i++) {\n    if (totalClaimed >= levels[i].threshold) {\n      currentLevel = i;\n      currentTitle = levels[i].title;\n      nextThreshold = i < levels.length - 1 ? levels[i + 1].threshold : levels[i].threshold;\n    } else {\n      break;\n    }\n  }\n  \n  const progress = currentLevel === levels.length - 1 ? 100 : \n    ((totalClaimed - levels[currentLevel].threshold) / (nextThreshold - levels[currentLevel].threshold)) * 100;\n  \n  return {\n    level: currentLevel,\n    title: currentTitle,\n    nextLevelThreshold: nextThreshold,\n    progress: Math.min(progress, 100)\n  };\n}\n\n// \u8F85\u52A9\u51FD\u6570\uFF1A\u83B7\u53D6\u5956\u52B1\u5EFA\u8BAE\nexport function getRewardSuggestion(smBalance: number, dailyFlowers: number): string {\n  if (smBalance === 0) {\n    return '\u8D2D\u4E70 SM \u4EE3\u5E01\u5F00\u59CB\u83B7\u5F97\u6BCF\u65E5\u5956\u52B1\uFF01';\n  }\n  \n  if (smBalance < 500) {\n    return `\u518D\u8D2D\u4E70 ${500 - smBalance} SM \u5373\u53EF\u83B7\u5F97\u6BCF\u65E5\u5956\u52B1\uFF01`;\n  }\n  \n  if (dailyFlowers < 200) {\n    const neededSm = (200 - dailyFlowers) * 50; // \u6BCF10\u6735\u5C0F\u7EA2\u82B1\u9700\u8981500 SM\n    return `\u6301\u6709 ${neededSm} \u66F4\u591A SM \u53EF\u83B7\u5F97\u6700\u5927\u6BCF\u65E5\u5956\u52B1\uFF01`;\n  }\n  \n  return '\u60A8\u5DF2\u8FBE\u5230\u6700\u5927\u6BCF\u65E5\u5956\u52B1\uFF01';\n}\n"],
      names: ["formatRewardAmount", "getRewardLevel", "getRewardSuggestion", "useDailyReward", "SM_TOKEN_EXCHANGE_ABI", "name", "type", "inputs", "outputs", "stateMutability", "refreshKey", "address", "isConnected", "useAccount", "supabase", "useSupabaseClient", "isLoadingData", "setIsLoadingData", "useState", "error", "setError", "refetchKey", "setRefetchKey", "dailyStats", "setDailyStats", "leaderboard", "setLeaderboard", "smTokenExchangeAddress", "process", "env", "NEXT_PUBLIC_SM_TOKEN_EXCHANGE_ADDRESS", "contractReads", "useContractReads", "contracts", "abi", "functionName", "args", "watch", "cacheTime", "staleTime", "enabled", "onError", "console", "message", "parseContractData", "useCallback", "data", "userRewardResult", "configResult", "userRewardInfo", "status", "smBalance", "result", "dailyFlowers", "Number", "canClaim", "nextClaimTime", "totalClaimed", "fetchDatabaseData", "todayStats", "statsError", "from", "select", "eq", "Date", "toISOString", "split", "single", "code", "leaderboardData", "leaderboardError", "order", "ascending", "limit", "totalClaimers", "total_claimers", "totalFlowersDistributed", "parseFloat", "total_flowers_distributed", "averageFlowersPerUser", "average_flowers_per_user", "map", "item", "rank", "wallet", "user_wallet", "username", "sm_balance", "flowersAmount", "flowers_claimed", "checkCanClaimFromDatabase", "rpc", "p_user_wallet", "p_claim_date", "getUserStreak", "streak", "useEffect", "loadData", "isLoading", "Promise", "all", "refetch", "prev", "contractData", "amount", "toFixed", "levels", "threshold", "title", "currentLevel", "currentTitle", "nextThreshold", "i", "length", "progress", "level", "nextLevelThreshold", "Math", "min", "neededSm"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bfda5ae4a7298882e91b7a6d4216bdae2e77471c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ih9zencbd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ih9zencbd();
cov_2ih9zencbd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2ih9zencbd().f[0]++;
  cov_2ih9zencbd().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2ih9zencbd().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2ih9zencbd().s[3]++;
_export(exports, {
  formatRewardAmount: function () {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[1]++;
    cov_2ih9zencbd().s[4]++;
    return formatRewardAmount;
  },
  getRewardLevel: function () {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[2]++;
    cov_2ih9zencbd().s[5]++;
    return getRewardLevel;
  },
  getRewardSuggestion: function () {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[3]++;
    cov_2ih9zencbd().s[6]++;
    return getRewardSuggestion;
  },
  useDailyReward: function () {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[4]++;
    cov_2ih9zencbd().s[7]++;
    return useDailyReward;
  }
});
const _react =
/* istanbul ignore next */
(cov_2ih9zencbd().s[8]++, require("react"));
const _wagmi =
/* istanbul ignore next */
(cov_2ih9zencbd().s[9]++, require("wagmi"));
const _authhelpersreact =
/* istanbul ignore next */
(cov_2ih9zencbd().s[10]++, require("@supabase/auth-helpers-react"));
// 合约 ABI
const SM_TOKEN_EXCHANGE_ABI =
/* istanbul ignore next */
(cov_2ih9zencbd().s[11]++, [{
  name: 'getUserDailyRewardInfo',
  type: 'function',
  inputs: [{
    name: 'user',
    type: 'address'
  }],
  outputs: [{
    name: 'smBalance',
    type: 'uint256'
  }, {
    name: 'dailyFlowers',
    type: 'uint256'
  }, {
    name: 'canClaim',
    type: 'bool'
  }, {
    name: 'nextClaimTime',
    type: 'uint256'
  }, {
    name: 'totalClaimed',
    type: 'uint256'
  }],
  stateMutability: 'view'
}, {
  name: 'getDailyRewardConfig',
  type: 'function',
  inputs: [],
  outputs: [{
    name: 'flowersPer500Sm',
    type: 'uint256'
  }, {
    name: 'maxDailyFlowersPerUser',
    type: 'uint256'
  }, {
    name: 'dailyClaimInterval',
    type: 'uint256'
  }],
  stateMutability: 'view'
}]);
function useDailyReward(refreshKey =
/* istanbul ignore next */
(cov_2ih9zencbd().b[0][0]++, 0)) {
  /* istanbul ignore next */
  cov_2ih9zencbd().f[5]++;
  const {
    address,
    isConnected
  } =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[12]++, (0, _wagmi.useAccount)());
  const supabase =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[13]++, (0, _authhelpersreact.useSupabaseClient)());
  const [isLoadingData, setIsLoadingData] =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[14]++, (0, _react.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[15]++, (0, _react.useState)(null));
  const [refetchKey, setRefetchKey] =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[16]++, (0, _react.useState)(0));
  const [dailyStats, setDailyStats] =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[17]++, (0, _react.useState)(null));
  const [leaderboard, setLeaderboard] =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[18]++, (0, _react.useState)([]));
  const smTokenExchangeAddress =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[19]++, process.env.NEXT_PUBLIC_SM_TOKEN_EXCHANGE_ADDRESS);
  // 合约读取配置
  const contractReads =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[20]++, (0, _wagmi.useContractReads)({
    contracts: [
    // 获取用户每日奖励信息
    ...(
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[2][0]++, isConnected) &&
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[2][1]++, address) ?
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[1][0]++, [{
      address: smTokenExchangeAddress,
      abi: SM_TOKEN_EXCHANGE_ABI,
      functionName: 'getUserDailyRewardInfo',
      args: [address]
    }]) :
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[1][1]++, [])),
    // 获取每日奖励配置
    {
      address: smTokenExchangeAddress,
      abi: SM_TOKEN_EXCHANGE_ABI,
      functionName: 'getDailyRewardConfig'
    }],
    watch: true,
    cacheTime: 10000,
    staleTime: 5000,
    enabled: !!smTokenExchangeAddress,
    onError: error => {
      /* istanbul ignore next */
      cov_2ih9zencbd().f[6]++;
      cov_2ih9zencbd().s[21]++;
      console.error('Contract read error:', error);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[22]++;
      setError(error.message);
    }
  }));
  // 解析合约数据
  const parseContractData =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[23]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[7]++;
    cov_2ih9zencbd().s[24]++;
    if (!contractReads.data) {
      /* istanbul ignore next */
      cov_2ih9zencbd().b[3][0]++;
      cov_2ih9zencbd().s[25]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2ih9zencbd().b[3][1]++;
    }
    cov_2ih9zencbd().s[26]++;
    try {
      const [userRewardResult, configResult] =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[27]++, contractReads.data);
      // 解析用户奖励信息
      const userRewardInfo =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[28]++, userRewardResult?.status === 'success' ?
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[4][0]++, {
        smBalance: userRewardResult.result[0],
        dailyFlowers: Number(userRewardResult.result[1]),
        canClaim: userRewardResult.result[2],
        nextClaimTime: Number(userRewardResult.result[3]),
        totalClaimed: Number(userRewardResult.result[4])
      }) :
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[4][1]++, null));
      /* istanbul ignore next */
      cov_2ih9zencbd().s[29]++;
      return {
        userRewardInfo
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2ih9zencbd().s[30]++;
      console.error('Parse contract data error:', error);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[31]++;
      setError('Failed to parse contract data');
      /* istanbul ignore next */
      cov_2ih9zencbd().s[32]++;
      return null;
    }
  }, [contractReads.data]));
  // 从数据库获取统计数据
  const fetchDatabaseData =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[33]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[8]++;
    cov_2ih9zencbd().s[34]++;
    try {
      // 获取今日统计数据
      const {
        data: todayStats,
        error: statsError
      } =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[35]++, await supabase.from('daily_reward_overview').select('*').eq('claim_date', new Date().toISOString().split('T')[0]).single());
      /* istanbul ignore next */
      cov_2ih9zencbd().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[6][0]++, statsError) &&
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[6][1]++, statsError.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_2ih9zencbd().b[5][0]++;
        cov_2ih9zencbd().s[37]++;
        console.error('Database stats query error:', statsError);
      } else
      /* istanbul ignore next */
      {
        cov_2ih9zencbd().b[5][1]++;
      }
      // 获取排行榜数据
      const {
        data: leaderboardData,
        error: leaderboardError
      } =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[38]++, await supabase.from('current_daily_leaderboard').select('*').order('rank', {
        ascending: true
      }).limit(20));
      /* istanbul ignore next */
      cov_2ih9zencbd().s[39]++;
      if (leaderboardError) {
        /* istanbul ignore next */
        cov_2ih9zencbd().b[7][0]++;
        cov_2ih9zencbd().s[40]++;
        console.error('Database leaderboard query error:', leaderboardError);
      } else
      /* istanbul ignore next */
      {
        cov_2ih9zencbd().b[7][1]++;
      }
      // 设置统计数据
      cov_2ih9zencbd().s[41]++;
      if (todayStats) {
        /* istanbul ignore next */
        cov_2ih9zencbd().b[8][0]++;
        cov_2ih9zencbd().s[42]++;
        setDailyStats({
          totalClaimers:
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[9][0]++, todayStats.total_claimers) ||
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[9][1]++, 0),
          totalFlowersDistributed: parseFloat(
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[10][0]++, todayStats.total_flowers_distributed) ||
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[10][1]++, '0')),
          averageFlowersPerUser: parseFloat(
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[11][0]++, todayStats.average_flowers_per_user) ||
          /* istanbul ignore next */
          (cov_2ih9zencbd().b[11][1]++, '0'))
        });
      } else
      /* istanbul ignore next */
      {
        cov_2ih9zencbd().b[8][1]++;
      }
      // 设置排行榜数据
      cov_2ih9zencbd().s[43]++;
      if (leaderboardData) {
        /* istanbul ignore next */
        cov_2ih9zencbd().b[12][0]++;
        cov_2ih9zencbd().s[44]++;
        setLeaderboard(leaderboardData.map(item => {
          /* istanbul ignore next */
          cov_2ih9zencbd().f[9]++;
          cov_2ih9zencbd().s[45]++;
          return {
            rank: item.rank,
            wallet: item.user_wallet,
            username: item.username,
            smBalance: parseFloat(
            /* istanbul ignore next */
            (cov_2ih9zencbd().b[13][0]++, item.sm_balance) ||
            /* istanbul ignore next */
            (cov_2ih9zencbd().b[13][1]++, '0')),
            flowersAmount: parseFloat(
            /* istanbul ignore next */
            (cov_2ih9zencbd().b[14][0]++, item.flowers_claimed) ||
            /* istanbul ignore next */
            (cov_2ih9zencbd().b[14][1]++, '0'))
          };
        }));
      } else
      /* istanbul ignore next */
      {
        cov_2ih9zencbd().b[12][1]++;
      }
      cov_2ih9zencbd().s[46]++;
      return {
        todayStats,
        leaderboardData
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2ih9zencbd().s[47]++;
      console.error('Database fetch error:', error);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[48]++;
      return null;
    }
  }, [supabase]));
  // 检查用户是否可以领取奖励（数据库验证）
  const checkCanClaimFromDatabase =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[49]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[10]++;
    cov_2ih9zencbd().s[50]++;
    if (!address) {
      /* istanbul ignore next */
      cov_2ih9zencbd().b[15][0]++;
      cov_2ih9zencbd().s[51]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2ih9zencbd().b[15][1]++;
    }
    cov_2ih9zencbd().s[52]++;
    try {
      const {
        data: canClaim
      } =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[53]++, await supabase.rpc('can_claim_daily_reward', {
        p_user_wallet: address,
        p_claim_date: new Date().toISOString().split('T')[0]
      }));
      /* istanbul ignore next */
      cov_2ih9zencbd().s[54]++;
      return canClaim;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ih9zencbd().s[55]++;
      console.error('Database claim check error:', error);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[56]++;
      return true; // 默认允许领取，由合约进行最终验证
    }
  }, [address, supabase]));
  // 获取用户连续领取天数
  const getUserStreak =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[57]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[11]++;
    cov_2ih9zencbd().s[58]++;
    if (!address) {
      /* istanbul ignore next */
      cov_2ih9zencbd().b[16][0]++;
      cov_2ih9zencbd().s[59]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2ih9zencbd().b[16][1]++;
    }
    cov_2ih9zencbd().s[60]++;
    try {
      const {
        data: streak
      } =
      /* istanbul ignore next */
      (cov_2ih9zencbd().s[61]++, await supabase.rpc('get_user_streak', {
        p_user_wallet: address
      }));
      /* istanbul ignore next */
      cov_2ih9zencbd().s[62]++;
      return /* istanbul ignore next */(cov_2ih9zencbd().b[17][0]++, streak) ||
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[17][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ih9zencbd().s[63]++;
      console.error('Database streak query error:', error);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[64]++;
      return 0;
    }
  }, [address, supabase]));
  // 主要数据获取效果
  /* istanbul ignore next */
  cov_2ih9zencbd().s[65]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[12]++;
    cov_2ih9zencbd().s[66]++;
    const loadData = async () => {
      /* istanbul ignore next */
      cov_2ih9zencbd().f[13]++;
      cov_2ih9zencbd().s[67]++;
      setIsLoadingData(true);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[68]++;
      setError(null);
      /* istanbul ignore next */
      cov_2ih9zencbd().s[69]++;
      try {
        /* istanbul ignore next */
        cov_2ih9zencbd().s[70]++;
        // 等待合约数据
        if (contractReads.isLoading) {
          /* istanbul ignore next */
          cov_2ih9zencbd().b[18][0]++;
          cov_2ih9zencbd().s[71]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_2ih9zencbd().b[18][1]++;
        }
        // 获取数据库数据
        cov_2ih9zencbd().s[72]++;
        await Promise.all([fetchDatabaseData(), checkCanClaimFromDatabase(), getUserStreak()]);
      } catch (error) {
        /* istanbul ignore next */
        cov_2ih9zencbd().s[73]++;
        console.error('Load data error:', error);
        /* istanbul ignore next */
        cov_2ih9zencbd().s[74]++;
        setError(
        /* istanbul ignore next */
        (cov_2ih9zencbd().b[19][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_2ih9zencbd().b[19][1]++, 'Failed to load data'));
      } finally {
        /* istanbul ignore next */
        cov_2ih9zencbd().s[75]++;
        setIsLoadingData(false);
      }
    };
    /* istanbul ignore next */
    cov_2ih9zencbd().s[76]++;
    loadData();
  }, [contractReads.isLoading, fetchDatabaseData, checkCanClaimFromDatabase, getUserStreak, refreshKey, refetchKey]);
  // 手动刷新函数
  const refetch =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[77]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2ih9zencbd().f[14]++;
    cov_2ih9zencbd().s[78]++;
    setRefetchKey(prev => {
      /* istanbul ignore next */
      cov_2ih9zencbd().f[15]++;
      cov_2ih9zencbd().s[79]++;
      return prev + 1;
    });
    /* istanbul ignore next */
    cov_2ih9zencbd().s[80]++;
    contractReads.refetch();
  }, [contractReads]));
  // 解析最终数据
  const contractData =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[81]++, parseContractData());
  /* istanbul ignore next */
  cov_2ih9zencbd().s[82]++;
  return {
    userRewardInfo:
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[20][0]++, contractData?.userRewardInfo) ||
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[20][1]++, null),
    dailyStats,
    leaderboard,
    isLoadingData:
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[21][0]++, isLoadingData) ||
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[21][1]++, contractReads.isLoading),
    error:
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[22][0]++, error) ||
    /* istanbul ignore next */
    (cov_2ih9zencbd().b[22][1]++, contractReads.error?.message),
    refetch
  };
}
function formatRewardAmount(amount) {
  /* istanbul ignore next */
  cov_2ih9zencbd().f[16]++;
  cov_2ih9zencbd().s[83]++;
  if (amount >= 1000000) {
    /* istanbul ignore next */
    cov_2ih9zencbd().b[23][0]++;
    cov_2ih9zencbd().s[84]++;
    return (amount / 1000000).toFixed(1) + 'M';
  } else
  /* istanbul ignore next */
  {
    cov_2ih9zencbd().b[23][1]++;
  }
  cov_2ih9zencbd().s[85]++;
  if (amount >= 1000) {
    /* istanbul ignore next */
    cov_2ih9zencbd().b[24][0]++;
    cov_2ih9zencbd().s[86]++;
    return (amount / 1000).toFixed(1) + 'K';
  } else
  /* istanbul ignore next */
  {
    cov_2ih9zencbd().b[24][1]++;
  }
  cov_2ih9zencbd().s[87]++;
  return amount.toFixed(0);
}
function getRewardLevel(totalClaimed) {
  /* istanbul ignore next */
  cov_2ih9zencbd().f[17]++;
  const levels =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[88]++, [{
    threshold: 0,
    title: '新手'
  }, {
    threshold: 100,
    title: '初级'
  }, {
    threshold: 500,
    title: '中级'
  }, {
    threshold: 1000,
    title: '高级'
  }, {
    threshold: 2000,
    title: '专家'
  }, {
    threshold: 5000,
    title: '大师'
  }, {
    threshold: 10000,
    title: '传奇'
  }]);
  let currentLevel =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[89]++, 0);
  let currentTitle =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[90]++, levels[0].title);
  let nextThreshold =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[91]++, levels[1].threshold);
  /* istanbul ignore next */
  cov_2ih9zencbd().s[92]++;
  for (let i =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[93]++, 0); i < levels.length; i++) {
    /* istanbul ignore next */
    cov_2ih9zencbd().s[94]++;
    if (totalClaimed >= levels[i].threshold) {
      /* istanbul ignore next */
      cov_2ih9zencbd().b[25][0]++;
      cov_2ih9zencbd().s[95]++;
      currentLevel = i;
      /* istanbul ignore next */
      cov_2ih9zencbd().s[96]++;
      currentTitle = levels[i].title;
      /* istanbul ignore next */
      cov_2ih9zencbd().s[97]++;
      nextThreshold = i < levels.length - 1 ?
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[26][0]++, levels[i + 1].threshold) :
      /* istanbul ignore next */
      (cov_2ih9zencbd().b[26][1]++, levels[i].threshold);
    } else {
      /* istanbul ignore next */
      cov_2ih9zencbd().b[25][1]++;
      cov_2ih9zencbd().s[98]++;
      break;
    }
  }
  const progress =
  /* istanbul ignore next */
  (cov_2ih9zencbd().s[99]++, currentLevel === levels.length - 1 ?
  /* istanbul ignore next */
  (cov_2ih9zencbd().b[27][0]++, 100) :
  /* istanbul ignore next */
  (cov_2ih9zencbd().b[27][1]++, (totalClaimed - levels[currentLevel].threshold) / (nextThreshold - levels[currentLevel].threshold) * 100));
  /* istanbul ignore next */
  cov_2ih9zencbd().s[100]++;
  return {
    level: currentLevel,
    title: currentTitle,
    nextLevelThreshold: nextThreshold,
    progress: Math.min(progress, 100)
  };
}
function getRewardSuggestion(smBalance, dailyFlowers) {
  /* istanbul ignore next */
  cov_2ih9zencbd().f[18]++;
  cov_2ih9zencbd().s[101]++;
  if (smBalance === 0) {
    /* istanbul ignore next */
    cov_2ih9zencbd().b[28][0]++;
    cov_2ih9zencbd().s[102]++;
    return '购买 SM 代币开始获得每日奖励！';
  } else
  /* istanbul ignore next */
  {
    cov_2ih9zencbd().b[28][1]++;
  }
  cov_2ih9zencbd().s[103]++;
  if (smBalance < 500) {
    /* istanbul ignore next */
    cov_2ih9zencbd().b[29][0]++;
    cov_2ih9zencbd().s[104]++;
    return `再购买 ${500 - smBalance} SM 即可获得每日奖励！`;
  } else
  /* istanbul ignore next */
  {
    cov_2ih9zencbd().b[29][1]++;
  }
  cov_2ih9zencbd().s[105]++;
  if (dailyFlowers < 200) {
    /* istanbul ignore next */
    cov_2ih9zencbd().b[30][0]++;
    const neededSm =
    /* istanbul ignore next */
    (cov_2ih9zencbd().s[106]++, (200 - dailyFlowers) * 50); // 每10朵小红花需要500 SM
    /* istanbul ignore next */
    cov_2ih9zencbd().s[107]++;
    return `持有 ${neededSm} 更多 SM 可获得最大每日奖励！`;
  } else
  /* istanbul ignore next */
  {
    cov_2ih9zencbd().b[30][1]++;
  }
  cov_2ih9zencbd().s[108]++;
  return '您已达到最大每日奖励！';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,