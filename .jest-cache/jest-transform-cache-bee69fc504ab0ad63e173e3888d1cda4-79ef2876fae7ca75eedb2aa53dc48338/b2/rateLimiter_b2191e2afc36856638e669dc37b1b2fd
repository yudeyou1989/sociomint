99bbb18bc801fbb154dc83bb1d4b82fc
/**
 * API速率限制工具
 * 提供客户端和服务端的速率限制功能
 */ // 速率限制配置
"use strict";

/* istanbul ignore next */
function cov_601fqc283() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/utils/rateLimiter.ts";
  var hash = "6eb8dea0de59e2f22eaf8783ed69f320f641d577";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/utils/rateLimiter.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 34
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 34
        }
      },
      "7": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "8": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 30
        }
      },
      "9": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "10": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 28
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 29
        }
      },
      "12": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 31
        }
      },
      "13": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 29
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "15": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 27
        }
      },
      "16": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 30
        }
      },
      "17": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 42
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "19": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "20": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 43
        }
      },
      "21": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "22": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "23": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "24": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 48
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 23
        }
      },
      "27": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 36
        }
      },
      "28": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 87,
          column: 10
        }
      },
      "29": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 30
        }
      },
      "30": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "31": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "32": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 39
        }
      },
      "33": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 31
        }
      },
      "34": {
        start: {
          line: 104,
          column: 23
        },
        end: {
          line: 104,
          column: 42
        }
      },
      "35": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "36": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 110,
          column: 14
        }
      },
      "37": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "38": {
        start: {
          line: 119,
          column: 27
        },
        end: {
          line: 150,
          column: 1
        }
      },
      "39": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "40": {
        start: {
          line: 153,
          column: 23
        },
        end: {
          line: 158,
          column: 1
        }
      },
      "41": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "42": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 62
        }
      },
      "43": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 34
        }
      },
      "44": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 178,
          column: 1
        }
      },
      "45": {
        start: {
          line: 159,
          column: 55
        },
        end: {
          line: 159,
          column: 64
        }
      },
      "46": {
        start: {
          line: 160,
          column: 20
        },
        end: {
          line: 160,
          column: 48
        }
      },
      "47": {
        start: {
          line: 161,
          column: 23
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "48": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 34
        }
      },
      "49": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 34
        }
      },
      "50": {
        start: {
          line: 165,
          column: 22
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "51": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 34
        }
      },
      "52": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 38
        }
      },
      "53": {
        start: {
          line: 169,
          column: 18
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "54": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 34
        }
      },
      "55": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 27
        }
      },
      "56": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 177,
          column: 6
        }
      },
      "57": {
        start: {
          line: 179,
          column: 22
        },
        end: {
          line: 199,
          column: 1
        }
      },
      "58": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 53
        }
      },
      "59": {
        start: {
          line: 181,
          column: 19
        },
        end: {
          line: 181,
          column: 37
        }
      },
      "60": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "61": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 54
        }
      },
      "62": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 72
        }
      },
      "63": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "64": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 33
        }
      },
      "65": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "66": {
        start: {
          line: 191,
          column: 27
        },
        end: {
          line: 191,
          column: 49
        }
      },
      "67": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "68": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 61
        }
      },
      "69": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 47
        }
      },
      "70": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 20
        }
      },
      "71": {
        start: {
          line: 200,
          column: 28
        },
        end: {
          line: 229,
          column: 1
        }
      },
      "72": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 49
        }
      },
      "73": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 228,
          column: 6
        }
      },
      "74": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 121
        }
      },
      "75": {
        start: {
          line: 205,
          column: 23
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "76": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "77": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 67
        }
      },
      "78": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 69
        }
      },
      "79": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 89
        }
      },
      "80": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "81": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "82": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "83": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 51
        }
      },
      "84": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 47
        }
      },
      "85": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "86": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 19
        }
      },
      "87": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 20
        }
      },
      "88": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 31
        }
      },
      "89": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 30
        }
      },
      "90": {
        start: {
          line: 236,
          column: 26
        },
        end: {
          line: 236,
          column: 82
        }
      },
      "91": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "92": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 239,
          column: 60
        }
      },
      "93": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "94": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 88
        }
      },
      "95": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 244,
          column: 55
        }
      },
      "96": {
        start: {
          line: 245,
          column: 30
        },
        end: {
          line: 245,
          column: 69
        }
      },
      "97": {
        start: {
          line: 246,
          column: 30
        },
        end: {
          line: 246,
          column: 98
        }
      },
      "98": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 14
        }
      },
      "99": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 56
        }
      },
      "100": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "101": {
        start: {
          line: 265,
          column: 27
        },
        end: {
          line: 274,
          column: 1
        }
      },
      "102": {
        start: {
          line: 275,
          column: 17
        },
        end: {
          line: 284,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 19,
            column: 25
          }
        },
        loc: {
          start: {
            line: 19,
            column: 35
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 22,
            column: 25
          }
        },
        loc: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 13
          },
          end: {
            line: 25,
            column: 14
          }
        },
        loc: {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 28,
            column: 20
          },
          end: {
            line: 28,
            column: 21
          }
        },
        loc: {
          start: {
            line: 28,
            column: 31
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 26
          }
        },
        loc: {
          start: {
            line: 31,
            column: 36
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 19
          }
        },
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 20
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 37
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 43
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 47,
            column: 21
          }
        },
        loc: {
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 47
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 15
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 52
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 14
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 90
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 99
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 19
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 103
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 153,
            column: 23
          },
          end: {
            line: 153,
            column: 24
          }
        },
        loc: {
          start: {
            line: 153,
            column: 39
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 153
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 159,
            column: 22
          }
        },
        loc: {
          start: {
            line: 159,
            column: 67
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 159
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 159,
            column: 51
          },
          end: {
            line: 159,
            column: 52
          }
        },
        loc: {
          start: {
            line: 159,
            column: 55
          },
          end: {
            line: 159,
            column: 64
          }
        },
        line: 159
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 161,
            column: 23
          },
          end: {
            line: 161,
            column: 24
          }
        },
        loc: {
          start: {
            line: 161,
            column: 27
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 161
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 165,
            column: 22
          },
          end: {
            line: 165,
            column: 23
          }
        },
        loc: {
          start: {
            line: 165,
            column: 26
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 165
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 169,
            column: 18
          },
          end: {
            line: 169,
            column: 19
          }
        },
        loc: {
          start: {
            line: 169,
            column: 22
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 169
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 179,
            column: 22
          },
          end: {
            line: 179,
            column: 23
          }
        },
        loc: {
          start: {
            line: 179,
            column: 77
          },
          end: {
            line: 199,
            column: 1
          }
        },
        line: 179
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 200,
            column: 28
          },
          end: {
            line: 200,
            column: 29
          }
        },
        loc: {
          start: {
            line: 200,
            column: 38
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 200
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 202,
            column: 11
          },
          end: {
            line: 202,
            column: 12
          }
        },
        loc: {
          start: {
            line: 202,
            column: 29
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 202
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 24
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 231
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 19
          }
        }, {
          start: {
            line: 55,
            column: 23
          },
          end: {
            line: 55,
            column: 46
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 95,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "6": {
        loc: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "7": {
        loc: {
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 159,
            column: 51
          },
          end: {
            line: 159,
            column: 64
          }
        }],
        line: 159
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 59
          },
          end: {
            line: 179,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 179,
            column: 65
          },
          end: {
            line: 179,
            column: 74
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "10": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "11": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "12": {
        loc: {
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 204,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 42
          },
          end: {
            line: 204,
            column: 66
          }
        }, {
          start: {
            line: 204,
            column: 69
          },
          end: {
            line: 204,
            column: 121
          }
        }],
        line: 204
      },
      "13": {
        loc: {
          start: {
            line: 204,
            column: 69
          },
          end: {
            line: 204,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 69
          },
          end: {
            line: 204,
            column: 75
          }
        }, {
          start: {
            line: 204,
            column: 79
          },
          end: {
            line: 204,
            column: 108
          }
        }, {
          start: {
            line: 204,
            column: 112
          },
          end: {
            line: 204,
            column: 121
          }
        }],
        line: 204
      },
      "14": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "15": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "16": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: 220,
            column: 19
          },
          end: {
            line: 222,
            column: 13
          }
        }],
        line: 218
      },
      "17": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "18": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/utils/rateLimiter.ts"],
      sourcesContent: ["/**\n * API\u901F\u7387\u9650\u5236\u5DE5\u5177\n * \u63D0\u4F9B\u5BA2\u6237\u7AEF\u548C\u670D\u52A1\u7AEF\u7684\u901F\u7387\u9650\u5236\u529F\u80FD\n */\n\n// \u901F\u7387\u9650\u5236\u914D\u7F6E\nexport interface RateLimitConfig {\n  windowMs: number; // \u65F6\u95F4\u7A97\u53E3\uFF08\u6BEB\u79D2\uFF09\n  maxRequests: number; // \u6700\u5927\u8BF7\u6C42\u6570\n  keyGenerator?: (req?: any) => string; // \u952E\u751F\u6210\u5668\n  skipSuccessfulRequests?: boolean; // \u8DF3\u8FC7\u6210\u529F\u8BF7\u6C42\n  skipFailedRequests?: boolean; // \u8DF3\u8FC7\u5931\u8D25\u8BF7\u6C42\n  onLimitReached?: (key: string) => void; // \u8FBE\u5230\u9650\u5236\u65F6\u7684\u56DE\u8C03\n}\n\n// \u8BF7\u6C42\u8BB0\u5F55\ninterface RequestRecord {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\n// \u5185\u5B58\u5B58\u50A8\u7684\u901F\u7387\u9650\u5236\u5668\nclass MemoryRateLimiter {\n  private store = new Map<string, RequestRecord>();\n  private config: RateLimitConfig;\n\n  constructor(config: RateLimitConfig) {\n    this.config = config;\n    \n    // \u5B9A\u671F\u6E05\u7406\u8FC7\u671F\u8BB0\u5F55\n    setInterval(() => {\n      this.cleanup();\n    }, this.config.windowMs);\n  }\n\n  // \u68C0\u67E5\u662F\u5426\u8D85\u8FC7\u9650\u5236\n  check(key: string): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const record = this.store.get(key);\n\n    if (!record || now >= record.resetTime) {\n      // \u521B\u5EFA\u65B0\u8BB0\u5F55\u6216\u91CD\u7F6E\u8FC7\u671F\u8BB0\u5F55\n      const newRecord: RequestRecord = {\n        count: 1,\n        resetTime: now + this.config.windowMs,\n        firstRequest: now\n      };\n      this.store.set(key, newRecord);\n      \n      return {\n        allowed: true,\n        remaining: this.config.maxRequests - 1,\n        resetTime: newRecord.resetTime\n      };\n    }\n\n    // \u68C0\u67E5\u662F\u5426\u8D85\u8FC7\u9650\u5236\n    if (record.count >= this.config.maxRequests) {\n      if (this.config.onLimitReached) {\n        this.config.onLimitReached(key);\n      }\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: record.resetTime\n      };\n    }\n\n    // \u589E\u52A0\u8BA1\u6570\n    record.count++;\n    this.store.set(key, record);\n\n    return {\n      allowed: true,\n      remaining: this.config.maxRequests - record.count,\n      resetTime: record.resetTime\n    };\n  }\n\n  // \u6E05\u7406\u8FC7\u671F\u8BB0\u5F55\n  private cleanup() {\n    const now = Date.now();\n    for (const [key, record] of this.store.entries()) {\n      if (now >= record.resetTime) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  // \u91CD\u7F6E\u7279\u5B9A\u952E\u7684\u9650\u5236\n  reset(key: string) {\n    this.store.delete(key);\n  }\n\n  // \u83B7\u53D6\u5F53\u524D\u72B6\u6001\n  getStatus(key: string) {\n    const record = this.store.get(key);\n    if (!record) {\n      return {\n        count: 0,\n        remaining: this.config.maxRequests,\n        resetTime: Date.now() + this.config.windowMs\n      };\n    }\n\n    return {\n      count: record.count,\n      remaining: Math.max(0, this.config.maxRequests - record.count),\n      resetTime: record.resetTime\n    };\n  }\n}\n\n// \u9884\u5B9A\u4E49\u7684\u901F\u7387\u9650\u5236\u914D\u7F6E\nexport const RATE_LIMIT_CONFIGS = {\n  // \u4E25\u683C\u9650\u5236\uFF08\u767B\u5F55\u3001\u6CE8\u518C\u7B49\u654F\u611F\u64CD\u4F5C\uFF09\n  strict: {\n    windowMs: 15 * 60 * 1000, // 15\u5206\u949F\n    maxRequests: 5\n  },\n  \n  // \u4E2D\u7B49\u9650\u5236\uFF08API\u8C03\u7528\uFF09\n  moderate: {\n    windowMs: 60 * 1000, // 1\u5206\u949F\n    maxRequests: 30\n  },\n  \n  // \u5BBD\u677E\u9650\u5236\uFF08\u4E00\u822C\u8BF7\u6C42\uFF09\n  lenient: {\n    windowMs: 60 * 1000, // 1\u5206\u949F\n    maxRequests: 100\n  },\n  \n  // \u94B1\u5305\u8FDE\u63A5\u9650\u5236\n  walletConnect: {\n    windowMs: 5 * 60 * 1000, // 5\u5206\u949F\n    maxRequests: 10\n  },\n  \n  // \u4EA4\u6613\u63D0\u4EA4\u9650\u5236\n  transaction: {\n    windowMs: 60 * 1000, // 1\u5206\u949F\n    maxRequests: 5\n  },\n  \n  // \u793E\u4EA4\u4EFB\u52A1\u63D0\u4EA4\u9650\u5236\n  socialTask: {\n    windowMs: 60 * 1000, // 1\u5206\u949F\n    maxRequests: 3\n  }\n};\n\n// \u5168\u5C40\u901F\u7387\u9650\u5236\u5668\u5B9E\u4F8B\nconst rateLimiters = new Map<string, MemoryRateLimiter>();\n\n// \u83B7\u53D6\u6216\u521B\u5EFA\u901F\u7387\u9650\u5236\u5668\nexport const getRateLimiter = (name: string, config: RateLimitConfig): MemoryRateLimiter => {\n  if (!rateLimiters.has(name)) {\n    rateLimiters.set(name, new MemoryRateLimiter(config));\n  }\n  return rateLimiters.get(name)!;\n};\n\n// \u5BA2\u6237\u7AEF\u901F\u7387\u9650\u5236Hook\nexport const useRateLimit = (\n  name: string, \n  config: RateLimitConfig,\n  keyGenerator: () => string = () => 'default'\n) => {\n  const limiter = getRateLimiter(name, config);\n\n  const checkLimit = () => {\n    const key = keyGenerator();\n    return limiter.check(key);\n  };\n\n  const getStatus = () => {\n    const key = keyGenerator();\n    return limiter.getStatus(key);\n  };\n\n  const reset = () => {\n    const key = keyGenerator();\n    limiter.reset(key);\n  };\n\n  return {\n    checkLimit,\n    getStatus,\n    reset\n  };\n};\n\n// API\u8BF7\u6C42\u5305\u88C5\u5668\uFF0C\u81EA\u52A8\u5E94\u7528\u901F\u7387\u9650\u5236\nexport const withRateLimit = async <T>(\n  requestFn: () => Promise<T>,\n  limitName: string,\n  config: RateLimitConfig,\n  key: string = 'default'\n): Promise<T> => {\n  const limiter = getRateLimiter(limitName, config);\n  const result = limiter.check(key);\n\n  if (!result.allowed) {\n    const waitTime = result.resetTime - Date.now();\n    throw new Error(`\u8BF7\u6C42\u8FC7\u4E8E\u9891\u7E41\uFF0C\u8BF7\u5728 ${Math.ceil(waitTime / 1000)} \u79D2\u540E\u91CD\u8BD5`);\n  }\n\n  try {\n    return await requestFn();\n  } catch (error) {\n    // \u5982\u679C\u914D\u7F6E\u4E86\u8DF3\u8FC7\u5931\u8D25\u8BF7\u6C42\uFF0C\u5219\u51CF\u5C11\u8BA1\u6570\n    if (config.skipFailedRequests) {\n      const record = (limiter as any).store.get(key);\n      if (record) {\n        record.count = Math.max(0, record.count - 1);\n        (limiter as any).store.set(key, record);\n      }\n    }\n    throw error;\n  }\n};\n\n// \u4E2D\u95F4\u4EF6\u51FD\u6570\uFF08\u7528\u4E8EAPI\u8DEF\u7531\uFF09\nexport const rateLimitMiddleware = (config: RateLimitConfig) => {\n  const limiter = new MemoryRateLimiter(config);\n\n  return (req: any, res: any, next?: () => void) => {\n    // \u751F\u6210\u952E\uFF08\u53EF\u4EE5\u57FA\u4E8EIP\u3001\u7528\u6237ID\u7B49\uFF09\n    const key = config.keyGenerator \n      ? config.keyGenerator(req)\n      : req.ip || req.connection?.remoteAddress || 'unknown';\n\n    const result = limiter.check(key);\n\n    // \u8BBE\u7F6E\u54CD\u5E94\u5934\n    if (res.setHeader) {\n      res.setHeader('X-RateLimit-Limit', config.maxRequests);\n      res.setHeader('X-RateLimit-Remaining', result.remaining);\n      res.setHeader('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\n    }\n\n    if (!result.allowed) {\n      const error = {\n        error: 'Too Many Requests',\n        message: '\u8BF7\u6C42\u8FC7\u4E8E\u9891\u7E41\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5',\n        retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000)\n      };\n\n      if (res.status) {\n        return res.status(429).json(error);\n      } else {\n        throw new Error(error.message);\n      }\n    }\n\n    if (next) {\n      next();\n    }\n    return true;\n  };\n};\n\n// \u5206\u5E03\u5F0F\u901F\u7387\u9650\u5236\u5668\uFF08\u4F7F\u7528Redis\u7B49\u5916\u90E8\u5B58\u50A8\uFF09\nexport class DistributedRateLimiter {\n  private storage: any; // Redis\u5BA2\u6237\u7AEF\u6216\u5176\u4ED6\u5B58\u50A8\n\n  constructor(storage: any) {\n    this.storage = storage;\n  }\n\n  async check(key: string, config: RateLimitConfig) {\n    const now = Date.now();\n    const windowKey = `rate_limit:${key}:${Math.floor(now / config.windowMs)}`;\n\n    try {\n      // \u83B7\u53D6\u5F53\u524D\u7A97\u53E3\u7684\u8BF7\u6C42\u8BA1\u6570\n      const count = await this.storage.incr(windowKey);\n      \n      // \u8BBE\u7F6E\u8FC7\u671F\u65F6\u95F4\n      if (count === 1) {\n        await this.storage.expire(windowKey, Math.ceil(config.windowMs / 1000));\n      }\n\n      const allowed = count <= config.maxRequests;\n      const remaining = Math.max(0, config.maxRequests - count);\n      const resetTime = Math.ceil(now / config.windowMs) * config.windowMs + config.windowMs;\n\n      return {\n        allowed,\n        remaining,\n        resetTime,\n        count\n      };\n    } catch (error) {\n      console.error('Rate limiter error:', error);\n      // \u51FA\u9519\u65F6\u5141\u8BB8\u8BF7\u6C42\u901A\u8FC7\n      return {\n        allowed: true,\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        count: 0\n      };\n    }\n  }\n}\n\n// \u5BFC\u51FA\u5E38\u7528\u7684\u901F\u7387\u9650\u5236\u5668\nexport const commonRateLimiters = {\n  // \u94B1\u5305\u8FDE\u63A5\u9650\u5236\u5668\n  walletConnect: getRateLimiter('walletConnect', RATE_LIMIT_CONFIGS.walletConnect),\n  \n  // \u4EA4\u6613\u9650\u5236\u5668\n  transaction: getRateLimiter('transaction', RATE_LIMIT_CONFIGS.transaction),\n  \n  // \u793E\u4EA4\u4EFB\u52A1\u9650\u5236\u5668\n  socialTask: getRateLimiter('socialTask', RATE_LIMIT_CONFIGS.socialTask),\n  \n  // API\u8C03\u7528\u9650\u5236\u5668\n  apiCall: getRateLimiter('apiCall', RATE_LIMIT_CONFIGS.moderate)\n};\n\nexport default {\n  MemoryRateLimiter,\n  DistributedRateLimiter,\n  getRateLimiter,\n  useRateLimit,\n  withRateLimit,\n  rateLimitMiddleware,\n  commonRateLimiters,\n  RATE_LIMIT_CONFIGS\n};\n"],
      names: ["DistributedRateLimiter", "RATE_LIMIT_CONFIGS", "commonRateLimiters", "getRateLimiter", "rateLimitMiddleware", "useRateLimit", "withRateLimit", "MemoryRateLimiter", "constructor", "config", "store", "Map", "setInterval", "cleanup", "windowMs", "check", "key", "now", "Date", "record", "get", "resetTime", "newRecord", "count", "firstRequest", "set", "allowed", "remaining", "maxRequests", "onLimitReached", "entries", "delete", "reset", "getStatus", "Math", "max", "strict", "moderate", "lenient", "walletConnect", "transaction", "socialTask", "rateLimiters", "name", "has", "keyGenerator", "limiter", "checkLimit", "requestFn", "limitName", "result", "waitTime", "Error", "ceil", "error", "skipFailedRequests", "req", "res", "next", "ip", "connection", "remoteAddress", "setHeader", "toISOString", "message", "retryAfter", "status", "json", "storage", "windowKey", "floor", "incr", "expire", "console", "apiCall"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6eb8dea0de59e2f22eaf8783ed69f320f641d577"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_601fqc283 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_601fqc283();
cov_601fqc283().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_601fqc283().f[0]++;
  cov_601fqc283().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_601fqc283().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_601fqc283().s[3]++;
_export(exports, {
  DistributedRateLimiter: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[1]++;
    cov_601fqc283().s[4]++;
    return DistributedRateLimiter;
  },
  RATE_LIMIT_CONFIGS: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[2]++;
    cov_601fqc283().s[5]++;
    return RATE_LIMIT_CONFIGS;
  },
  commonRateLimiters: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[3]++;
    cov_601fqc283().s[6]++;
    return commonRateLimiters;
  },
  default: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[4]++;
    cov_601fqc283().s[7]++;
    return _default;
  },
  getRateLimiter: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[5]++;
    cov_601fqc283().s[8]++;
    return getRateLimiter;
  },
  rateLimitMiddleware: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[6]++;
    cov_601fqc283().s[9]++;
    return rateLimitMiddleware;
  },
  useRateLimit: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[7]++;
    cov_601fqc283().s[10]++;
    return useRateLimit;
  },
  withRateLimit: function () {
    /* istanbul ignore next */
    cov_601fqc283().f[8]++;
    cov_601fqc283().s[11]++;
    return withRateLimit;
  }
});
// 内存存储的速率限制器
class MemoryRateLimiter {
  constructor(config) {
    /* istanbul ignore next */
    cov_601fqc283().f[9]++;
    cov_601fqc283().s[12]++;
    this.store = new Map();
    /* istanbul ignore next */
    cov_601fqc283().s[13]++;
    this.config = config;
    // 定期清理过期记录
    /* istanbul ignore next */
    cov_601fqc283().s[14]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_601fqc283().f[10]++;
      cov_601fqc283().s[15]++;
      this.cleanup();
    }, this.config.windowMs);
  }
  // 检查是否超过限制
  check(key) {
    /* istanbul ignore next */
    cov_601fqc283().f[11]++;
    const now =
    /* istanbul ignore next */
    (cov_601fqc283().s[16]++, Date.now());
    const record =
    /* istanbul ignore next */
    (cov_601fqc283().s[17]++, this.store.get(key));
    /* istanbul ignore next */
    cov_601fqc283().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_601fqc283().b[1][0]++, !record) ||
    /* istanbul ignore next */
    (cov_601fqc283().b[1][1]++, now >= record.resetTime)) {
      /* istanbul ignore next */
      cov_601fqc283().b[0][0]++;
      // 创建新记录或重置过期记录
      const newRecord =
      /* istanbul ignore next */
      (cov_601fqc283().s[19]++, {
        count: 1,
        resetTime: now + this.config.windowMs,
        firstRequest: now
      });
      /* istanbul ignore next */
      cov_601fqc283().s[20]++;
      this.store.set(key, newRecord);
      /* istanbul ignore next */
      cov_601fqc283().s[21]++;
      return {
        allowed: true,
        remaining: this.config.maxRequests - 1,
        resetTime: newRecord.resetTime
      };
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[0][1]++;
    }
    // 检查是否超过限制
    cov_601fqc283().s[22]++;
    if (record.count >= this.config.maxRequests) {
      /* istanbul ignore next */
      cov_601fqc283().b[2][0]++;
      cov_601fqc283().s[23]++;
      if (this.config.onLimitReached) {
        /* istanbul ignore next */
        cov_601fqc283().b[3][0]++;
        cov_601fqc283().s[24]++;
        this.config.onLimitReached(key);
      } else
      /* istanbul ignore next */
      {
        cov_601fqc283().b[3][1]++;
      }
      cov_601fqc283().s[25]++;
      return {
        allowed: false,
        remaining: 0,
        resetTime: record.resetTime
      };
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[2][1]++;
    }
    // 增加计数
    cov_601fqc283().s[26]++;
    record.count++;
    /* istanbul ignore next */
    cov_601fqc283().s[27]++;
    this.store.set(key, record);
    /* istanbul ignore next */
    cov_601fqc283().s[28]++;
    return {
      allowed: true,
      remaining: this.config.maxRequests - record.count,
      resetTime: record.resetTime
    };
  }
  // 清理过期记录
  cleanup() {
    /* istanbul ignore next */
    cov_601fqc283().f[12]++;
    const now =
    /* istanbul ignore next */
    (cov_601fqc283().s[29]++, Date.now());
    /* istanbul ignore next */
    cov_601fqc283().s[30]++;
    for (const [key, record] of this.store.entries()) {
      /* istanbul ignore next */
      cov_601fqc283().s[31]++;
      if (now >= record.resetTime) {
        /* istanbul ignore next */
        cov_601fqc283().b[4][0]++;
        cov_601fqc283().s[32]++;
        this.store.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_601fqc283().b[4][1]++;
      }
    }
  }
  // 重置特定键的限制
  reset(key) {
    /* istanbul ignore next */
    cov_601fqc283().f[13]++;
    cov_601fqc283().s[33]++;
    this.store.delete(key);
  }
  // 获取当前状态
  getStatus(key) {
    /* istanbul ignore next */
    cov_601fqc283().f[14]++;
    const record =
    /* istanbul ignore next */
    (cov_601fqc283().s[34]++, this.store.get(key));
    /* istanbul ignore next */
    cov_601fqc283().s[35]++;
    if (!record) {
      /* istanbul ignore next */
      cov_601fqc283().b[5][0]++;
      cov_601fqc283().s[36]++;
      return {
        count: 0,
        remaining: this.config.maxRequests,
        resetTime: Date.now() + this.config.windowMs
      };
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[5][1]++;
    }
    cov_601fqc283().s[37]++;
    return {
      count: record.count,
      remaining: Math.max(0, this.config.maxRequests - record.count),
      resetTime: record.resetTime
    };
  }
}
const RATE_LIMIT_CONFIGS =
/* istanbul ignore next */
(cov_601fqc283().s[38]++, {
  // 严格限制（登录、注册等敏感操作）
  strict: {
    windowMs: 15 * 60 * 1000,
    maxRequests: 5
  },
  // 中等限制（API调用）
  moderate: {
    windowMs: 60 * 1000,
    maxRequests: 30
  },
  // 宽松限制（一般请求）
  lenient: {
    windowMs: 60 * 1000,
    maxRequests: 100
  },
  // 钱包连接限制
  walletConnect: {
    windowMs: 5 * 60 * 1000,
    maxRequests: 10
  },
  // 交易提交限制
  transaction: {
    windowMs: 60 * 1000,
    maxRequests: 5
  },
  // 社交任务提交限制
  socialTask: {
    windowMs: 60 * 1000,
    maxRequests: 3
  }
});
// 全局速率限制器实例
const rateLimiters =
/* istanbul ignore next */
(cov_601fqc283().s[39]++, new Map());
/* istanbul ignore next */
cov_601fqc283().s[40]++;
const getRateLimiter = (name, config) => {
  /* istanbul ignore next */
  cov_601fqc283().f[15]++;
  cov_601fqc283().s[41]++;
  if (!rateLimiters.has(name)) {
    /* istanbul ignore next */
    cov_601fqc283().b[6][0]++;
    cov_601fqc283().s[42]++;
    rateLimiters.set(name, new MemoryRateLimiter(config));
  } else
  /* istanbul ignore next */
  {
    cov_601fqc283().b[6][1]++;
  }
  cov_601fqc283().s[43]++;
  return rateLimiters.get(name);
};
/* istanbul ignore next */
cov_601fqc283().s[44]++;
const useRateLimit = (name, config, keyGenerator =
/* istanbul ignore next */
(cov_601fqc283().b[7][0]++, () => {
  /* istanbul ignore next */
  cov_601fqc283().f[17]++;
  cov_601fqc283().s[45]++;
  return 'default';
})) => {
  /* istanbul ignore next */
  cov_601fqc283().f[16]++;
  const limiter =
  /* istanbul ignore next */
  (cov_601fqc283().s[46]++, getRateLimiter(name, config));
  /* istanbul ignore next */
  cov_601fqc283().s[47]++;
  const checkLimit = () => {
    /* istanbul ignore next */
    cov_601fqc283().f[18]++;
    const key =
    /* istanbul ignore next */
    (cov_601fqc283().s[48]++, keyGenerator());
    /* istanbul ignore next */
    cov_601fqc283().s[49]++;
    return limiter.check(key);
  };
  /* istanbul ignore next */
  cov_601fqc283().s[50]++;
  const getStatus = () => {
    /* istanbul ignore next */
    cov_601fqc283().f[19]++;
    const key =
    /* istanbul ignore next */
    (cov_601fqc283().s[51]++, keyGenerator());
    /* istanbul ignore next */
    cov_601fqc283().s[52]++;
    return limiter.getStatus(key);
  };
  /* istanbul ignore next */
  cov_601fqc283().s[53]++;
  const reset = () => {
    /* istanbul ignore next */
    cov_601fqc283().f[20]++;
    const key =
    /* istanbul ignore next */
    (cov_601fqc283().s[54]++, keyGenerator());
    /* istanbul ignore next */
    cov_601fqc283().s[55]++;
    limiter.reset(key);
  };
  /* istanbul ignore next */
  cov_601fqc283().s[56]++;
  return {
    checkLimit,
    getStatus,
    reset
  };
};
/* istanbul ignore next */
cov_601fqc283().s[57]++;
const withRateLimit = async (requestFn, limitName, config, key =
/* istanbul ignore next */
(cov_601fqc283().b[8][0]++, 'default')) => {
  /* istanbul ignore next */
  cov_601fqc283().f[21]++;
  const limiter =
  /* istanbul ignore next */
  (cov_601fqc283().s[58]++, getRateLimiter(limitName, config));
  const result =
  /* istanbul ignore next */
  (cov_601fqc283().s[59]++, limiter.check(key));
  /* istanbul ignore next */
  cov_601fqc283().s[60]++;
  if (!result.allowed) {
    /* istanbul ignore next */
    cov_601fqc283().b[9][0]++;
    const waitTime =
    /* istanbul ignore next */
    (cov_601fqc283().s[61]++, result.resetTime - Date.now());
    /* istanbul ignore next */
    cov_601fqc283().s[62]++;
    throw new Error(`请求过于频繁，请在 ${Math.ceil(waitTime / 1000)} 秒后重试`);
  } else
  /* istanbul ignore next */
  {
    cov_601fqc283().b[9][1]++;
  }
  cov_601fqc283().s[63]++;
  try {
    /* istanbul ignore next */
    cov_601fqc283().s[64]++;
    return await requestFn();
  } catch (error) {
    /* istanbul ignore next */
    cov_601fqc283().s[65]++;
    // 如果配置了跳过失败请求，则减少计数
    if (config.skipFailedRequests) {
      /* istanbul ignore next */
      cov_601fqc283().b[10][0]++;
      const record =
      /* istanbul ignore next */
      (cov_601fqc283().s[66]++, limiter.store.get(key));
      /* istanbul ignore next */
      cov_601fqc283().s[67]++;
      if (record) {
        /* istanbul ignore next */
        cov_601fqc283().b[11][0]++;
        cov_601fqc283().s[68]++;
        record.count = Math.max(0, record.count - 1);
        /* istanbul ignore next */
        cov_601fqc283().s[69]++;
        limiter.store.set(key, record);
      } else
      /* istanbul ignore next */
      {
        cov_601fqc283().b[11][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[10][1]++;
    }
    cov_601fqc283().s[70]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_601fqc283().s[71]++;
const rateLimitMiddleware = config => {
  /* istanbul ignore next */
  cov_601fqc283().f[22]++;
  const limiter =
  /* istanbul ignore next */
  (cov_601fqc283().s[72]++, new MemoryRateLimiter(config));
  /* istanbul ignore next */
  cov_601fqc283().s[73]++;
  return (req, res, next) => {
    /* istanbul ignore next */
    cov_601fqc283().f[23]++;
    // 生成键（可以基于IP、用户ID等）
    const key =
    /* istanbul ignore next */
    (cov_601fqc283().s[74]++, config.keyGenerator ?
    /* istanbul ignore next */
    (cov_601fqc283().b[12][0]++, config.keyGenerator(req)) :
    /* istanbul ignore next */
    (cov_601fqc283().b[12][1]++,
    /* istanbul ignore next */
    (cov_601fqc283().b[13][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_601fqc283().b[13][1]++, req.connection?.remoteAddress) ||
    /* istanbul ignore next */
    (cov_601fqc283().b[13][2]++, 'unknown')));
    const result =
    /* istanbul ignore next */
    (cov_601fqc283().s[75]++, limiter.check(key));
    // 设置响应头
    /* istanbul ignore next */
    cov_601fqc283().s[76]++;
    if (res.setHeader) {
      /* istanbul ignore next */
      cov_601fqc283().b[14][0]++;
      cov_601fqc283().s[77]++;
      res.setHeader('X-RateLimit-Limit', config.maxRequests);
      /* istanbul ignore next */
      cov_601fqc283().s[78]++;
      res.setHeader('X-RateLimit-Remaining', result.remaining);
      /* istanbul ignore next */
      cov_601fqc283().s[79]++;
      res.setHeader('X-RateLimit-Reset', new Date(result.resetTime).toISOString());
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[14][1]++;
    }
    cov_601fqc283().s[80]++;
    if (!result.allowed) {
      /* istanbul ignore next */
      cov_601fqc283().b[15][0]++;
      const error =
      /* istanbul ignore next */
      (cov_601fqc283().s[81]++, {
        error: 'Too Many Requests',
        message: '请求过于频繁，请稍后重试',
        retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000)
      });
      /* istanbul ignore next */
      cov_601fqc283().s[82]++;
      if (res.status) {
        /* istanbul ignore next */
        cov_601fqc283().b[16][0]++;
        cov_601fqc283().s[83]++;
        return res.status(429).json(error);
      } else {
        /* istanbul ignore next */
        cov_601fqc283().b[16][1]++;
        cov_601fqc283().s[84]++;
        throw new Error(error.message);
      }
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[15][1]++;
    }
    cov_601fqc283().s[85]++;
    if (next) {
      /* istanbul ignore next */
      cov_601fqc283().b[17][0]++;
      cov_601fqc283().s[86]++;
      next();
    } else
    /* istanbul ignore next */
    {
      cov_601fqc283().b[17][1]++;
    }
    cov_601fqc283().s[87]++;
    return true;
  };
};
class DistributedRateLimiter {
  constructor(storage) {
    /* istanbul ignore next */
    cov_601fqc283().f[24]++;
    cov_601fqc283().s[88]++;
    this.storage = storage;
  }
  async check(key, config) {
    /* istanbul ignore next */
    cov_601fqc283().f[25]++;
    const now =
    /* istanbul ignore next */
    (cov_601fqc283().s[89]++, Date.now());
    const windowKey =
    /* istanbul ignore next */
    (cov_601fqc283().s[90]++, `rate_limit:${key}:${Math.floor(now / config.windowMs)}`);
    /* istanbul ignore next */
    cov_601fqc283().s[91]++;
    try {
      // 获取当前窗口的请求计数
      const count =
      /* istanbul ignore next */
      (cov_601fqc283().s[92]++, await this.storage.incr(windowKey));
      // 设置过期时间
      /* istanbul ignore next */
      cov_601fqc283().s[93]++;
      if (count === 1) {
        /* istanbul ignore next */
        cov_601fqc283().b[18][0]++;
        cov_601fqc283().s[94]++;
        await this.storage.expire(windowKey, Math.ceil(config.windowMs / 1000));
      } else
      /* istanbul ignore next */
      {
        cov_601fqc283().b[18][1]++;
      }
      const allowed =
      /* istanbul ignore next */
      (cov_601fqc283().s[95]++, count <= config.maxRequests);
      const remaining =
      /* istanbul ignore next */
      (cov_601fqc283().s[96]++, Math.max(0, config.maxRequests - count));
      const resetTime =
      /* istanbul ignore next */
      (cov_601fqc283().s[97]++, Math.ceil(now / config.windowMs) * config.windowMs + config.windowMs);
      /* istanbul ignore next */
      cov_601fqc283().s[98]++;
      return {
        allowed,
        remaining,
        resetTime,
        count
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_601fqc283().s[99]++;
      console.error('Rate limiter error:', error);
      // 出错时允许请求通过
      /* istanbul ignore next */
      cov_601fqc283().s[100]++;
      return {
        allowed: true,
        remaining: config.maxRequests,
        resetTime: now + config.windowMs,
        count: 0
      };
    }
  }
}
const commonRateLimiters =
/* istanbul ignore next */
(cov_601fqc283().s[101]++, {
  // 钱包连接限制器
  walletConnect: getRateLimiter('walletConnect', RATE_LIMIT_CONFIGS.walletConnect),
  // 交易限制器
  transaction: getRateLimiter('transaction', RATE_LIMIT_CONFIGS.transaction),
  // 社交任务限制器
  socialTask: getRateLimiter('socialTask', RATE_LIMIT_CONFIGS.socialTask),
  // API调用限制器
  apiCall: getRateLimiter('apiCall', RATE_LIMIT_CONFIGS.moderate)
});
const _default =
/* istanbul ignore next */
(cov_601fqc283().s[102]++, {
  MemoryRateLimiter,
  DistributedRateLimiter,
  getRateLimiter,
  useRateLimit,
  withRateLimit,
  rateLimitMiddleware,
  commonRateLimiters,
  RATE_LIMIT_CONFIGS
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,