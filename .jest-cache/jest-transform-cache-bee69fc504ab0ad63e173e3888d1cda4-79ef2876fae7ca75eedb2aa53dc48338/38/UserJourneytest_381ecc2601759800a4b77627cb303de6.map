{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/e2e/UserJourney.test.tsx"],"sourcesContent":["/**\n * 端到端用户旅程测试\n * 测试完整的用户交互流程\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// Mock App component since the actual App.tsx doesn't exist in this structure\nconst MockApp = () => {\n  return (\n    <div data-testid=\"app\">\n      <header data-testid=\"header\">\n        <h1>SocioMint</h1>\n        <button data-testid=\"connect-wallet\">Connect Wallet</button>\n      </header>\n      <main data-testid=\"main\">\n        <div data-testid=\"exchange-section\">\n          <h2>Token Exchange</h2>\n          <input data-testid=\"bnb-input\" placeholder=\"BNB Amount\" />\n          <button data-testid=\"exchange-button\">Exchange</button>\n        </div>\n        <div data-testid=\"balance-section\">\n          <div data-testid=\"sm-balance\">SM Balance: 100</div>\n          <div data-testid=\"bnb-balance\">BNB Balance: 5.0</div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\n// 模拟完整的应用环境\nconst mockEthereum = {\n  request: jest.fn(),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n};\n\nconst mockContract = {\n  // Token contract methods\n  name: jest.fn().mockResolvedValue('SocioMint Token'),\n  symbol: jest.fn().mockResolvedValue('SM'),\n  decimals: jest.fn().mockResolvedValue(18),\n  balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n  hasRole: jest.fn().mockResolvedValue(false),\n  \n  // Exchange contract methods\n  getExchangeStats: jest.fn().mockResolvedValue({\n    totalTokensSold: BigInt('1000000000000000000000'),\n    totalTokensRemaining: BigInt('9000000000000000000000'),\n    totalBnbRaised: BigInt('100000000000000000000'),\n    currentPrice: BigInt('833000000000'),\n    nextRoundPrice: BigInt('974900000000'),\n    isActive: true,\n    currentRound: 0,\n  }),\n  exchangeTokens: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  getUserData: jest.fn().mockResolvedValue({\n    totalPurchased: BigInt('50000000000000000000'),\n    lastPurchaseTime: BigInt('1640995200'),\n    isVerified: true,\n  }),\n  isUserVerified: jest.fn().mockResolvedValue(true),\n  minPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000')),\n  maxPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000000')),\n  \n  // Transaction history\n  queryFilter: jest.fn().mockResolvedValue([\n    {\n      args: {\n        buyer: '0x123456789abcdef',\n        bnbAmount: BigInt('1000000000000000000'),\n        tokenAmount: BigInt('1200000000000000000000'),\n        timestamp: 1640995200n,\n        round: 0n,\n        price: BigInt('833000000000'),\n      },\n      blockNumber: 12345,\n      transactionHash: '0xabcdef123456789',\n    }\n  ]),\n  filters: {\n    TokensExchanged: jest.fn().mockReturnValue({}),\n  },\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('5000000000000000000')), // 5 BNB\n  getNetwork: jest.fn().mockResolvedValue({ chainId: 97n, name: 'bsc-testnet' }),\n  send: jest.fn().mockResolvedValue(['0x123456789abcdef123456789abcdef123456789a']),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation(() => mockContract),\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  formatUnits: jest.fn().mockImplementation((value, decimals) => {\n    return (Number(value) / Math.pow(10, decimals)).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n}));\n\n// 模拟 Next.js 路由\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n  }),\n  usePathname: () => '/',\n  useSearchParams: () => new URLSearchParams(),\n}));\n\ndescribe('End-to-End User Journey Tests', () => {\n  const user = userEvent.setup();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 设置默认的 ethereum 响应\n    mockEthereum.request.mockImplementation((params) => {\n      if (params.method === 'eth_requestAccounts') {\n        return Promise.resolve(['0x123456789abcdef123456789abcdef123456789a']);\n      }\n      if (params.method === 'wallet_switchEthereumChain') {\n        return Promise.resolve();\n      }\n      return Promise.resolve();\n    });\n    \n    // 模拟 window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: mockEthereum,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  describe('Complete User Journey: From Landing to Token Purchase', () => {\n    it('should complete full user journey successfully', async () => {\n      render(<MockApp />);\n\n      // 1. 用户访问首页\n      expect(screen.getByText('SocioMint')).toBeInTheDocument();\n      expect(screen.getByTestId('connect-wallet')).toBeInTheDocument();\n\n      // 2. 连接钱包\n      const connectButton = screen.getByTestId('connect-wallet');\n      await user.click(connectButton);\n\n      // 模拟钱包连接成功\n      expect(connectButton).toBeInTheDocument();\n\n      // 3. 验证应用界面元素\n      expect(screen.getByTestId('exchange-section')).toBeInTheDocument();\n      expect(screen.getByTestId('balance-section')).toBeInTheDocument();\n\n      // 4. 查看用户余额\n      expect(screen.getByTestId('sm-balance')).toHaveTextContent('SM Balance: 100');\n      expect(screen.getByTestId('bnb-balance')).toHaveTextContent('BNB Balance: 5.0');\n\n      // 5. 测试交换功能\n      const bnbInput = screen.getByTestId('bnb-input');\n      await user.clear(bnbInput);\n      await user.type(bnbInput, '1.0');\n\n      // 6. 执行购买\n      const exchangeButton = screen.getByTestId('exchange-button');\n      await user.click(purchaseButton);\n\n      // 10. 确认交易\n      await waitFor(() => {\n        expect(mockContract.exchangeTokens).toHaveBeenCalledWith({\n          value: expect.any(BigInt)\n        });\n      });\n\n      // 11. 等待交易确认\n      await waitFor(() => {\n        expect(screen.getByText(/交易成功/)).toBeInTheDocument();\n      });\n\n      // 12. 查看更新后的余额\n      await waitFor(() => {\n        expect(mockContract.balanceOf).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle wallet connection errors gracefully', async () => {\n      // 模拟用户拒绝连接\n      mockEthereum.request.mockRejectedValue(new Error('User rejected the request'));\n\n      render(<App />);\n\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('连接钱包')).toBeInTheDocument();\n        // 应该显示错误信息或保持未连接状态\n      });\n    });\n\n    it('should handle insufficient balance scenario', async () => {\n      // 模拟余额不足\n      mockProvider.getBalance.mockResolvedValue(BigInt('100000000000000000')); // 0.1 BNB\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 尝试购买超过余额的金额\n      const exchangeLink = screen.getByText('代币兑换');\n      await user.click(exchangeLink);\n\n      const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n      await user.clear(bnbInput);\n      await user.type(bnbInput, '1.0');\n\n      const purchaseButton = screen.getByText('购买代币');\n      await user.click(purchaseButton);\n\n      // 应该显示余额不足的错误\n      await waitFor(() => {\n        expect(screen.getByText(/余额不足/)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle network switching', async () => {\n      // 模拟错误的网络\n      mockProvider.getNetwork.mockResolvedValue({ chainId: 1n, name: 'mainnet' });\n\n      render(<App />);\n\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      // 应该提示切换网络\n      await waitFor(() => {\n        expect(screen.getByText(/请切换到 BSC 测试网/)).toBeInTheDocument();\n      });\n\n      // 点击切换网络按钮\n      const switchNetworkButton = screen.getByText('切换网络');\n      await user.click(switchNetworkButton);\n\n      await waitFor(() => {\n        expect(mockEthereum.request).toHaveBeenCalledWith({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: '0x61' }], // BSC Testnet\n        });\n      });\n    });\n  });\n\n  describe('Transaction History Journey', () => {\n    it('should display transaction history correctly', async () => {\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交易历史\n      const historyLink = screen.getByText('交易历史');\n      await user.click(historyLink);\n\n      // 验证交易历史显示\n      await waitFor(() => {\n        expect(screen.getByText(/交易历史/)).toBeInTheDocument();\n        expect(mockContract.queryFilter).toHaveBeenCalled();\n      });\n\n      // 验证交易记录显示\n      await waitFor(() => {\n        expect(screen.getByText(/1.0 BNB/)).toBeInTheDocument();\n        expect(screen.getByText(/1,200 SM/)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle empty transaction history', async () => {\n      mockContract.queryFilter.mockResolvedValue([]);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交易历史\n      const historyLink = screen.getByText('交易历史');\n      await user.click(historyLink);\n\n      // 验证空状态显示\n      await waitFor(() => {\n        expect(screen.getByText(/暂无交易记录/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Admin Panel Journey', () => {\n    it('should handle admin access correctly', async () => {\n      // 模拟管理员权限\n      mockContract.hasRole.mockResolvedValue(true);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到管理员面板\n      const adminLink = screen.getByText('管理员');\n      await user.click(adminLink);\n\n      // 验证管理员面板显示\n      await waitFor(() => {\n        expect(screen.getByText(/管理员面板/)).toBeInTheDocument();\n        expect(screen.getByText(/验证用户/)).toBeInTheDocument();\n      });\n    });\n\n    it('should deny access for non-admin users', async () => {\n      // 模拟非管理员用户\n      mockContract.hasRole.mockResolvedValue(false);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 尝试访问管理员面板\n      const adminLink = screen.getByText('管理员');\n      await user.click(adminLink);\n\n      // 应该显示权限不足的消息\n      await waitFor(() => {\n        expect(screen.getByText(/权限不足/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Responsive Design Journey', () => {\n    it('should work correctly on mobile devices', async () => {\n      // 模拟移动设备视口\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 667,\n      });\n\n      render(<App />);\n\n      // 验证移动端布局\n      expect(screen.getByText('SocioMint')).toBeInTheDocument();\n      \n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 验证移动端导航\n      const menuButton = screen.getByRole('button', { name: /菜单/ });\n      await user.click(menuButton);\n\n      expect(screen.getByText('代币兑换')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Recovery Journey', () => {\n    it('should recover from network errors', async () => {\n      // 模拟网络错误\n      mockContract.getExchangeStats.mockRejectedValueOnce(new Error('Network error'));\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交换页面\n      const exchangeLink = screen.getByText('代币兑换');\n      await user.click(exchangeLink);\n\n      // 应该显示错误状态\n      await waitFor(() => {\n        expect(screen.getByText(/加载失败/)).toBeInTheDocument();\n      });\n\n      // 点击重试按钮\n      mockContract.getExchangeStats.mockResolvedValue({\n        totalTokensSold: BigInt('1000000000000000000000'),\n        totalTokensRemaining: BigInt('9000000000000000000000'),\n        totalBnbRaised: BigInt('100000000000000000000'),\n        currentPrice: BigInt('833000000000'),\n        nextRoundPrice: BigInt('974900000000'),\n        isActive: true,\n        currentRound: 0,\n      });\n\n      const retryButton = screen.getByText('重试');\n      await user.click(retryButton);\n\n      // 应该恢复正常显示\n      await waitFor(() => {\n        expect(screen.getByText(/已售出代币/)).toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","Contract","mockContract","formatEther","value","Number","toString","formatUnits","decimals","Math","pow","parseEther","BigInt","floor","parseFloat","useRouter","push","replace","back","usePathname","useSearchParams","URLSearchParams","MockApp","div","data-testid","header","h1","button","main","h2","input","placeholder","mockEthereum","request","on","removeListener","isMetaMask","name","mockResolvedValue","symbol","balanceOf","hasRole","getExchangeStats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","exchangeTokens","hash","wait","status","getUserData","totalPurchased","lastPurchaseTime","isVerified","isUserVerified","minPurchaseAmount","maxPurchaseAmount","queryFilter","args","buyer","bnbAmount","tokenAmount","timestamp","round","price","blockNumber","transactionHash","filters","TokensExchanged","mockReturnValue","getSigner","getAddress","getBalance","getNetwork","chainId","send","describe","user","userEvent","setup","beforeEach","clearAllMocks","params","method","Promise","resolve","Object","defineProperty","window","writable","configurable","it","render","expect","screen","getByText","toBeInTheDocument","getByTestId","connectButton","click","toHaveTextContent","bnbInput","clear","type","exchangeButton","purchaseButton","waitFor","toHaveBeenCalledWith","any","toHaveBeenCalled","mockRejectedValue","Error","App","exchangeLink","getByPlaceholderText","switchNetworkButton","historyLink","adminLink","menuButton","getByRole","mockRejectedValueOnce","retryButton"],"mappings":"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"}