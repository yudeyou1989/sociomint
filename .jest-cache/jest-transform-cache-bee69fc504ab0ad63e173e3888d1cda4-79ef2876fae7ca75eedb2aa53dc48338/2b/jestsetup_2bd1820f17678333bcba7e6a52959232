c71dd42fa80ba593bfd811f3e3ede3dd
// 导入测试库
"use strict";
// 模拟 Next.js 路由
jest.mock('next/router', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                pathname: '/',
                query: {},
                asPath: '/'
            })
    }));
// 模拟 Next.js 导航
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                pathname: '/',
                searchParams: new URLSearchParams()
            }),
        usePathname: ()=>'/',
        useSearchParams: ()=>new URLSearchParams()
    }));
// 模拟 Web3 相关
jest.mock('@wagmi/core', ()=>({
        useAccount: ()=>({
                address: undefined,
                isConnected: false
            }),
        useConnect: ()=>({
                connect: jest.fn(),
                connectors: []
            }),
        useDisconnect: ()=>({
                disconnect: jest.fn()
            }),
        useBalance: ()=>({
                data: undefined
            })
    }));
// 模拟 ethers
jest.mock('ethers', ()=>({
        ethers: {
            providers: {
                JsonRpcProvider: jest.fn()
            },
            Contract: jest.fn(),
            utils: {
                formatEther: jest.fn(),
                parseEther: jest.fn()
            }
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// 解决BigInt序列化问题
BigInt.prototype.toJSON = function() {
    return this.toString();
};
// 全局模拟
global.fetch = jest.fn();
// 模拟 window.ethereum (只在未定义时创建)
if (!window.ethereum) {
    Object.defineProperty(window, 'ethereum', {
        writable: true,
        configurable: true,
        value: {
            request: jest.fn(),
            on: jest.fn(),
            removeListener: jest.fn(),
            isMetaMask: true
        }
    });
}
// 模拟 ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// 模拟 IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// 模拟 matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// 模拟 localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// 模拟 sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// 模拟console.error以捕获React警告
const originalConsoleError = console.error;
console.error = (...args)=>{
    if (/Warning.*not wrapped in act/.test(args[0])) {
        return;
    }
    originalConsoleError(...args);
};

//# sourceMappingURL=data:application/json;base64,