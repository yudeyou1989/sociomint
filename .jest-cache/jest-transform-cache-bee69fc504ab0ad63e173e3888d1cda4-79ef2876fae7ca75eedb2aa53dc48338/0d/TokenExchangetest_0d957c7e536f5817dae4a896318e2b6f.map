{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/components/__tests__/exchange/TokenExchange.test.tsx"],"sourcesContent":["/**\n * 代币交换功能测试\n * 测试BNB与SM代币的交换功能\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { jest } from '@jest/globals';\n\n// Mock相关hooks和工具\njest.mock('@/hooks/useWallet', () => ({\n  useWallet: jest.fn()\n}));\n\njest.mock('@/hooks/useTokenExchange', () => ({\n  useTokenExchange: jest.fn()\n}));\n\njest.mock('@/utils/contractUtils', () => ({\n  getExchangeRate: jest.fn(),\n  executePurchase: jest.fn(),\n  getContractBalance: jest.fn()\n}));\n\n// Mock组件\nconst MockTokenExchange = () => {\n  const wallet = require('@/hooks/useWallet').useWallet();\n  const exchange = require('@/hooks/useTokenExchange').useTokenExchange();\n  \n  const [bnbAmount, setBnbAmount] = React.useState('');\n  const [smAmount, setSmAmount] = React.useState('');\n  \n  React.useEffect(() => {\n    if (bnbAmount && exchange.exchangeRate) {\n      const sm = (parseFloat(bnbAmount) * parseFloat(exchange.exchangeRate)).toString();\n      setSmAmount(sm);\n    }\n  }, [bnbAmount, exchange.exchangeRate]);\n  \n  if (!wallet.isConnected) {\n    return <div>请先连接钱包</div>;\n  }\n  \n  return (\n    <div>\n      <div>当前价格: {exchange.exchangeRate} SM/BNB</div>\n      <div>\n        <label>BNB数量:</label>\n        <input\n          type=\"number\"\n          value={bnbAmount}\n          onChange={(e) => setBnbAmount(e.target.value)}\n          placeholder=\"输入BNB数量\"\n        />\n      </div>\n      <div>\n        <label>将获得SM:</label>\n        <input\n          type=\"text\"\n          value={smAmount}\n          readOnly\n          placeholder=\"计算中...\"\n        />\n      </div>\n      <div>余额: {wallet.balance?.bnb} BNB</div>\n      <button\n        onClick={() => exchange.executePurchase(bnbAmount)}\n        disabled={!bnbAmount || exchange.isLoading}\n      >\n        {exchange.isLoading ? '交易中...' : '购买SM代币'}\n      </button>\n      {exchange.error && <div className=\"error\">{exchange.error}</div>}\n      {exchange.success && <div className=\"success\">交易成功!</div>}\n    </div>\n  );\n};\n\ndescribe('TokenExchange', () => {\n  const mockUseWallet = require('@/hooks/useWallet').useWallet;\n  const mockUseTokenExchange = require('@/hooks/useTokenExchange').useTokenExchange;\n  const mockContractUtils = require('@/utils/contractUtils');\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 默认钱包状态\n    mockUseWallet.mockReturnValue({\n      address: '0x1234567890123456789012345678901234567890',\n      isConnected: true,\n      chainId: 56,\n      balance: {\n        bnb: '2.5',\n        sm: '5000'\n      }\n    });\n    \n    // 默认交换状态\n    mockUseTokenExchange.mockReturnValue({\n      exchangeRate: '120000', // 1 BNB = 120,000 SM\n      isLoading: false,\n      error: null,\n      success: false,\n      executePurchase: jest.fn(),\n      refreshRate: jest.fn()\n    });\n  });\n\n  describe('基本渲染', () => {\n    it('应该显示当前汇率', () => {\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('当前价格: 120000 SM/BNB')).toBeInTheDocument();\n    });\n\n    it('应该显示输入框', () => {\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByPlaceholderText('输入BNB数量')).toBeInTheDocument();\n      expect(screen.getByPlaceholderText('计算中...')).toBeInTheDocument();\n    });\n\n    it('应该显示用户余额', () => {\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('余额: 2.5 BNB')).toBeInTheDocument();\n    });\n\n    it('未连接钱包时应该显示提示', () => {\n      mockUseWallet.mockReturnValue({\n        isConnected: false\n      });\n      \n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('请先连接钱包')).toBeInTheDocument();\n    });\n  });\n\n  describe('数量计算', () => {\n    it('输入BNB数量应该自动计算SM数量', async () => {\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '1' } });\n      \n      await waitFor(() => {\n        const smInput = screen.getByDisplayValue('120000');\n        expect(smInput).toBeInTheDocument();\n      });\n    });\n\n    it('应该正确处理小数计算', async () => {\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '0.5' } });\n      \n      await waitFor(() => {\n        const smInput = screen.getByDisplayValue('60000');\n        expect(smInput).toBeInTheDocument();\n      });\n    });\n\n    it('清空输入应该清空计算结果', async () => {\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '1' } });\n      fireEvent.change(bnbInput, { target: { value: '' } });\n      \n      await waitFor(() => {\n        const smInput = screen.getByPlaceholderText('计算中...');\n        expect(smInput.value).toBe('');\n      });\n    });\n  });\n\n  describe('交易执行', () => {\n    it('点击购买按钮应该执行交易', async () => {\n      const mockExecutePurchase = jest.fn();\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: false,\n        error: null,\n        success: false,\n        executePurchase: mockExecutePurchase,\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '1' } });\n      \n      const purchaseButton = screen.getByText('购买SM代币');\n      fireEvent.click(purchaseButton);\n      \n      expect(mockExecutePurchase).toHaveBeenCalledWith('1');\n    });\n\n    it('没有输入数量时购买按钮应该被禁用', () => {\n      render(<MockTokenExchange />);\n      \n      const purchaseButton = screen.getByText('购买SM代币');\n      expect(purchaseButton).toBeDisabled();\n    });\n\n    it('交易进行中时应该显示加载状态', () => {\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: true,\n        error: null,\n        success: false,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('交易中...')).toBeInTheDocument();\n      expect(screen.getByRole('button')).toBeDisabled();\n    });\n\n    it('交易成功时应该显示成功信息', () => {\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: false,\n        error: null,\n        success: true,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('交易成功!')).toBeInTheDocument();\n    });\n\n    it('交易失败时应该显示错误信息', () => {\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: false,\n        error: '余额不足',\n        success: false,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('余额不足')).toBeInTheDocument();\n    });\n  });\n\n  describe('输入验证', () => {\n    it('应该只接受数字输入', () => {\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量') as HTMLInputElement;\n      expect(bnbInput.type).toBe('number');\n    });\n\n    it('应该验证最小购买金额', async () => {\n      const mockExecutePurchase = jest.fn();\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: false,\n        error: null,\n        success: false,\n        executePurchase: mockExecutePurchase,\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '0.001' } });\n      \n      const purchaseButton = screen.getByText('购买SM代币');\n      fireEvent.click(purchaseButton);\n      \n      // 这里可以添加最小金额验证的逻辑\n    });\n\n    it('应该验证余额充足性', async () => {\n      render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '10' } }); // 超过余额2.5\n      \n      // 这里可以添加余额验证的逻辑\n    });\n  });\n\n  describe('汇率更新', () => {\n    it('汇率变化时应该重新计算SM数量', async () => {\n      const { rerender } = render(<MockTokenExchange />);\n      \n      const bnbInput = screen.getByPlaceholderText('输入BNB数量');\n      fireEvent.change(bnbInput, { target: { value: '1' } });\n      \n      // 模拟汇率变化\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '130000', // 新汇率\n        isLoading: false,\n        error: null,\n        success: false,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n      \n      rerender(<MockTokenExchange />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('当前价格: 130000 SM/BNB')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('错误处理', () => {\n    it('应该处理网络错误', () => {\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: null,\n        isLoading: false,\n        error: '网络连接失败',\n        success: false,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('网络连接失败')).toBeInTheDocument();\n    });\n\n    it('应该处理合约调用失败', () => {\n      mockUseTokenExchange.mockReturnValue({\n        exchangeRate: '120000',\n        isLoading: false,\n        error: 'Gas费用不足',\n        success: false,\n        executePurchase: jest.fn(),\n        refreshRate: jest.fn()\n      });\n\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByText('Gas费用不足')).toBeInTheDocument();\n    });\n  });\n\n  describe('可访问性', () => {\n    it('输入框应该有正确的标签', () => {\n      render(<MockTokenExchange />);\n      \n      expect(screen.getByLabelText('BNB数量:')).toBeInTheDocument();\n      expect(screen.getByLabelText('将获得SM:')).toBeInTheDocument();\n    });\n\n    it('按钮应该有正确的状态', () => {\n      render(<MockTokenExchange />);\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveAttribute('disabled');\n    });\n  });\n});\n"],"names":["jest","mock","useWallet","fn","useTokenExchange","getExchangeRate","executePurchase","getContractBalance","MockTokenExchange","wallet","require","exchange","bnbAmount","setBnbAmount","React","useState","smAmount","setSmAmount","useEffect","exchangeRate","sm","parseFloat","toString","isConnected","div","label","input","type","value","onChange","e","target","placeholder","readOnly","balance","bnb","button","onClick","disabled","isLoading","error","className","success","describe","mockUseWallet","mockUseTokenExchange","mockContractUtils","beforeEach","clearAllMocks","mockReturnValue","address","chainId","refreshRate","it","render","expect","screen","getByText","toBeInTheDocument","getByPlaceholderText","bnbInput","fireEvent","change","waitFor","smInput","getByDisplayValue","toBe","mockExecutePurchase","purchaseButton","click","toHaveBeenCalledWith","toBeDisabled","getByRole","rerender","getByLabelText","toHaveAttribute"],"mappings":"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"}