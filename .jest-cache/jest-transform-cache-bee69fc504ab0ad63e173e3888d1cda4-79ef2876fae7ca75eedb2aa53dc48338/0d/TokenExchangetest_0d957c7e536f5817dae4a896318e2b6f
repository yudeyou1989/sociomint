8b74797abb33b507e4ceae380279b183
/**
 * 代币交换功能测试
 * 测试BNB与SM代币的交换功能
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock相关hooks和工具
_globals.jest.mock('@/hooks/useWallet', ()=>({
        useWallet: _globals.jest.fn()
    }));
_globals.jest.mock('@/hooks/useTokenExchange', ()=>({
        useTokenExchange: _globals.jest.fn()
    }));
_globals.jest.mock('@/utils/contractUtils', ()=>({
        getExchangeRate: _globals.jest.fn(),
        executePurchase: _globals.jest.fn(),
        getContractBalance: _globals.jest.fn()
    }));
// Mock组件
const MockTokenExchange = ()=>{
    const wallet = require('@/hooks/useWallet').useWallet();
    const exchange = require('@/hooks/useTokenExchange').useTokenExchange();
    const [bnbAmount, setBnbAmount] = _react.default.useState('');
    const [smAmount, setSmAmount] = _react.default.useState('');
    _react.default.useEffect(()=>{
        if (bnbAmount && exchange.exchangeRate) {
            const sm = (parseFloat(bnbAmount) * parseFloat(exchange.exchangeRate)).toString();
            setSmAmount(sm);
        }
    }, [
        bnbAmount,
        exchange.exchangeRate
    ]);
    if (!wallet.isConnected) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "请先连接钱包"
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    "当前价格: ",
                    exchange.exchangeRate,
                    " SM/BNB"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        children: "BNB数量:"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "number",
                        value: bnbAmount,
                        onChange: (e)=>setBnbAmount(e.target.value),
                        placeholder: "输入BNB数量"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        children: "将获得SM:"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "text",
                        value: smAmount,
                        readOnly: true,
                        placeholder: "计算中..."
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    "余额: ",
                    wallet.balance?.bnb,
                    " BNB"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>exchange.executePurchase(bnbAmount),
                disabled: !bnbAmount || exchange.isLoading,
                children: exchange.isLoading ? '交易中...' : '购买SM代币'
            }),
            exchange.error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "error",
                children: exchange.error
            }),
            exchange.success && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "success",
                children: "交易成功!"
            })
        ]
    });
};
describe('TokenExchange', ()=>{
    const mockUseWallet = require('@/hooks/useWallet').useWallet;
    const mockUseTokenExchange = require('@/hooks/useTokenExchange').useTokenExchange;
    const mockContractUtils = require('@/utils/contractUtils');
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        // 默认钱包状态
        mockUseWallet.mockReturnValue({
            address: '0x1234567890123456789012345678901234567890',
            isConnected: true,
            chainId: 56,
            balance: {
                bnb: '2.5',
                sm: '5000'
            }
        });
        // 默认交换状态
        mockUseTokenExchange.mockReturnValue({
            exchangeRate: '120000',
            isLoading: false,
            error: null,
            success: false,
            executePurchase: _globals.jest.fn(),
            refreshRate: _globals.jest.fn()
        });
    });
    describe('基本渲染', ()=>{
        it('应该显示当前汇率', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('当前价格: 120000 SM/BNB')).toBeInTheDocument();
        });
        it('应该显示输入框', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByPlaceholderText('输入BNB数量')).toBeInTheDocument();
            expect(_react1.screen.getByPlaceholderText('计算中...')).toBeInTheDocument();
        });
        it('应该显示用户余额', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('余额: 2.5 BNB')).toBeInTheDocument();
        });
        it('未连接钱包时应该显示提示', ()=>{
            mockUseWallet.mockReturnValue({
                isConnected: false
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('请先连接钱包')).toBeInTheDocument();
        });
    });
    describe('数量计算', ()=>{
        it('输入BNB数量应该自动计算SM数量', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '1'
                }
            });
            await (0, _react1.waitFor)(()=>{
                const smInput = _react1.screen.getByDisplayValue('120000');
                expect(smInput).toBeInTheDocument();
            });
        });
        it('应该正确处理小数计算', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '0.5'
                }
            });
            await (0, _react1.waitFor)(()=>{
                const smInput = _react1.screen.getByDisplayValue('60000');
                expect(smInput).toBeInTheDocument();
            });
        });
        it('清空输入应该清空计算结果', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '1'
                }
            });
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: ''
                }
            });
            await (0, _react1.waitFor)(()=>{
                const smInput = _react1.screen.getByPlaceholderText('计算中...');
                expect(smInput.value).toBe('');
            });
        });
    });
    describe('交易执行', ()=>{
        it('点击购买按钮应该执行交易', async ()=>{
            const mockExecutePurchase = _globals.jest.fn();
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: false,
                error: null,
                success: false,
                executePurchase: mockExecutePurchase,
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '1'
                }
            });
            const purchaseButton = _react1.screen.getByText('购买SM代币');
            _react1.fireEvent.click(purchaseButton);
            expect(mockExecutePurchase).toHaveBeenCalledWith('1');
        });
        it('没有输入数量时购买按钮应该被禁用', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const purchaseButton = _react1.screen.getByText('购买SM代币');
            expect(purchaseButton).toBeDisabled();
        });
        it('交易进行中时应该显示加载状态', ()=>{
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: true,
                error: null,
                success: false,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('交易中...')).toBeInTheDocument();
            expect(_react1.screen.getByRole('button')).toBeDisabled();
        });
        it('交易成功时应该显示成功信息', ()=>{
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: false,
                error: null,
                success: true,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('交易成功!')).toBeInTheDocument();
        });
        it('交易失败时应该显示错误信息', ()=>{
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: false,
                error: '余额不足',
                success: false,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('余额不足')).toBeInTheDocument();
        });
    });
    describe('输入验证', ()=>{
        it('应该只接受数字输入', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            expect(bnbInput.type).toBe('number');
        });
        it('应该验证最小购买金额', async ()=>{
            const mockExecutePurchase = _globals.jest.fn();
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: false,
                error: null,
                success: false,
                executePurchase: mockExecutePurchase,
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '0.001'
                }
            });
            const purchaseButton = _react1.screen.getByText('购买SM代币');
            _react1.fireEvent.click(purchaseButton);
        // 这里可以添加最小金额验证的逻辑
        });
        it('应该验证余额充足性', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '10'
                }
            }); // 超过余额2.5
        // 这里可以添加余额验证的逻辑
        });
    });
    describe('汇率更新', ()=>{
        it('汇率变化时应该重新计算SM数量', async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const bnbInput = _react1.screen.getByPlaceholderText('输入BNB数量');
            _react1.fireEvent.change(bnbInput, {
                target: {
                    value: '1'
                }
            });
            // 模拟汇率变化
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '130000',
                isLoading: false,
                error: null,
                success: false,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('当前价格: 130000 SM/BNB')).toBeInTheDocument();
            });
        });
    });
    describe('错误处理', ()=>{
        it('应该处理网络错误', ()=>{
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: null,
                isLoading: false,
                error: '网络连接失败',
                success: false,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('网络连接失败')).toBeInTheDocument();
        });
        it('应该处理合约调用失败', ()=>{
            mockUseTokenExchange.mockReturnValue({
                exchangeRate: '120000',
                isLoading: false,
                error: 'Gas费用不足',
                success: false,
                executePurchase: _globals.jest.fn(),
                refreshRate: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByText('Gas费用不足')).toBeInTheDocument();
        });
    });
    describe('可访问性', ()=>{
        it('输入框应该有正确的标签', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            expect(_react1.screen.getByLabelText('BNB数量:')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('将获得SM:')).toBeInTheDocument();
        });
        it('按钮应该有正确的状态', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {}));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveAttribute('disabled');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,