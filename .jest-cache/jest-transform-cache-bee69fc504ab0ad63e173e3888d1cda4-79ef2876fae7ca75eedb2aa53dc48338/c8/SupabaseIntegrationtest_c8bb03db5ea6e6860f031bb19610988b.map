{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/integration/SupabaseIntegration.test.ts"],"sourcesContent":["/**\n * Supabase 集成测试\n * 测试与 Supabase 数据库和 API 的集成\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\n// 模拟 Supabase 查询构建器\nconst mockQueryBuilder = {\n  select: jest.fn().mockReturnThis(),\n  insert: jest.fn().mockReturnThis(),\n  update: jest.fn().mockReturnThis(),\n  delete: jest.fn().mockReturnThis(),\n  eq: jest.fn().mockReturnThis(),\n  neq: jest.fn().mockReturnThis(),\n  gt: jest.fn().mockReturnThis(),\n  lt: jest.fn().mockReturnThis(),\n  gte: jest.fn().mockReturnThis(),\n  lte: jest.fn().mockReturnThis(),\n  like: jest.fn().mockReturnThis(),\n  ilike: jest.fn().mockReturnThis(),\n  in: jest.fn().mockReturnThis(),\n  order: jest.fn().mockReturnThis(),\n  limit: jest.fn().mockReturnThis(),\n  range: jest.fn().mockReturnThis(),\n  single: jest.fn().mockResolvedValue({ data: null, error: null }),\n  maybeSingle: jest.fn().mockResolvedValue({ data: null, error: null }),\n};\n\n// 模拟 Supabase 客户端\nconst mockSupabaseClient = {\n  from: jest.fn().mockReturnValue(mockQueryBuilder),\n  auth: {\n    signUp: jest.fn(),\n    signIn: jest.fn(),\n    signOut: jest.fn(),\n    getUser: jest.fn(),\n    onAuthStateChange: jest.fn(),\n  },\n  storage: {\n    from: jest.fn(),\n  },\n  rpc: jest.fn(),\n};\n\n// 模拟 createClient\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => mockSupabaseClient),\n}));\n\ndescribe('Supabase Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n  });\n\n  describe('Database Operations', () => {\n    describe('User Management', () => {\n      it('should create a new user profile', async () => {\n        const userData = {\n          id: 'user-123',\n          wallet_address: '0x1234567890abcdef1234567890abcdef12345678',\n          username: 'testuser',\n          email: 'test@example.com',\n          created_at: new Date().toISOString(),\n        };\n\n        mockQueryBuilder.insert.mockResolvedValue({\n          data: userData,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('user_profiles')\n          .insert(userData);\n\n        expect(mockSupabaseClient.from).toHaveBeenCalledWith('user_profiles');\n        expect(mockQueryBuilder.insert).toHaveBeenCalledWith(userData);\n        expect(result.data).toEqual(userData);\n        expect(result.error).toBeNull();\n      });\n\n      it('should fetch user profile by wallet address', async () => {\n        const walletAddress = '0x1234567890abcdef1234567890abcdef12345678';\n        const userData = {\n          id: 'user-123',\n          wallet_address: walletAddress,\n          username: 'testuser',\n          sm_balance: '1000.0',\n        };\n\n        mockQueryBuilder.single.mockResolvedValue({\n          data: userData,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('user_profiles')\n          .select('*')\n          .eq('wallet_address', walletAddress)\n          .single();\n\n        expect(mockQueryBuilder.select).toHaveBeenCalledWith('*');\n        expect(mockQueryBuilder.eq).toHaveBeenCalledWith('wallet_address', walletAddress);\n        expect(mockQueryBuilder.single).toHaveBeenCalled();\n        expect(result.data).toEqual(userData);\n      });\n\n      it('should update user balance', async () => {\n        const userId = 'user-123';\n        const newBalance = '1500.0';\n\n        mockQueryBuilder.update.mockResolvedValue({\n          data: { id: userId, sm_balance: newBalance },\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('user_profiles')\n          .update({ sm_balance: newBalance })\n          .eq('id', userId);\n\n        expect(mockQueryBuilder.update).toHaveBeenCalledWith({ sm_balance: newBalance });\n        expect(mockQueryBuilder.eq).toHaveBeenCalledWith('id', userId);\n      });\n    });\n\n    describe('Transaction History', () => {\n      it('should record a new transaction', async () => {\n        const transactionData = {\n          id: 'tx-123',\n          user_id: 'user-123',\n          type: 'exchange',\n          amount_bnb: '0.1',\n          amount_sm: '120.48',\n          tx_hash: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890',\n          status: 'completed',\n          created_at: new Date().toISOString(),\n        };\n\n        mockQueryBuilder.insert.mockResolvedValue({\n          data: transactionData,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('transactions')\n          .insert(transactionData);\n\n        expect(mockSupabaseClient.from).toHaveBeenCalledWith('transactions');\n        expect(mockQueryBuilder.insert).toHaveBeenCalledWith(transactionData);\n        expect(result.data).toEqual(transactionData);\n      });\n\n      it('should fetch user transaction history', async () => {\n        const userId = 'user-123';\n        const transactions = [\n          {\n            id: 'tx-1',\n            type: 'exchange',\n            amount_bnb: '0.1',\n            amount_sm: '120.48',\n            status: 'completed',\n            created_at: '2024-01-01T00:00:00Z',\n          },\n          {\n            id: 'tx-2',\n            type: 'exchange',\n            amount_bnb: '0.05',\n            amount_sm: '60.24',\n            status: 'completed',\n            created_at: '2024-01-02T00:00:00Z',\n          },\n        ];\n\n        mockQueryBuilder.select.mockResolvedValue({\n          data: transactions,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('transactions')\n          .select('*')\n          .eq('user_id', userId)\n          .order('created_at', { ascending: false })\n          .limit(10);\n\n        expect(mockQueryBuilder.eq).toHaveBeenCalledWith('user_id', userId);\n        expect(mockQueryBuilder.order).toHaveBeenCalledWith('created_at', { ascending: false });\n        expect(mockQueryBuilder.limit).toHaveBeenCalledWith(10);\n        expect(result.data).toEqual(transactions);\n      });\n\n      it('should update transaction status', async () => {\n        const txId = 'tx-123';\n        const newStatus = 'failed';\n\n        mockQueryBuilder.update.mockResolvedValue({\n          data: { id: txId, status: newStatus },\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('transactions')\n          .update({ status: newStatus })\n          .eq('id', txId);\n\n        expect(mockQueryBuilder.update).toHaveBeenCalledWith({ status: newStatus });\n        expect(mockQueryBuilder.eq).toHaveBeenCalledWith('id', txId);\n      });\n    });\n\n    describe('Social Tasks', () => {\n      it('should create a new social task', async () => {\n        const taskData = {\n          id: 'task-123',\n          title: 'Follow on Twitter',\n          description: 'Follow our official Twitter account',\n          reward_amount: '10.0',\n          task_type: 'social_follow',\n          platform: 'twitter',\n          target_url: 'https://twitter.com/sociomint',\n          is_active: true,\n          created_at: new Date().toISOString(),\n        };\n\n        mockQueryBuilder.insert.mockResolvedValue({\n          data: taskData,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('social_tasks')\n          .insert(taskData);\n\n        expect(mockSupabaseClient.from).toHaveBeenCalledWith('social_tasks');\n        expect(mockQueryBuilder.insert).toHaveBeenCalledWith(taskData);\n        expect(result.data).toEqual(taskData);\n      });\n\n      it('should fetch active social tasks', async () => {\n        const activeTasks = [\n          {\n            id: 'task-1',\n            title: 'Follow on Twitter',\n            reward_amount: '10.0',\n            task_type: 'social_follow',\n            is_active: true,\n          },\n          {\n            id: 'task-2',\n            title: 'Join Telegram',\n            reward_amount: '15.0',\n            task_type: 'social_join',\n            is_active: true,\n          },\n        ];\n\n        mockQueryBuilder.select.mockResolvedValue({\n          data: activeTasks,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('social_tasks')\n          .select('*')\n          .eq('is_active', true)\n          .order('created_at', { ascending: false });\n\n        expect(mockQueryBuilder.eq).toHaveBeenCalledWith('is_active', true);\n        expect(mockQueryBuilder.order).toHaveBeenCalledWith('created_at', { ascending: false });\n        expect(result.data).toEqual(activeTasks);\n      });\n\n      it('should record task completion', async () => {\n        const completionData = {\n          id: 'completion-123',\n          user_id: 'user-123',\n          task_id: 'task-123',\n          status: 'completed',\n          verification_data: { twitter_username: '@testuser' },\n          completed_at: new Date().toISOString(),\n        };\n\n        mockQueryBuilder.insert.mockResolvedValue({\n          data: completionData,\n          error: null,\n        });\n\n        const result = await mockSupabaseClient\n          .from('task_completions')\n          .insert(completionData);\n\n        expect(mockSupabaseClient.from).toHaveBeenCalledWith('task_completions');\n        expect(mockQueryBuilder.insert).toHaveBeenCalledWith(completionData);\n        expect(result.data).toEqual(completionData);\n      });\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should sign up a new user', async () => {\n      const email = 'test@example.com';\n      const password = 'password123';\n      const userData = {\n        id: 'user-123',\n        email,\n        email_confirmed_at: new Date().toISOString(),\n      };\n\n      mockSupabaseClient.auth.signUp.mockResolvedValue({\n        data: { user: userData, session: null },\n        error: null,\n      });\n\n      const result = await mockSupabaseClient.auth.signUp({\n        email,\n        password,\n      });\n\n      expect(mockSupabaseClient.auth.signUp).toHaveBeenCalledWith({\n        email,\n        password,\n      });\n      expect(result.data.user).toEqual(userData);\n      expect(result.error).toBeNull();\n    });\n\n    it('should sign in an existing user', async () => {\n      const email = 'test@example.com';\n      const password = 'password123';\n      const sessionData = {\n        access_token: 'access-token-123',\n        refresh_token: 'refresh-token-123',\n        user: { id: 'user-123', email },\n      };\n\n      mockSupabaseClient.auth.signIn.mockResolvedValue({\n        data: { session: sessionData },\n        error: null,\n      });\n\n      const result = await mockSupabaseClient.auth.signIn({\n        email,\n        password,\n      });\n\n      expect(mockSupabaseClient.auth.signIn).toHaveBeenCalledWith({\n        email,\n        password,\n      });\n      expect(result.data.session).toEqual(sessionData);\n    });\n\n    it('should get current user', async () => {\n      const userData = {\n        id: 'user-123',\n        email: 'test@example.com',\n        aud: 'authenticated',\n      };\n\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: userData },\n        error: null,\n      });\n\n      const result = await mockSupabaseClient.auth.getUser();\n\n      expect(mockSupabaseClient.auth.getUser).toHaveBeenCalled();\n      expect(result.data.user).toEqual(userData);\n    });\n\n    it('should sign out user', async () => {\n      mockSupabaseClient.auth.signOut.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await mockSupabaseClient.auth.signOut();\n\n      expect(mockSupabaseClient.auth.signOut).toHaveBeenCalled();\n      expect(result.error).toBeNull();\n    });\n  });\n\n  describe('Real-time Subscriptions', () => {\n    it('should set up auth state change listener', () => {\n      const callback = jest.fn();\n\n      mockSupabaseClient.auth.onAuthStateChange.mockReturnValue({\n        data: { subscription: { id: 'sub-123' } },\n      });\n\n      const subscription = mockSupabaseClient.auth.onAuthStateChange(callback);\n\n      expect(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(callback);\n      expect(subscription.data.subscription.id).toBe('sub-123');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      const error = new Error('Connection failed');\n      mockQueryBuilder.select.mockRejectedValue(error);\n\n      try {\n        await mockSupabaseClient\n          .from('user_profiles')\n          .select('*');\n      } catch (e) {\n        expect(e).toEqual(error);\n      }\n\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n    });\n\n    it('should handle authentication errors', async () => {\n      const authError = {\n        message: 'Invalid credentials',\n        status: 400,\n      };\n\n      mockSupabaseClient.auth.signIn.mockResolvedValue({\n        data: { session: null },\n        error: authError,\n      });\n\n      const result = await mockSupabaseClient.auth.signIn({\n        email: 'wrong@example.com',\n        password: 'wrongpassword',\n      });\n\n      expect(result.error).toEqual(authError);\n      expect(result.data.session).toBeNull();\n    });\n\n    it('should handle API rate limiting', async () => {\n      const rateLimitError = {\n        message: 'Too many requests',\n        status: 429,\n      };\n\n      mockQueryBuilder.select.mockResolvedValue({\n        data: null,\n        error: rateLimitError,\n      });\n\n      const result = await mockSupabaseClient\n        .from('user_profiles')\n        .select('*');\n\n      expect(result.error).toEqual(rateLimitError);\n      expect(result.data).toBeNull();\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should handle large data queries efficiently', async () => {\n      const largeDataSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: `item-${i}`,\n        data: `data-${i}`,\n      }));\n\n      mockQueryBuilder.select.mockResolvedValue({\n        data: largeDataSet,\n        error: null,\n      });\n\n      const startTime = performance.now();\n      \n      const result = await mockSupabaseClient\n        .from('large_table')\n        .select('*')\n        .limit(1000);\n\n      const endTime = performance.now();\n      const queryTime = endTime - startTime;\n\n      expect(queryTime).toBeLessThan(1000); // 应该在1秒内完成\n      expect(result.data).toHaveLength(1000);\n    });\n\n    it('should handle concurrent requests', async () => {\n      mockQueryBuilder.select.mockResolvedValue({\n        data: [{ id: 1, name: 'test' }],\n        error: null,\n      });\n\n      const promises = Array.from({ length: 10 }, () =>\n        mockSupabaseClient\n          .from('test_table')\n          .select('*')\n      );\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(10);\n      results.forEach(result => {\n        expect(result.data).toEqual([{ id: 1, name: 'test' }]);\n        expect(result.error).toBeNull();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","createClient","fn","mockSupabaseClient","mockQueryBuilder","select","mockReturnThis","insert","update","delete","eq","neq","gt","lt","gte","lte","like","ilike","in","order","limit","range","single","mockResolvedValue","data","error","maybeSingle","from","mockReturnValue","auth","signUp","signIn","signOut","getUser","onAuthStateChange","storage","rpc","describe","beforeEach","clearAllMocks","it","userData","id","wallet_address","username","email","created_at","Date","toISOString","result","expect","toHaveBeenCalledWith","toEqual","toBeNull","walletAddress","sm_balance","toHaveBeenCalled","userId","newBalance","transactionData","user_id","type","amount_bnb","amount_sm","tx_hash","status","transactions","ascending","txId","newStatus","taskData","title","description","reward_amount","task_type","platform","target_url","is_active","activeTasks","completionData","task_id","verification_data","twitter_username","completed_at","password","email_confirmed_at","user","session","sessionData","access_token","refresh_token","aud","callback","subscription","toBe","Error","mockRejectedValue","e","authError","message","rateLimitError","largeDataSet","Array","length","_","i","startTime","performance","now","endTime","queryTime","toBeLessThan","toHaveLength","name","promises","results","Promise","all","forEach"],"mappings":"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"}