2bc68748731c97a84bffb053a0dd7703
/**
 * 真实组件测试
 * 测试项目中的实际 React 组件
 */ "use strict";
// 模拟 Next.js 路由
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            }),
        usePathname: ()=>'/',
        useSearchParams: ()=>new URLSearchParams()
    }));
// 模拟 wagmi hooks
jest.mock('wagmi', ()=>({
        useAccount: ()=>({
                address: '0x123456789abcdef123456789abcdef123456789a',
                isConnected: true,
                isConnecting: false,
                isDisconnected: false
            }),
        useBalance: ()=>({
                data: {
                    formatted: '1.5',
                    symbol: 'BNB'
                },
                isLoading: false,
                error: null
            }),
        useConnect: ()=>({
                connect: jest.fn(),
                connectors: [],
                isLoading: false,
                error: null
            }),
        useDisconnect: ()=>({
                disconnect: jest.fn()
            }),
        useContractRead: ()=>({
                data: '100000000000000000000',
                isLoading: false,
                error: null
            }),
        useContractWrite: ()=>({
                write: jest.fn(),
                isLoading: false,
                error: null
            }),
        usePrepareContractWrite: ()=>({
                config: {},
                error: null
            }),
        useWaitForTransaction: ()=>({
                isLoading: false,
                isSuccess: true,
                error: null
            })
    }));
// 模拟 ethers
jest.mock('ethers', ()=>({
        formatEther: jest.fn().mockImplementation((value)=>{
            return (Number(value) / 1e18).toString();
        }),
        parseEther: jest.fn().mockImplementation((value)=>{
            return BigInt(Math.floor(parseFloat(value) * 1e18));
        }),
        formatUnits: jest.fn().mockImplementation((value, decimals)=>{
            return (Number(value) / Math.pow(10, decimals)).toString();
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 测试 ConnectWalletButton 组件
describe('ConnectWalletButton Component', ()=>{
    // 简化的 ConnectWalletButton 组件
    const ConnectWalletButton = ()=>{
        const [isConnected, setIsConnected] = _react.default.useState(false);
        const [isConnecting, setIsConnecting] = _react.default.useState(false);
        const [address, setAddress] = _react.default.useState('');
        const handleConnect = async ()=>{
            setIsConnecting(true);
            try {
                await new Promise((resolve)=>setTimeout(resolve, 100));
                setIsConnected(true);
                setAddress('0x123456789abcdef123456789abcdef123456789a');
            } catch (error) {
                console.error('Connection failed:', error);
            } finally{
                setIsConnecting(false);
            }
        };
        const handleDisconnect = ()=>{
            setIsConnected(false);
            setAddress('');
        };
        if (isConnected) {
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "wallet-connected",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        "data-testid": "wallet-address",
                        children: [
                            address.slice(0, 6),
                            "...",
                            address.slice(-4)
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: handleDisconnect,
                        "data-testid": "disconnect-button",
                        children: "断开连接"
                    })
                ]
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
            onClick: handleConnect,
            disabled: isConnecting,
            "data-testid": "connect-button",
            children: isConnecting ? '连接中...' : '连接钱包'
        });
    };
    it('should render connect button initially', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConnectWalletButton, {}));
        expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('connect-button')).toHaveTextContent('连接钱包');
    });
    it('should show connecting state', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConnectWalletButton, {}));
        const connectButton = _react1.screen.getByTestId('connect-button');
        await user.click(connectButton);
        expect(connectButton).toHaveTextContent('连接中...');
        expect(connectButton).toBeDisabled();
    });
    it('should show connected state after successful connection', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConnectWalletButton, {}));
        const connectButton = _react1.screen.getByTestId('connect-button');
        await user.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('wallet-connected')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('wallet-address')).toHaveTextContent('0x1234...789a');
        });
    });
    it('should disconnect wallet', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ConnectWalletButton, {}));
        // 先连接
        const connectButton = _react1.screen.getByTestId('connect-button');
        await user.click(connectButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('wallet-connected')).toBeInTheDocument();
        });
        // 然后断开连接
        const disconnectButton = _react1.screen.getByTestId('disconnect-button');
        await user.click(disconnectButton);
        expect(_react1.screen.getByTestId('connect-button')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('connect-button')).toHaveTextContent('连接钱包');
    });
});
// 测试 TokenBalance 组件
describe('TokenBalance Component', ()=>{
    const TokenBalance = ({ address })=>{
        const [balance, setBalance] = _react.default.useState('0');
        const [loading, setLoading] = _react.default.useState(false);
        const [error, setError] = _react.default.useState('');
        _react.default.useEffect(()=>{
            if (!address) {
                setBalance('0');
                return;
            }
            const fetchBalance = async ()=>{
                setLoading(true);
                setError('');
                try {
                    await new Promise((resolve)=>setTimeout(resolve, 100));
                    setBalance('100.0');
                } catch (err) {
                    setError('获取余额失败');
                } finally{
                    setLoading(false);
                }
            };
            fetchBalance();
        }, [
            address
        ]);
        if (!address) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "no-address",
                children: "请连接钱包"
            });
        }
        if (loading) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loading",
                children: "加载中..."
            });
        }
        if (error) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error",
                children: error
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "token-balance",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "balance-value",
                    children: [
                        balance,
                        " SM"
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "balance-address",
                    children: [
                        address.slice(0, 6),
                        "...",
                        address.slice(-4)
                    ]
                })
            ]
        });
    };
    it('should show connect wallet message when no address', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TokenBalance, {}));
        expect(_react1.screen.getByTestId('no-address')).toHaveTextContent('请连接钱包');
    });
    it('should show loading state', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TokenBalance, {
            address: "0x123456789abcdef123456789abcdef123456789a"
        }));
        expect(_react1.screen.getByTestId('loading')).toHaveTextContent('加载中...');
    });
    it('should display balance after loading', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TokenBalance, {
            address: "0x123456789abcdef123456789abcdef123456789a"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('token-balance')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('balance-value')).toHaveTextContent('100.0 SM');
            expect(_react1.screen.getByTestId('balance-address')).toHaveTextContent('0x1234...789a');
        });
    });
    it('should update balance when address changes', async ()=>{
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TokenBalance, {
            address: "0x123456789abcdef123456789abcdef123456789a"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('balance-value')).toHaveTextContent('100.0 SM');
        });
        // 更改地址
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TokenBalance, {
            address: "0xabcdef123456789abcdef123456789abcdef123456"
        }));
        expect(_react1.screen.getByTestId('loading')).toBeInTheDocument();
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('balance-address')).toHaveTextContent('0xabcd...3456');
        });
    });
});
// 测试 ExchangeForm 组件
describe('ExchangeForm Component', ()=>{
    const ExchangeForm = ({ onExchange })=>{
        const [amount, setAmount] = _react.default.useState('');
        const [loading, setLoading] = _react.default.useState(false);
        const [error, setError] = _react.default.useState('');
        const handleSubmit = async (e)=>{
            e.preventDefault();
            if (!amount || parseFloat(amount) <= 0) {
                setError('请输入有效金额');
                return;
            }
            if (parseFloat(amount) < 0.01) {
                setError('最小购买金额为 0.01 BNB');
                return;
            }
            if (parseFloat(amount) > 10) {
                setError('最大购买金额为 10 BNB');
                return;
            }
            setLoading(true);
            setError('');
            try {
                await onExchange(amount);
                setAmount('');
            } catch (err) {
                setError('交易失败');
            } finally{
                setLoading(false);
            }
        };
        const calculateTokens = (bnbAmount)=>{
            if (!bnbAmount) return '0';
            const price = 0.000000833; // BNB per SM
            return (parseFloat(bnbAmount) / price).toFixed(2);
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
            onSubmit: handleSubmit,
            "data-testid": "exchange-form",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                            htmlFor: "amount",
                            children: "BNB 数量:"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            id: "amount",
                            type: "number",
                            step: "0.01",
                            min: "0",
                            value: amount,
                            onChange: (e)=>setAmount(e.target.value),
                            placeholder: "输入 BNB 数量",
                            "data-testid": "amount-input"
                        })
                    ]
                }),
                amount && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "token-preview",
                    children: [
                        "您将获得约 ",
                        calculateTokens(amount),
                        " SM 代币"
                    ]
                }),
                error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "error-message",
                    style: {
                        color: 'red'
                    },
                    children: error
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    type: "submit",
                    disabled: loading || !amount,
                    "data-testid": "submit-button",
                    children: loading ? '交易中...' : '购买代币'
                })
            ]
        });
    };
    const mockOnExchange = jest.fn();
    beforeEach(()=>{
        mockOnExchange.mockClear();
    });
    it('should render form elements', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        expect(_react1.screen.getByTestId('exchange-form')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('amount-input')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('submit-button')).toBeInTheDocument();
    });
    it('should show token preview when amount is entered', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        await user.type(amountInput, '1.0');
        // 使用更灵活的匹配，因为计算结果可能有小的差异
        expect(_react1.screen.getByTestId('token-preview')).toHaveTextContent(/您将获得约 \d+\.\d+ SM 代币/);
    });
    it('should validate minimum amount', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        const submitButton = _react1.screen.getByTestId('submit-button');
        await user.type(amountInput, '0.005');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('error-message')).toHaveTextContent('最小购买金额为 0.01 BNB');
        }, {
            timeout: 2000
        });
        expect(mockOnExchange).not.toHaveBeenCalled();
    });
    it('should validate maximum amount', async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        const submitButton = _react1.screen.getByTestId('submit-button');
        await user.type(amountInput, '15');
        await user.click(submitButton);
        expect(_react1.screen.getByTestId('error-message')).toHaveTextContent('最大购买金额为 10 BNB');
        expect(mockOnExchange).not.toHaveBeenCalled();
    });
    it('should submit valid form', async ()=>{
        const user = _userevent.default.setup();
        mockOnExchange.mockResolvedValue(undefined);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        const submitButton = _react1.screen.getByTestId('submit-button');
        await user.type(amountInput, '1.0');
        await user.click(submitButton);
        // 接受 '1' 或 '1.0' 都可以
        expect(mockOnExchange).toHaveBeenCalledWith(expect.stringMatching(/^1(\.0)?$/));
        await (0, _react1.waitFor)(()=>{
            expect(amountInput).toHaveValue(null); // 表单应该被清空
        });
    });
    it('should handle exchange error', async ()=>{
        const user = _userevent.default.setup();
        mockOnExchange.mockRejectedValue(new Error('Exchange failed'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        const submitButton = _react1.screen.getByTestId('submit-button');
        await user.type(amountInput, '1.0');
        await user.click(submitButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('error-message')).toHaveTextContent('交易失败');
        });
    });
    it('should show loading state during submission', async ()=>{
        const user = _userevent.default.setup();
        mockOnExchange.mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 200)));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ExchangeForm, {
            onExchange: mockOnExchange
        }));
        const amountInput = _react1.screen.getByTestId('amount-input');
        const submitButton = _react1.screen.getByTestId('submit-button');
        await user.type(amountInput, '1.0');
        await user.click(submitButton);
        expect(submitButton).toHaveTextContent('交易中...');
        expect(submitButton).toBeDisabled();
    });
});
// 测试 TransactionStatus 组件
describe('TransactionStatus Component', ()=>{
    const TransactionStatus = ({ txHash })=>{
        const [status, setStatus] = _react.default.useState(null);
        const [confirmations, setConfirmations] = _react.default.useState(0);
        _react.default.useEffect(()=>{
            if (!txHash) {
                setStatus(null);
                return;
            }
            const checkStatus = async ()=>{
                setStatus('pending');
                // 模拟交易确认过程
                for(let i = 1; i <= 3; i++){
                    await new Promise((resolve)=>setTimeout(resolve, 100));
                    setConfirmations(i);
                }
                setStatus('success');
            };
            checkStatus();
        }, [
            txHash
        ]);
        if (!txHash) {
            return null;
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "transaction-status",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "tx-hash",
                    children: [
                        "交易哈希: ",
                        txHash
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "status",
                    children: [
                        "状态: ",
                        status === 'pending' ? '确认中' : status === 'success' ? '成功' : '失败'
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "confirmations",
                    children: [
                        "确认数: ",
                        confirmations
                    ]
                }),
                status === 'success' && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "success-message",
                    children: "交易已成功确认!"
                })
            ]
        });
    };
    it('should not render when no txHash', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TransactionStatus, {}));
        expect(_react1.screen.queryByTestId('transaction-status')).not.toBeInTheDocument();
    });
    it('should show pending status initially', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TransactionStatus, {
            txHash: "0x123456789abcdef"
        }));
        expect(_react1.screen.getByTestId('transaction-status')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('tx-hash')).toHaveTextContent('交易哈希: 0x123456789abcdef');
        expect(_react1.screen.getByTestId('status')).toHaveTextContent('状态: 确认中');
    });
    it('should update confirmations and show success', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TransactionStatus, {
            txHash: "0x123456789abcdef"
        }));
        // 等待确认过程完成
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('status')).toHaveTextContent('状态: 成功');
            expect(_react1.screen.getByTestId('confirmations')).toHaveTextContent('确认数: 3');
            expect(_react1.screen.getByTestId('success-message')).toHaveTextContent('交易已成功确认!');
        }, {
            timeout: 1000
        });
    });
    it('should reset when txHash changes', async ()=>{
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TransactionStatus, {
            txHash: "0x123456789abcdef"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('status')).toHaveTextContent('状态: 成功');
        });
        // 更改交易哈希
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TransactionStatus, {
            txHash: "0xabcdef123456789"
        }));
        expect(_react1.screen.getByTestId('tx-hash')).toHaveTextContent('交易哈希: 0xabcdef123456789');
        expect(_react1.screen.getByTestId('status')).toHaveTextContent('状态: 确认中');
        // 由于异步操作，确认数可能不会立即重置，所以我们检查它最终会更新
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('confirmations')).toHaveTextContent('确认数: 3');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,