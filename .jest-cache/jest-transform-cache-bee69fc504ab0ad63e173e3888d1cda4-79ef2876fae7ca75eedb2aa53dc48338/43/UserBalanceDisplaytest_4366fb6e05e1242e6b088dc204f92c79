cc762428c8801d6650b6f3780dbcca4d
"use strict";
// 模拟依赖
jest.mock('wagmi', ()=>({
        useAccount: jest.fn()
    }));
jest.mock('../services/walletService', ()=>({
        hasEthereum: jest.fn()
    }));
jest.mock('ethers', ()=>{
    const original = jest.requireActual('ethers');
    return {
        ...original,
        BrowserProvider: jest.fn().mockImplementation(()=>({
                getSigner: jest.fn().mockResolvedValue({
                    getAddress: jest.fn().mockResolvedValue('0x123')
                })
            })),
        Contract: jest.fn().mockImplementation(()=>({
                symbol: jest.fn().mockResolvedValue('SM'),
                decimals: jest.fn().mockResolvedValue(18),
                balanceOf: jest.fn().mockResolvedValue(_ethers.ethers.parseEther('1000')),
                userData: jest.fn().mockResolvedValue([
                    _ethers.ethers.parseEther('5'),
                    1234567890n
                ]),
                isUserVerified: jest.fn().mockResolvedValue(true)
            }))
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _UserBalanceDisplay = /*#__PURE__*/ _interop_require_default(require("../UserBalanceDisplay"));
const _wagmi = require("wagmi");
const _walletService = require("../services/walletService");
const _ethers = require("ethers");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('UserBalanceDisplay', ()=>{
    beforeEach(()=>{
        // 重置所有模拟
        jest.clearAllMocks();
        // 默认模拟值
        _wagmi.useAccount.mockReturnValue({
            address: '0x123456789abcdef',
            isConnected: true
        });
        _walletService.hasEthereum.mockReturnValue(true);
        // 模拟window.ethereum
        global.window.ethereum = {
            request: jest.fn(),
            on: jest.fn(),
            removeListener: jest.fn()
        };
    });
    it('renders loading state initially', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserBalanceDisplay.default, {}));
        expect(_react1.screen.getByText('加载中...')).toBeInTheDocument();
    });
    it('renders wallet not connected message when not connected', ()=>{
        _wagmi.useAccount.mockReturnValue({
            address: undefined,
            isConnected: false
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserBalanceDisplay.default, {}));
        expect(_react1.screen.getByText('请连接钱包查看您的余额')).toBeInTheDocument();
    });
    it('renders error message when there is an error', async ()=>{
        // 模拟Contract抛出错误
        _ethers.ethers.Contract.mockImplementationOnce(()=>{
            throw new Error('获取用户数据失败');
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserBalanceDisplay.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('获取用户数据失败，请稍后再试')).toBeInTheDocument();
        });
    });
    it('renders user balance data correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserBalanceDisplay.default, {}));
        await (0, _react1.waitFor)(()=>{
            // 检查钱包地址
            expect(_react1.screen.getByText('0x1234...cdef')).toBeInTheDocument();
            // 检查代币余额
            expect(_react1.screen.getByText('1,000 SM')).toBeInTheDocument();
            // 检查总购买金额
            expect(_react1.screen.getByText('5 BNB')).toBeInTheDocument();
            // 检查验证状态
            expect(_react1.screen.getByText('已验证')).toBeInTheDocument();
        });
    });
    it('handles ethereum not available', ()=>{
        _walletService.hasEthereum.mockReturnValue(false);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserBalanceDisplay.default, {}));
        expect(_react1.screen.queryByText('加载中...')).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,