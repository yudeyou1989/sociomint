{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/app/api/__tests__/social-tasks.test.ts"],"sourcesContent":["/**\n * 社交任务API测试\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST } from '@/app/api/social-tasks/route';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          order: jest.fn(() => ({\n            data: [\n              {\n                id: '1',\n                title: 'Follow on Twitter',\n                description: 'Follow our Twitter account',\n                platform: 'twitter',\n                reward_flowers: 10,\n                status: 'active',\n                created_at: '2024-01-01T00:00:00Z',\n              },\n            ],\n            error: null,\n          })),\n        })),\n      })),\n      insert: jest.fn(() => ({\n        data: [{ id: '2' }],\n        error: null,\n      })),\n    })),\n  },\n}));\n\n// Mock input validator\njest.mock('@/lib/security', () => ({\n  InputValidator: {\n    validateSocialTaskData: jest.fn(() => ({ isValid: true, errors: [] })),\n  },\n}));\n\ndescribe('/api/social-tasks', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/social-tasks', () => {\n    it('returns social tasks successfully', async () => {\n      const request = new NextRequest('http://localhost:3000/api/social-tasks');\n      \n      const response = await GET(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.tasks).toHaveLength(1);\n      expect(data.tasks[0]).toMatchObject({\n        id: '1',\n        title: 'Follow on Twitter',\n        platform: 'twitter',\n        reward_flowers: 10,\n      });\n    });\n\n    it('filters tasks by platform', async () => {\n      const request = new NextRequest('http://localhost:3000/api/social-tasks?platform=twitter');\n      \n      const response = await GET(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('filters tasks by status', async () => {\n      const request = new NextRequest('http://localhost:3000/api/social-tasks?status=active');\n      \n      const response = await GET(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('handles database errors', async () => {\n      // Mock database error\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        select: () => ({\n          eq: () => ({\n            order: () => ({\n              data: null,\n              error: { message: 'Database error' },\n            }),\n          }),\n        }),\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/social-tasks');\n      \n      const response = await GET(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to fetch social tasks');\n    });\n  });\n\n  describe('POST /api/social-tasks', () => {\n    it('creates a new social task successfully', async () => {\n      const taskData = {\n        title: 'New Twitter Task',\n        description: 'Follow our new Twitter account',\n        platform: 'twitter',\n        reward_flowers: 15,\n        requirements: {\n          action: 'follow',\n          target: '@sociomint',\n        },\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/social-tasks', {\n        method: 'POST',\n        body: JSON.stringify(taskData),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(201);\n      expect(data.success).toBe(true);\n      expect(data.task).toMatchObject({\n        id: '2',\n      });\n    });\n\n    it('validates input data', async () => {\n      const { InputValidator } = require('@/lib/security');\n      InputValidator.validateSocialTaskData.mockReturnValue({\n        isValid: false,\n        errors: ['Title is required'],\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/social-tasks', {\n        method: 'POST',\n        body: JSON.stringify({}),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.errors).toContain('Title is required');\n    });\n\n    it('handles invalid JSON', async () => {\n      const request = new NextRequest('http://localhost:3000/api/social-tasks', {\n        method: 'POST',\n        body: 'invalid json',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Invalid JSON data');\n    });\n\n    it('handles database insertion errors', async () => {\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockReturnValue({\n        insert: () => ({\n          data: null,\n          error: { message: 'Insertion failed' },\n        }),\n      });\n\n      const taskData = {\n        title: 'Test Task',\n        description: 'Test Description',\n        platform: 'twitter',\n        reward_flowers: 10,\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/social-tasks', {\n        method: 'POST',\n        body: JSON.stringify(taskData),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const response = await POST(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to create social task');\n    });\n  });\n\n  describe('Error handling', () => {\n    it('handles unexpected errors gracefully', async () => {\n      // Mock an unexpected error\n      const { supabase } = require('@/lib/supabase');\n      supabase.from.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/social-tasks');\n      \n      const response = await GET(request);\n      const data = await response.json();\n      \n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n    });\n  });\n\n  describe('Rate limiting', () => {\n    it('should implement rate limiting for POST requests', async () => {\n      // This would test rate limiting if implemented\n      // For now, just verify the endpoint exists\n      const request = new NextRequest('http://localhost:3000/api/social-tasks', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: 'Rate limit test',\n          description: 'Test',\n          platform: 'twitter',\n          reward_flowers: 5,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const response = await POST(request);\n      expect(response).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","supabase","from","fn","select","eq","order","data","id","title","description","platform","reward_flowers","status","created_at","error","insert","InputValidator","validateSocialTaskData","isValid","errors","describe","beforeEach","clearAllMocks","it","request","NextRequest","response","GET","json","expect","toBe","success","tasks","toHaveLength","toMatchObject","require","mockReturnValue","message","taskData","requirements","action","target","method","body","JSON","stringify","headers","POST","task","toContain","mockImplementation","Error","toBeDefined"],"mappings":"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"}