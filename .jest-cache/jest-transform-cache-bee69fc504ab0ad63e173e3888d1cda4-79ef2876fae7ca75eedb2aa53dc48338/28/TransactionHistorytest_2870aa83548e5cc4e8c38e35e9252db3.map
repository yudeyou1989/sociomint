{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/TransactionHistory.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport TransactionHistory from '../TransactionHistory';\nimport { useAccount } from 'wagmi';\nimport { hasEthereum } from '../services/walletService';\nimport { ethers } from 'ethers';\n\n// 模拟依赖\njest.mock('wagmi', () => ({\n  useAccount: jest.fn(),\n}));\n\njest.mock('../services/walletService', () => ({\n  hasEthereum: jest.fn(),\n}));\n\n// 模拟事件数据\nconst mockEvents = [\n  {\n    transactionHash: '0x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234',\n    args: {\n      bnbAmount: ethers.parseEther('1'),\n      tokenAmount: ethers.parseEther('1000'),\n      timestamp: 1625097600n, // 2021-07-01\n      round: 0n,\n      price: ethers.parseEther('0.000001'),\n    },\n  },\n  {\n    transactionHash: '0xabcdef123456789abcdef123456789abcdef123456789abcdef123456789abcd',\n    args: {\n      bnbAmount: ethers.parseEther('2'),\n      tokenAmount: ethers.parseEther('2000'),\n      timestamp: 1625184000n, // 2021-07-02\n      round: 0n,\n      price: ethers.parseEther('0.000001'),\n    },\n  },\n];\n\njest.mock('ethers', () => {\n  const original = jest.requireActual('ethers');\n  return {\n    ...original,\n    BrowserProvider: jest.fn().mockImplementation(() => ({\n      getSigner: jest.fn().mockResolvedValue({\n        getAddress: jest.fn().mockResolvedValue('0x123'),\n      }),\n    })),\n    Contract: jest.fn().mockImplementation(() => ({\n      filters: {\n        TokensExchanged: jest.fn().mockReturnValue({}),\n      },\n      queryFilter: jest.fn().mockResolvedValue(mockEvents),\n    })),\n  };\n});\n\ndescribe('TransactionHistory', () => {\n  beforeEach(() => {\n    // 重置所有模拟\n    jest.clearAllMocks();\n\n    // 默认模拟值\n    (useAccount as jest.Mock).mockReturnValue({\n      address: '0x123456789abcdef',\n      isConnected: true,\n    });\n\n    (hasEthereum as jest.Mock).mockReturnValue(true);\n\n    // 模拟window.ethereum\n    global.window.ethereum = {\n      request: jest.fn(),\n      on: jest.fn(),\n      removeListener: jest.fn(),\n    };\n  });\n\n  it('renders loading state initially', () => {\n    render(<TransactionHistory />);\n    expect(screen.getByText('加载中...')).toBeInTheDocument();\n  });\n\n  it('renders wallet not connected message when not connected', () => {\n    (useAccount as jest.Mock).mockReturnValue({\n      address: undefined,\n      isConnected: false,\n    });\n\n    render(<TransactionHistory />);\n    expect(screen.getByText('请连接钱包查看您的交易历史')).toBeInTheDocument();\n  });\n\n  it('renders error message when there is an error', async () => {\n    // 模拟Contract抛出错误\n    (ethers.Contract as jest.Mock).mockImplementationOnce(() => {\n      throw new Error('获取交易历史失败');\n    });\n\n    render(<TransactionHistory />);\n\n    await waitFor(() => {\n      expect(screen.getByText('获取交易历史失败，请稍后再试')).toBeInTheDocument();\n    });\n  });\n\n  it('renders empty state when no transactions', async () => {\n    // 模拟没有交易\n    (ethers.Contract as jest.Mock).mockImplementationOnce(() => ({\n      filters: {\n        TokensExchanged: jest.fn().mockReturnValue({}),\n      },\n      queryFilter: jest.fn().mockResolvedValue([]),\n    }));\n\n    render(<TransactionHistory />);\n\n    await waitFor(() => {\n      expect(screen.getByText('暂无交易记录')).toBeInTheDocument();\n    });\n  });\n\n  it('renders transaction history correctly', async () => {\n    render(<TransactionHistory />);\n\n    await waitFor(() => {\n      // 检查表头\n      expect(screen.getByText('交易哈希')).toBeInTheDocument();\n      expect(screen.getByText('BNB 数量')).toBeInTheDocument();\n      expect(screen.getByText('SM 数量')).toBeInTheDocument();\n      expect(screen.getByText('时间')).toBeInTheDocument();\n      expect(screen.getByText('轮次')).toBeInTheDocument();\n      expect(screen.getByText('价格')).toBeInTheDocument();\n\n      // 检查交易数据\n      expect(screen.getByText('0x1234...1234')).toBeInTheDocument();\n      expect(screen.getByText('0xabcd...abcd')).toBeInTheDocument();\n\n      // 检查BNB数量\n      expect(screen.getByText('1.0000')).toBeInTheDocument();\n      expect(screen.getByText('2.0000')).toBeInTheDocument();\n\n      // 检查SM数量\n      expect(screen.getByText('1000.00')).toBeInTheDocument();\n      expect(screen.getByText('2000.00')).toBeInTheDocument();\n    });\n  });\n\n  it('respects maxItems prop', async () => {\n    // 添加更多模拟事件\n    const manyEvents = [\n      ...mockEvents,\n      {\n        transactionHash: '0x111111111111111111111111111111111111111111111111111111111111111',\n        args: {\n          bnbAmount: ethers.parseEther('3'),\n          tokenAmount: ethers.parseEther('3000'),\n          timestamp: 1625270400n, // 2021-07-03\n          round: 0n,\n          price: ethers.parseEther('0.000001'),\n        },\n      },\n    ];\n\n    (ethers.Contract as jest.Mock).mockImplementationOnce(() => ({\n      filters: {\n        TokensExchanged: jest.fn().mockReturnValue({}),\n      },\n      queryFilter: jest.fn().mockResolvedValue(manyEvents),\n    }));\n\n    // 设置maxItems为2\n    render(<TransactionHistory maxItems={2} />);\n\n    await waitFor(() => {\n      // 应该只显示2个交易\n      const rows = screen.getAllByRole('row');\n      // +1是因为表头也算一行\n      expect(rows.length).toBe(3);\n    });\n  });\n});\n"],"names":["jest","mock","useAccount","fn","hasEthereum","original","requireActual","BrowserProvider","mockImplementation","getSigner","mockResolvedValue","getAddress","Contract","filters","TokensExchanged","mockReturnValue","queryFilter","mockEvents","transactionHash","args","bnbAmount","ethers","parseEther","tokenAmount","timestamp","round","price","describe","beforeEach","clearAllMocks","address","isConnected","global","window","ethereum","request","on","removeListener","it","render","TransactionHistory","expect","screen","getByText","toBeInTheDocument","undefined","mockImplementationOnce","Error","waitFor","manyEvents","maxItems","rows","getAllByRole","length","toBe"],"mappings":"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"}