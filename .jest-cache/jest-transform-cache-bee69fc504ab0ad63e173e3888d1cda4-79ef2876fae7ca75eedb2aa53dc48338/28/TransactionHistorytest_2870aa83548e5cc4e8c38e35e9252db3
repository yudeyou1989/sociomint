ae13e977593ade3e9a91cee0cf807f50
"use strict";
// 模拟依赖
jest.mock('wagmi', ()=>({
        useAccount: jest.fn()
    }));
jest.mock('../services/walletService', ()=>({
        hasEthereum: jest.fn()
    }));
jest.mock('ethers', ()=>{
    const original = jest.requireActual('ethers');
    return {
        ...original,
        BrowserProvider: jest.fn().mockImplementation(()=>({
                getSigner: jest.fn().mockResolvedValue({
                    getAddress: jest.fn().mockResolvedValue('0x123')
                })
            })),
        Contract: jest.fn().mockImplementation(()=>({
                filters: {
                    TokensExchanged: jest.fn().mockReturnValue({})
                },
                queryFilter: jest.fn().mockResolvedValue(mockEvents)
            }))
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _TransactionHistory = /*#__PURE__*/ _interop_require_default(require("../TransactionHistory"));
const _wagmi = require("wagmi");
const _walletService = require("../services/walletService");
const _ethers = require("ethers");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 模拟事件数据
const mockEvents = [
    {
        transactionHash: '0x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234',
        args: {
            bnbAmount: _ethers.ethers.parseEther('1'),
            tokenAmount: _ethers.ethers.parseEther('1000'),
            timestamp: 1625097600n,
            round: 0n,
            price: _ethers.ethers.parseEther('0.000001')
        }
    },
    {
        transactionHash: '0xabcdef123456789abcdef123456789abcdef123456789abcdef123456789abcd',
        args: {
            bnbAmount: _ethers.ethers.parseEther('2'),
            tokenAmount: _ethers.ethers.parseEther('2000'),
            timestamp: 1625184000n,
            round: 0n,
            price: _ethers.ethers.parseEther('0.000001')
        }
    }
];
describe('TransactionHistory', ()=>{
    beforeEach(()=>{
        // 重置所有模拟
        jest.clearAllMocks();
        // 默认模拟值
        _wagmi.useAccount.mockReturnValue({
            address: '0x123456789abcdef',
            isConnected: true
        });
        _walletService.hasEthereum.mockReturnValue(true);
        // 模拟window.ethereum
        global.window.ethereum = {
            request: jest.fn(),
            on: jest.fn(),
            removeListener: jest.fn()
        };
    });
    it('renders loading state initially', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {}));
        expect(_react1.screen.getByText('加载中...')).toBeInTheDocument();
    });
    it('renders wallet not connected message when not connected', ()=>{
        _wagmi.useAccount.mockReturnValue({
            address: undefined,
            isConnected: false
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {}));
        expect(_react1.screen.getByText('请连接钱包查看您的交易历史')).toBeInTheDocument();
    });
    it('renders error message when there is an error', async ()=>{
        // 模拟Contract抛出错误
        _ethers.ethers.Contract.mockImplementationOnce(()=>{
            throw new Error('获取交易历史失败');
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('获取交易历史失败，请稍后再试')).toBeInTheDocument();
        });
    });
    it('renders empty state when no transactions', async ()=>{
        // 模拟没有交易
        _ethers.ethers.Contract.mockImplementationOnce(()=>({
                filters: {
                    TokensExchanged: jest.fn().mockReturnValue({})
                },
                queryFilter: jest.fn().mockResolvedValue([])
            }));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('暂无交易记录')).toBeInTheDocument();
        });
    });
    it('renders transaction history correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {}));
        await (0, _react1.waitFor)(()=>{
            // 检查表头
            expect(_react1.screen.getByText('交易哈希')).toBeInTheDocument();
            expect(_react1.screen.getByText('BNB 数量')).toBeInTheDocument();
            expect(_react1.screen.getByText('SM 数量')).toBeInTheDocument();
            expect(_react1.screen.getByText('时间')).toBeInTheDocument();
            expect(_react1.screen.getByText('轮次')).toBeInTheDocument();
            expect(_react1.screen.getByText('价格')).toBeInTheDocument();
            // 检查交易数据
            expect(_react1.screen.getByText('0x1234...1234')).toBeInTheDocument();
            expect(_react1.screen.getByText('0xabcd...abcd')).toBeInTheDocument();
            // 检查BNB数量
            expect(_react1.screen.getByText('1.0000')).toBeInTheDocument();
            expect(_react1.screen.getByText('2.0000')).toBeInTheDocument();
            // 检查SM数量
            expect(_react1.screen.getByText('1000.00')).toBeInTheDocument();
            expect(_react1.screen.getByText('2000.00')).toBeInTheDocument();
        });
    });
    it('respects maxItems prop', async ()=>{
        // 添加更多模拟事件
        const manyEvents = [
            ...mockEvents,
            {
                transactionHash: '0x111111111111111111111111111111111111111111111111111111111111111',
                args: {
                    bnbAmount: _ethers.ethers.parseEther('3'),
                    tokenAmount: _ethers.ethers.parseEther('3000'),
                    timestamp: 1625270400n,
                    round: 0n,
                    price: _ethers.ethers.parseEther('0.000001')
                }
            }
        ];
        _ethers.ethers.Contract.mockImplementationOnce(()=>({
                filters: {
                    TokensExchanged: jest.fn().mockReturnValue({})
                },
                queryFilter: jest.fn().mockResolvedValue(manyEvents)
            }));
        // 设置maxItems为2
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TransactionHistory.default, {
            maxItems: 2
        }));
        await (0, _react1.waitFor)(()=>{
            // 应该只显示2个交易
            const rows = _react1.screen.getAllByRole('row');
            // +1是因为表头也算一行
            expect(rows.length).toBe(3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,