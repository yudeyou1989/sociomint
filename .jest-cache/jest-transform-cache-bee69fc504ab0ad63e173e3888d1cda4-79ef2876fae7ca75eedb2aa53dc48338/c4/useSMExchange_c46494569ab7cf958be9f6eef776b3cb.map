{"version":3,"names":["cov_d4c3s0gg7","actualCoverage","s","useSMExchange","f","address","isConnected","_wagmi","useAccount","data","exchangeStats","refetch","refetchExchangeStats","isLoading","isLoadingStats","error","statsError","useContractRead","_contracts","CONTRACT_ADDRESSES","exchange","abi","SM_EXCHANGE_ABI","functionName","enabled","totalTokensSold","b","BigInt","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","userData","refetchUserData","isLoadingUserData","userDataError","args","undefined","totalPurchases","isVerified","lastPurchaseTime","Number","hasRefundRequest","exchangeData","write","exchangeTokens","isExchanging","isSuccess","isExchangeSuccess","exchangeError","useContractWrite","isExchangePending","isExchangeConfirmed","useWaitForTransaction","hash","calculateTokenAmount","bnbAmount","bnbValue","_viem","parseEther","tokenAmount","toFixed","console","performExchange","value","exchangeTxHash"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/useSMExchange.ts"],"sourcesContent":["'use client';\n\nimport { useAccount, useContractRead, useContractWrite, useWaitForTransaction } from 'wagmi';\nimport { parseEther } from 'viem';\nimport { CONTRACT_ADDRESSES, SM_EXCHANGE_ABI } from '@/constants/contracts';\n\nexport function useSMExchange() {\n  const { address, isConnected } = useAccount();\n\n  // 获取交易所统计信息\n  const { \n    data: exchangeStats, \n    refetch: refetchExchangeStats,\n    isLoading: isLoadingStats,\n    error: statsError\n  } = useContractRead({\n    address: CONTRACT_ADDRESSES.exchange as `0x${string}`,\n    abi: SM_EXCHANGE_ABI,\n    functionName: 'getExchangeStats',\n    enabled: isConnected,\n  });\n\n  // 解析交易所统计信息\n  const totalTokensSold = exchangeStats ? exchangeStats[0] : BigInt(0);\n  const totalTokensRemaining = exchangeStats ? exchangeStats[1] : BigInt(0);\n  const totalBnbRaised = exchangeStats ? exchangeStats[2] : BigInt(0);\n  const currentPrice = exchangeStats ? exchangeStats[3] : BigInt(0);\n  const nextRoundPrice = exchangeStats ? exchangeStats[4] : BigInt(0);\n\n  // 获取用户数据\n  const { \n    data: userData, \n    refetch: refetchUserData,\n    isLoading: isLoadingUserData,\n    error: userDataError\n  } = useContractRead({\n    address: CONTRACT_ADDRESSES.exchange as `0x${string}`,\n    abi: SM_EXCHANGE_ABI,\n    functionName: 'userData',\n    args: address ? [address] : undefined,\n    enabled: isConnected && !!address,\n  });\n\n  // 解析用户数据\n  const totalPurchases = userData ? userData[0] : BigInt(0);\n  const isVerified = userData ? userData[1] : false;\n  const lastPurchaseTime = userData ? Number(userData[2]) : 0;\n  const hasRefundRequest = userData ? userData[3] : false;\n\n  // 兑换代币函数\n  const { \n    data: exchangeData,\n    write: exchangeTokens,\n    isLoading: isExchanging,\n    isSuccess: isExchangeSuccess,\n    error: exchangeError\n  } = useContractWrite({\n    address: CONTRACT_ADDRESSES.exchange as `0x${string}`,\n    abi: SM_EXCHANGE_ABI,\n    functionName: 'exchangeTokens',\n  });\n\n  // 等待兑换交易确认\n  const { \n    isLoading: isExchangePending,\n    isSuccess: isExchangeConfirmed\n  } = useWaitForTransaction({\n    hash: exchangeData?.hash,\n  });\n\n  // 计算BNB可获得的代币数量\n  const calculateTokenAmount = (bnbAmount: string) => {\n    if (!bnbAmount || !currentPrice || BigInt(currentPrice) === BigInt(0)) {\n      return '0';\n    }\n    \n    try {\n      const bnbValue = parseEther(bnbAmount);\n      const tokenAmount = bnbValue * BigInt(10**18) / currentPrice;\n      return (Number(tokenAmount) / 10**18).toFixed(2);\n    } catch (error) {\n      console.error('计算代币数量错误:', error);\n      return '0';\n    }\n  };\n\n  // 执行兑换代币\n  const performExchange = async (bnbAmount: string) => {\n    if (!bnbAmount) return false;\n    \n    try {\n      exchangeTokens({\n        value: parseEther(bnbAmount),\n      });\n      return true;\n    } catch (error) {\n      console.error('兑换代币错误:', error);\n      return false;\n    }\n  };\n\n  return {\n    // 交易所状态\n    totalTokensSold,\n    totalTokensRemaining,\n    totalBnbRaised,\n    currentPrice,\n    nextRoundPrice,\n    refetchExchangeStats,\n    isLoadingStats,\n    statsError,\n    \n    // 用户数据\n    totalPurchases,\n    isVerified,\n    lastPurchaseTime,\n    hasRefundRequest,\n    refetchUserData,\n    isLoadingUserData,\n    userDataError,\n    \n    // 兑换功能\n    exchangeTokens: performExchange,\n    isExchanging: isExchanging || isExchangePending,\n    isExchangeSuccess: isExchangeSuccess && isExchangeConfirmed,\n    exchangeError,\n    exchangeTxHash: exchangeData?.hash,\n    \n    // 工具函数\n    calculateTokenAmount,\n    \n    // 连接状态\n    isConnected,\n    address\n  };\n}\n"],"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","ignoreList":[]}