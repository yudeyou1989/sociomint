{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/e2e/UserJourney.test.tsx"],"sourcesContent":["/**\n * 端到端用户旅程测试\n * 测试完整的用户交互流程\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport App from '../../App';\n\n// 模拟完整的应用环境\nconst mockEthereum = {\n  request: jest.fn(),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n};\n\nconst mockContract = {\n  // Token contract methods\n  name: jest.fn().mockResolvedValue('SocioMint Token'),\n  symbol: jest.fn().mockResolvedValue('SM'),\n  decimals: jest.fn().mockResolvedValue(18),\n  balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n  hasRole: jest.fn().mockResolvedValue(false),\n  \n  // Exchange contract methods\n  getExchangeStats: jest.fn().mockResolvedValue({\n    totalTokensSold: BigInt('1000000000000000000000'),\n    totalTokensRemaining: BigInt('9000000000000000000000'),\n    totalBnbRaised: BigInt('100000000000000000000'),\n    currentPrice: BigInt('833000000000'),\n    nextRoundPrice: BigInt('974900000000'),\n    isActive: true,\n    currentRound: 0,\n  }),\n  exchangeTokens: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  getUserData: jest.fn().mockResolvedValue({\n    totalPurchased: BigInt('50000000000000000000'),\n    lastPurchaseTime: BigInt('1640995200'),\n    isVerified: true,\n  }),\n  isUserVerified: jest.fn().mockResolvedValue(true),\n  minPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000')),\n  maxPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000000')),\n  \n  // Transaction history\n  queryFilter: jest.fn().mockResolvedValue([\n    {\n      args: {\n        buyer: '0x123456789abcdef',\n        bnbAmount: BigInt('1000000000000000000'),\n        tokenAmount: BigInt('1200000000000000000000'),\n        timestamp: 1640995200n,\n        round: 0n,\n        price: BigInt('833000000000'),\n      },\n      blockNumber: 12345,\n      transactionHash: '0xabcdef123456789',\n    }\n  ]),\n  filters: {\n    TokensExchanged: jest.fn().mockReturnValue({}),\n  },\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('5000000000000000000')), // 5 BNB\n  getNetwork: jest.fn().mockResolvedValue({ chainId: 97n, name: 'bsc-testnet' }),\n  send: jest.fn().mockResolvedValue(['0x123456789abcdef123456789abcdef123456789a']),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation(() => mockContract),\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  formatUnits: jest.fn().mockImplementation((value, decimals) => {\n    return (Number(value) / Math.pow(10, decimals)).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n}));\n\n// 模拟路由\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  BrowserRouter: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  Routes: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n  Route: ({ element }: { element: React.ReactNode }) => <div>{element}</div>,\n  useNavigate: () => jest.fn(),\n  useLocation: () => ({ pathname: '/' }),\n}));\n\ndescribe('End-to-End User Journey Tests', () => {\n  const user = userEvent.setup();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 设置默认的 ethereum 响应\n    mockEthereum.request.mockImplementation((params) => {\n      if (params.method === 'eth_requestAccounts') {\n        return Promise.resolve(['0x123456789abcdef123456789abcdef123456789a']);\n      }\n      if (params.method === 'wallet_switchEthereumChain') {\n        return Promise.resolve();\n      }\n      return Promise.resolve();\n    });\n    \n    // 模拟 window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: mockEthereum,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  describe('Complete User Journey: From Landing to Token Purchase', () => {\n    it('should complete full user journey successfully', async () => {\n      render(<App />);\n\n      // 1. 用户访问首页\n      expect(screen.getByText('SocioMint')).toBeInTheDocument();\n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n\n      // 2. 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(mockEthereum.request).toHaveBeenCalledWith({\n          method: 'eth_requestAccounts'\n        });\n      });\n\n      // 3. 验证钱包连接成功\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 4. 查看用户余额\n      await waitFor(() => {\n        expect(screen.getByText(/BNB 余额/)).toBeInTheDocument();\n        expect(screen.getByText(/SM 余额/)).toBeInTheDocument();\n      });\n\n      // 5. 导航到交换页面\n      const exchangeLink = screen.getByText('代币兑换');\n      await user.click(exchangeLink);\n\n      // 6. 查看交换统计信息\n      await waitFor(() => {\n        expect(screen.getByText(/已售出代币/)).toBeInTheDocument();\n        expect(screen.getByText(/当前价格/)).toBeInTheDocument();\n      });\n\n      // 7. 输入购买金额\n      const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n      await user.clear(bnbInput);\n      await user.type(bnbInput, '1.0');\n\n      // 8. 查看预览信息\n      await waitFor(() => {\n        expect(screen.getByText(/您将获得/)).toBeInTheDocument();\n      });\n\n      // 9. 执行购买\n      const purchaseButton = screen.getByText('购买代币');\n      await user.click(purchaseButton);\n\n      // 10. 确认交易\n      await waitFor(() => {\n        expect(mockContract.exchangeTokens).toHaveBeenCalledWith({\n          value: expect.any(BigInt)\n        });\n      });\n\n      // 11. 等待交易确认\n      await waitFor(() => {\n        expect(screen.getByText(/交易成功/)).toBeInTheDocument();\n      });\n\n      // 12. 查看更新后的余额\n      await waitFor(() => {\n        expect(mockContract.balanceOf).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle wallet connection errors gracefully', async () => {\n      // 模拟用户拒绝连接\n      mockEthereum.request.mockRejectedValue(new Error('User rejected the request'));\n\n      render(<App />);\n\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('连接钱包')).toBeInTheDocument();\n        // 应该显示错误信息或保持未连接状态\n      });\n    });\n\n    it('should handle insufficient balance scenario', async () => {\n      // 模拟余额不足\n      mockProvider.getBalance.mockResolvedValue(BigInt('100000000000000000')); // 0.1 BNB\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 尝试购买超过余额的金额\n      const exchangeLink = screen.getByText('代币兑换');\n      await user.click(exchangeLink);\n\n      const bnbInput = screen.getByPlaceholderText('输入 BNB 数量');\n      await user.clear(bnbInput);\n      await user.type(bnbInput, '1.0');\n\n      const purchaseButton = screen.getByText('购买代币');\n      await user.click(purchaseButton);\n\n      // 应该显示余额不足的错误\n      await waitFor(() => {\n        expect(screen.getByText(/余额不足/)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle network switching', async () => {\n      // 模拟错误的网络\n      mockProvider.getNetwork.mockResolvedValue({ chainId: 1n, name: 'mainnet' });\n\n      render(<App />);\n\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      // 应该提示切换网络\n      await waitFor(() => {\n        expect(screen.getByText(/请切换到 BSC 测试网/)).toBeInTheDocument();\n      });\n\n      // 点击切换网络按钮\n      const switchNetworkButton = screen.getByText('切换网络');\n      await user.click(switchNetworkButton);\n\n      await waitFor(() => {\n        expect(mockEthereum.request).toHaveBeenCalledWith({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: '0x61' }], // BSC Testnet\n        });\n      });\n    });\n  });\n\n  describe('Transaction History Journey', () => {\n    it('should display transaction history correctly', async () => {\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交易历史\n      const historyLink = screen.getByText('交易历史');\n      await user.click(historyLink);\n\n      // 验证交易历史显示\n      await waitFor(() => {\n        expect(screen.getByText(/交易历史/)).toBeInTheDocument();\n        expect(mockContract.queryFilter).toHaveBeenCalled();\n      });\n\n      // 验证交易记录显示\n      await waitFor(() => {\n        expect(screen.getByText(/1.0 BNB/)).toBeInTheDocument();\n        expect(screen.getByText(/1,200 SM/)).toBeInTheDocument();\n      });\n    });\n\n    it('should handle empty transaction history', async () => {\n      mockContract.queryFilter.mockResolvedValue([]);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交易历史\n      const historyLink = screen.getByText('交易历史');\n      await user.click(historyLink);\n\n      // 验证空状态显示\n      await waitFor(() => {\n        expect(screen.getByText(/暂无交易记录/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Admin Panel Journey', () => {\n    it('should handle admin access correctly', async () => {\n      // 模拟管理员权限\n      mockContract.hasRole.mockResolvedValue(true);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到管理员面板\n      const adminLink = screen.getByText('管理员');\n      await user.click(adminLink);\n\n      // 验证管理员面板显示\n      await waitFor(() => {\n        expect(screen.getByText(/管理员面板/)).toBeInTheDocument();\n        expect(screen.getByText(/验证用户/)).toBeInTheDocument();\n      });\n    });\n\n    it('should deny access for non-admin users', async () => {\n      // 模拟非管理员用户\n      mockContract.hasRole.mockResolvedValue(false);\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 尝试访问管理员面板\n      const adminLink = screen.getByText('管理员');\n      await user.click(adminLink);\n\n      // 应该显示权限不足的消息\n      await waitFor(() => {\n        expect(screen.getByText(/权限不足/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Responsive Design Journey', () => {\n    it('should work correctly on mobile devices', async () => {\n      // 模拟移动设备视口\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 667,\n      });\n\n      render(<App />);\n\n      // 验证移动端布局\n      expect(screen.getByText('SocioMint')).toBeInTheDocument();\n      \n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 验证移动端导航\n      const menuButton = screen.getByRole('button', { name: /菜单/ });\n      await user.click(menuButton);\n\n      expect(screen.getByText('代币兑换')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Recovery Journey', () => {\n    it('should recover from network errors', async () => {\n      // 模拟网络错误\n      mockContract.getExchangeStats.mockRejectedValueOnce(new Error('Network error'));\n\n      render(<App />);\n\n      // 连接钱包\n      const connectButton = screen.getByText('连接钱包');\n      await user.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText('0x1234...789a')).toBeInTheDocument();\n      });\n\n      // 导航到交换页面\n      const exchangeLink = screen.getByText('代币兑换');\n      await user.click(exchangeLink);\n\n      // 应该显示错误状态\n      await waitFor(() => {\n        expect(screen.getByText(/加载失败/)).toBeInTheDocument();\n      });\n\n      // 点击重试按钮\n      mockContract.getExchangeStats.mockResolvedValue({\n        totalTokensSold: BigInt('1000000000000000000000'),\n        totalTokensRemaining: BigInt('9000000000000000000000'),\n        totalBnbRaised: BigInt('100000000000000000000'),\n        currentPrice: BigInt('833000000000'),\n        nextRoundPrice: BigInt('974900000000'),\n        isActive: true,\n        currentRound: 0,\n      });\n\n      const retryButton = screen.getByText('重试');\n      await user.click(retryButton);\n\n      // 应该恢复正常显示\n      await waitFor(() => {\n        expect(screen.getByText(/已售出代币/)).toBeInTheDocument();\n      });\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","Contract","mockContract","formatEther","value","Number","toString","formatUnits","decimals","Math","pow","parseEther","BigInt","floor","parseFloat","requireActual","BrowserRouter","children","div","Routes","Route","element","useNavigate","useLocation","pathname","mockEthereum","request","on","removeListener","isMetaMask","name","mockResolvedValue","symbol","balanceOf","hasRole","getExchangeStats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","exchangeTokens","hash","wait","status","getUserData","totalPurchased","lastPurchaseTime","isVerified","isUserVerified","minPurchaseAmount","maxPurchaseAmount","queryFilter","args","buyer","bnbAmount","tokenAmount","timestamp","round","price","blockNumber","transactionHash","filters","TokensExchanged","mockReturnValue","getSigner","getAddress","getBalance","getNetwork","chainId","send","describe","user","userEvent","setup","beforeEach","clearAllMocks","params","method","Promise","resolve","Object","defineProperty","window","writable","configurable","it","render","App","expect","screen","getByText","toBeInTheDocument","connectButton","click","waitFor","toHaveBeenCalledWith","exchangeLink","bnbInput","getByPlaceholderText","clear","type","purchaseButton","any","toHaveBeenCalled","mockRejectedValue","Error","switchNetworkButton","historyLink","adminLink","menuButton","getByRole","mockRejectedValueOnce","retryButton"],"mappings":"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"}