{"version":3,"names":["_default","TOKEN_ABI","cov_238nkvgryk","s","EXCHANGE_ABI","initialState","tokenBalance","totalPurchases","lastPurchaseTime","isVerified","tokenSymbol","loading","error","UserBalanceDisplay","className","f","address","isConnected","_wagmi","useAccount","state","setState","_react","useState","useEffect","fetchUserData","b","_walletService","hasEthereum","prev","provider","_ethers","ethers","BrowserProvider","window","ethereum","tokenContract","Contract","_contracts","CONTRACT_ADDRESSES","token","exchangeContract","exchange","symbol","balance","decimals","userData","verified","Promise","all","balanceOf","isUserVerified","formatUnits","formatEther","Number","err","console","formatTimestamp","timestamp","date","Date","toLocaleString","renderContent","_jsxruntime","jsx","jsxs","Fragment","slice","parseFloat"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/UserBalanceDisplay.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers, formatEther, formatUnits } from 'ethers';\nimport { CONTRACT_ADDRESSES } from './constants/contracts';\nimport { useAccount } from 'wagmi';\nimport { hasEthereum } from './services/walletService';\n\n// ABI 片段，只包含我们需要的函数\nconst TOKEN_ABI = [\n  \"function balanceOf(address account) view returns (uint256)\",\n  \"function symbol() view returns (string)\",\n  \"function decimals() view returns (uint8)\"\n];\n\nconst EXCHANGE_ABI = [\n  \"function userData(address user) view returns (uint256 totalPurchases, uint256 lastPurchaseTime)\",\n  \"function isUserVerified(address user) view returns (bool)\"\n];\n\ninterface UserBalanceDisplayProps {\n  className?: string;\n}\n\n// 状态接口\ninterface UserBalanceState {\n  tokenBalance: string;\n  totalPurchases: string;\n  lastPurchaseTime: number;\n  isVerified: boolean;\n  tokenSymbol: string;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: UserBalanceState = {\n  tokenBalance: '0',\n  totalPurchases: '0',\n  lastPurchaseTime: 0,\n  isVerified: false,\n  tokenSymbol: 'SM',\n  loading: true,\n  error: null\n};\n\nconst UserBalanceDisplay: React.FC<UserBalanceDisplayProps> = ({ className }) => {\n  const { address, isConnected } = useAccount();\n  const [state, setState] = useState<UserBalanceState>(initialState);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      if (!isConnected || !address || !hasEthereum()) {\n        setState(prev => ({ ...prev, loading: false }));\n        return;\n      }\n\n      try {\n        setState(prev => ({ ...prev, loading: true, error: null }));\n\n        // 连接到以太坊网络\n        const provider = new ethers.BrowserProvider(window.ethereum);\n\n        // 创建合约实例\n        const tokenContract = new ethers.Contract(\n          CONTRACT_ADDRESSES.token,\n          TOKEN_ABI,\n          provider\n        );\n\n        const exchangeContract = new ethers.Contract(\n          CONTRACT_ADDRESSES.exchange,\n          EXCHANGE_ABI,\n          provider\n        );\n\n        // 并行获取所有数据\n        const [symbol, balance, decimals, userData, verified] = await Promise.all([\n          tokenContract.symbol(),\n          tokenContract.balanceOf(address),\n          tokenContract.decimals(),\n          exchangeContract.userData(address),\n          exchangeContract.isUserVerified(address)\n        ]);\n\n        setState({\n          tokenSymbol: symbol,\n          tokenBalance: formatUnits(balance, decimals),\n          totalPurchases: formatEther(userData.totalPurchases),\n          lastPurchaseTime: Number(userData.lastPurchaseTime),\n          isVerified: verified,\n          loading: false,\n          error: null\n        });\n      } catch (err) {\n        console.error('获取用户数据失败:', err);\n        setState(prev => ({\n          ...prev,\n          loading: false,\n          error: '获取用户数据失败，请稍后再试'\n        }));\n      }\n    };\n\n    fetchUserData();\n  }, [address, isConnected]);\n\n  // 格式化时间戳为可读格式\n  const formatTimestamp = (timestamp: number): string => {\n    if (timestamp === 0) return '从未购买';\n    const date = new Date(timestamp * 1000);\n    return date.toLocaleString();\n  };\n\n  // 渲染不同状态的UI\n  const renderContent = () => {\n    const { loading, error, tokenBalance, tokenSymbol, totalPurchases, lastPurchaseTime, isVerified } = state;\n\n    if (!isConnected) {\n      return <p className=\"text-center text-gray-400\">请连接钱包查看您的余额</p>;\n    }\n\n    if (loading) {\n      return <p className=\"text-center text-gray-400\">加载中...</p>;\n    }\n\n    if (error) {\n      return <p className=\"text-center text-red-500\">{error}</p>;\n    }\n\n    return (\n      <>\n        <h2 className=\"text-xl font-bold mb-4 text-white\">用户资产</h2>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">钱包地址:</span>\n            <span className=\"text-white\">{address?.slice(0, 6)}...{address?.slice(-4)}</span>\n          </div>\n\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">代币余额:</span>\n            <span className=\"text-white\">{parseFloat(tokenBalance).toLocaleString()} {tokenSymbol}</span>\n          </div>\n\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">总购买金额:</span>\n            <span className=\"text-white\">{parseFloat(totalPurchases).toLocaleString()} BNB</span>\n          </div>\n\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">最后购买时间:</span>\n            <span className=\"text-white\">{formatTimestamp(lastPurchaseTime)}</span>\n          </div>\n\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-400\">验证状态:</span>\n            <span className={isVerified ? \"text-green-500\" : \"text-red-500\"}>\n              {isVerified ? \"已验证\" : \"未验证\"}\n            </span>\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className={`p-4 rounded-lg bg-gray-800 ${className}`}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default UserBalanceDisplay;\n"],"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","ignoreList":[]}