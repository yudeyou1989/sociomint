{"version":3,"names":["cov_itxmniaev","actualCoverage","s","connectWallet","f","createChainConfig","getCurrentAccount","getCurrentChainId","getNetworkInfo","getUserNetworks","hasEthereum","isBrowser","setupAccountChangeListener","switchNetwork","NETWORKS","chainId","name","currency","rpcUrl","blockExplorerUrl","testnet","window","b","ethereum","network","find","net","id","nativeCurrency","symbol","decimals","rpcUrls","default","http","public","blockExplorers","url","accounts","request","method","error","console","chainIdHex","parseInt","params","toString","chainName","blockExplorerUrls","addError","callback","handleAccountsChanged","on","removeListener"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/simpleWalletService.ts"],"sourcesContent":["'use client';\n\nimport { Chain } from 'wagmi/chains';\nimport { switchChain } from 'wagmi/actions';\n\n// 网络定义\nexport interface NetworkInfo {\n  chainId: number;\n  name: string;\n  currency: string;\n  rpcUrl: string;\n  blockExplorerUrl: string;\n  testnet: boolean;\n}\n\n// 支持的网络\nconst NETWORKS: NetworkInfo[] = [\n  {\n    chainId: 56,\n    name: 'BSC',\n    currency: 'BNB',\n    rpcUrl: 'https://bsc-dataseed.binance.org/',\n    blockExplorerUrl: 'https://bscscan.com',\n    testnet: false\n  },\n  {\n    chainId: 97,\n    name: 'BSC Testnet',\n    currency: 'tBNB',\n    rpcUrl: 'https://data-seed-prebsc-1-s1.binance.org:8545/',\n    blockExplorerUrl: 'https://testnet.bscscan.com',\n    testnet: true\n  }\n];\n\n// 检查是否在浏览器环境\nexport const isBrowser = () => typeof window !== 'undefined';\n\n// 检查是否有钱包可用\nexport const hasEthereum = (): boolean => {\n  return isBrowser() && typeof window.ethereum !== 'undefined';\n};\n\n// 获取所有支持的网络\nexport const getUserNetworks = (): NetworkInfo[] => {\n  return NETWORKS;\n};\n\n// 根据链ID获取网络信息\nexport const getNetworkInfo = (chainId: number): NetworkInfo | null => {\n  const network = NETWORKS.find(net => net.chainId === chainId);\n  return network || null;\n};\n\n// 创建Wagmi链对象\nexport const createChainConfig = (chainId: number): Chain | null => {\n  const network = getNetworkInfo(chainId);\n  \n  if (!network) return null;\n  \n  return {\n    id: network.chainId,\n    name: network.name,\n    nativeCurrency: {\n      name: network.currency,\n      symbol: network.currency,\n      decimals: 18\n    },\n    rpcUrls: {\n      default: { http: [network.rpcUrl] },\n      public: { http: [network.rpcUrl] },\n    },\n    blockExplorers: {\n      default: { name: network.name + ' Explorer', url: network.blockExplorerUrl },\n    },\n    testnet: network.testnet\n  } as Chain;\n};\n\n// 连接钱包\nexport const connectWallet = async (): Promise<string | null> => {\n  // 仅在浏览器环境执行\n  if (!hasEthereum()) return null;\n  \n  try {\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    return accounts[0] || null;\n  } catch (error) {\n    console.error('连接钱包时出错:', error);\n    return null;\n  }\n};\n\n// 获取当前账户\nexport const getCurrentAccount = async (): Promise<string | null> => {\n  // 仅在浏览器环境执行\n  if (!hasEthereum()) return null;\n  \n  try {\n    const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n    return accounts[0] || null;\n  } catch (error) {\n    console.error('获取账户时出错:', error);\n    return null;\n  }\n};\n\n// 获取当前链ID\nexport const getCurrentChainId = async (): Promise<number | null> => {\n  // 仅在浏览器环境执行\n  if (!hasEthereum()) return null;\n  \n  try {\n    const chainIdHex = await window.ethereum.request({ method: 'eth_chainId' });\n    return chainIdHex ? parseInt(chainIdHex, 16) : null;\n  } catch (error) {\n    console.error('获取链ID时出错:', error);\n    return null;\n  }\n};\n\n// 切换网络\nexport const switchNetwork = async (chainId: number): Promise<boolean> => {\n  // 仅在浏览器环境执行\n  if (!hasEthereum()) return false;\n  \n  try {\n    // 不使用 wagmi 的 switchChain，而是直接使用 ethereum API\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: `0x${chainId.toString(16)}` }]\n    });\n    return true;\n  } catch (error) {\n    console.error('切换网络时出错:', error);\n    \n    // 如果网络不存在，尝试添加\n    const network = getNetworkInfo(chainId);\n    if (network) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: network.name,\n            nativeCurrency: {\n              name: network.currency,\n              symbol: network.currency,\n              decimals: 18\n            },\n            rpcUrls: [network.rpcUrl],\n            blockExplorerUrls: [network.blockExplorerUrl]\n          }]\n        });\n        return true;\n      } catch (addError) {\n        console.error('添加网络时出错:', addError);\n        return false;\n      }\n    }\n    return false;\n  }\n};\n\n// 设置账户变化监听器\nexport const setupAccountChangeListener = (callback: (accounts: string[]) => void): (() => void) | null => {\n  // 仅在浏览器环境执行\n  if (!hasEthereum()) return null;\n  \n  const handleAccountsChanged = (accounts: string[]) => {\n    callback(accounts);\n  };\n  \n  window.ethereum.on('accountsChanged', handleAccountsChanged);\n  \n  // 返回清理函数\n  return () => {\n    window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n  };\n};\n"],"mappingsuDa;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;EAyBAC,aAAa,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAbC,aAAA;;EAzBAE,iBAAiB,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAjBG,iBAAA;;EAuCAC,iBAAiB,WAAAA,CAAA;IAAA;IAAAN,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAjBI,iBAAA;;EAcAC,iBAAiB,WAAAA,CAAA;IAAA;IAAAP,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAjBK,iBAAA;;EA3DAC,cAAc,WAAAA,CAAA;IAAA;IAAAR,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAdM,cAAA;;EALAC,eAAe,WAAAA,CAAA;IAAA;IAAAT,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAfO,eAAA;;EALAC,WAAW,WAAAA,CAAA;IAAA;IAAAV,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAXQ,WAAA;;EAHAC,SAAS,WAAAA,CAAA;IAAA;IAAAX,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAATS,SAAA;;EAiIAC,0BAA0B,WAAAA,CAAA;IAAA;IAAAZ,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAA1BU,0BAAA;;EA3CAC,aAAa,WAAAA,CAAA;IAAA;IAAAb,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAbW,aAAA;;;AA3Gb;AACA,MAAMC,QAAA;AAAA;AAAA,CAAAd,aAAA,GAAAE,CAAA,QAA0B,CAC9B;EACEa,OAAA,EAAS;EACTC,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,MAAA,EAAQ;EACRC,gBAAA,EAAkB;EAClBC,OAAA,EAAS;AACX,GACA;EACEL,OAAA,EAAS;EACTC,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,MAAA,EAAQ;EACRC,gBAAA,EAAkB;EAClBC,OAAA,EAAS;AACX,EACD;AAAA;AAAApB,aAAA,GAAAE,CAAA;AAGM,MAAMS,SAAA,GAAYA,CAAA,KAAM;EAAA;EAAAX,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,cAAOmB,MAAA,KAAW;AAAA;AAAA;AAAArB,aAAA,GAAAE,CAAA;AAG1C,MAAMQ,WAAA,GAAcA,CAAA;EAAA;EAAAV,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACzB,OAAO,2BAAAF,aAAA,GAAAsB,CAAA,UAAAX,SAAA;EAAA;EAAA,CAAAX,aAAA,GAAAsB,CAAA,UAAe,OAAOD,MAAA,CAAOE,QAAQ,KAAK;AACnD;AAAA;AAAAvB,aAAA,GAAAE,CAAA;AAGO,MAAMO,eAAA,GAAkBA,CAAA;EAAA;EAAAT,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC7B,OAAOY,QAAA;AACT;AAAA;AAAAd,aAAA,GAAAE,CAAA;AAGO,MAAMM,cAAA,GAAkBO,OAAA;EAAA;EAAAf,aAAA,GAAAI,CAAA;EAC7B,MAAMoB,OAAA;EAAA;EAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAUY,QAAA,CAASW,IAAI,CAACC,GAAA,IAAO;IAAA;IAAA1B,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAAA,OAAAwB,GAAA,CAAIX,OAAO,KAAKA,OAAA;EAAA;EAAA;EAAAf,aAAA,GAAAE,CAAA;EACrD,OAAO,2BAAAF,aAAA,GAAAsB,CAAA,UAAAE,OAAA;EAAA;EAAA,CAAAxB,aAAA,GAAAsB,CAAA,UAAW;AACpB;AAAA;AAAAtB,aAAA,GAAAE,CAAA;AAGO,MAAMG,iBAAA,GAAqBU,OAAA;EAAA;EAAAf,aAAA,GAAAI,CAAA;EAChC,MAAMoB,OAAA;EAAA;EAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAUM,cAAA,CAAeO,OAAA;EAAA;EAAAf,aAAA,GAAAE,CAAA;EAE/B,IAAI,CAACsB,OAAA,EAAS;IAAA;IAAAxB,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAErB,OAAO;IACLyB,EAAA,EAAIH,OAAA,CAAQT,OAAO;IACnBC,IAAA,EAAMQ,OAAA,CAAQR,IAAI;IAClBY,cAAA,EAAgB;MACdZ,IAAA,EAAMQ,OAAA,CAAQP,QAAQ;MACtBY,MAAA,EAAQL,OAAA,CAAQP,QAAQ;MACxBa,QAAA,EAAU;IACZ;IACAC,OAAA,EAAS;MACPC,OAAA,EAAS;QAAEC,IAAA,EAAM,CAACT,OAAA,CAAQN,MAAM;MAAE;MAClCgB,MAAA,EAAQ;QAAED,IAAA,EAAM,CAACT,OAAA,CAAQN,MAAM;MAAE;IACnC;IACAiB,cAAA,EAAgB;MACdH,OAAA,EAAS;QAAEhB,IAAA,EAAMQ,OAAA,CAAQR,IAAI,GAAG;QAAaoB,GAAA,EAAKZ,OAAA,CAAQL;MAAiB;IAC7E;IACAC,OAAA,EAASI,OAAA,CAAQJ;EACnB;AACF;AAAA;AAAApB,aAAA,GAAAE,CAAA;AAGO,MAAMC,aAAA,GAAgB,MAAAA,CAAA;EAAA;EAAAH,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC3B;EACA,IAAI,CAACQ,WAAA,IAAe;IAAA;IAAAV,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAE3B,IAAI;IACF,MAAMmC,QAAA;IAAA;IAAA,CAAArC,aAAA,GAAAE,CAAA,QAAW,MAAMmB,MAAA,CAAOE,QAAQ,CAACe,OAAO,CAAC;MAAEC,MAAA,EAAQ;IAAsB;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IAC/E,OAAO,2BAAAF,aAAA,GAAAsB,CAAA,UAAAe,QAAQ,CAAC,EAAE;IAAA;IAAA,CAAArC,aAAA,GAAAsB,CAAA,UAAI;EACxB,EAAE,OAAOkB,KAAA,EAAO;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IACduC,OAAA,CAAQD,KAAK,CAAC,YAAYA,KAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAC1B,OAAO;EACT;AACF;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAGO,MAAMI,iBAAA,GAAoB,MAAAA,CAAA;EAAA;EAAAN,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC/B;EACA,IAAI,CAACQ,WAAA,IAAe;IAAA;IAAAV,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAE3B,IAAI;IACF,MAAMmC,QAAA;IAAA;IAAA,CAAArC,aAAA,GAAAE,CAAA,QAAW,MAAMmB,MAAA,CAAOE,QAAQ,CAACe,OAAO,CAAC;MAAEC,MAAA,EAAQ;IAAe;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACxE,OAAO,2BAAAF,aAAA,GAAAsB,CAAA,UAAAe,QAAQ,CAAC,EAAE;IAAA;IAAA,CAAArC,aAAA,GAAAsB,CAAA,UAAI;EACxB,EAAE,OAAOkB,KAAA,EAAO;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IACduC,OAAA,CAAQD,KAAK,CAAC,YAAYA,KAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAC1B,OAAO;EACT;AACF;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAGO,MAAMK,iBAAA,GAAoB,MAAAA,CAAA;EAAA;EAAAP,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC/B;EACA,IAAI,CAACQ,WAAA,IAAe;IAAA;IAAAV,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAE3B,IAAI;IACF,MAAMwC,UAAA;IAAA;IAAA,CAAA1C,aAAA,GAAAE,CAAA,QAAa,MAAMmB,MAAA,CAAOE,QAAQ,CAACe,OAAO,CAAC;MAAEC,MAAA,EAAQ;IAAc;IAAA;IAAAvC,aAAA,GAAAE,CAAA;IACzE,OAAOwC,UAAA;IAAA;IAAA,CAAA1C,aAAA,GAAAsB,CAAA,UAAaqB,QAAA,CAASD,UAAA,EAAY;IAAA;IAAA,CAAA1C,aAAA,GAAAsB,CAAA,UAAM;EACjD,EAAE,OAAOkB,KAAA,EAAO;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IACduC,OAAA,CAAQD,KAAK,CAAC,aAAaA,KAAA;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IAC3B,OAAO;EACT;AACF;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAGO,MAAMW,aAAA,GAAgB,MAAOE,OAAA;EAAA;EAAAf,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAClC;EACA,IAAI,CAACQ,WAAA,IAAe;IAAA;IAAAV,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAE3B,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACF;IACA,MAAMmB,MAAA,CAAOE,QAAQ,CAACe,OAAO,CAAC;MAC5BC,MAAA,EAAQ;MACRK,MAAA,EAAQ,CAAC;QAAE7B,OAAA,EAAS,KAAKA,OAAA,CAAQ8B,QAAQ,CAAC;MAAM;IAClD;IAAA;IAAA7C,aAAA,GAAAE,CAAA;IACA,OAAO;EACT,EAAE,OAAOsC,KAAA,EAAO;IAAA;IAAAxC,aAAA,GAAAE,CAAA;IACduC,OAAA,CAAQD,KAAK,CAAC,YAAYA,KAAA;IAE1B;IACA,MAAMhB,OAAA;IAAA;IAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAUM,cAAA,CAAeO,OAAA;IAAA;IAAAf,aAAA,GAAAE,CAAA;IAC/B,IAAIsB,OAAA,EAAS;MAAA;MAAAxB,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAE,CAAA;MACX,IAAI;QAAA;QAAAF,aAAA,GAAAE,CAAA;QACF,MAAMmB,MAAA,CAAOE,QAAQ,CAACe,OAAO,CAAC;UAC5BC,MAAA,EAAQ;UACRK,MAAA,EAAQ,CAAC;YACP7B,OAAA,EAAS,KAAKA,OAAA,CAAQ8B,QAAQ,CAAC,KAAK;YACpCC,SAAA,EAAWtB,OAAA,CAAQR,IAAI;YACvBY,cAAA,EAAgB;cACdZ,IAAA,EAAMQ,OAAA,CAAQP,QAAQ;cACtBY,MAAA,EAAQL,OAAA,CAAQP,QAAQ;cACxBa,QAAA,EAAU;YACZ;YACAC,OAAA,EAAS,CAACP,OAAA,CAAQN,MAAM,CAAC;YACzB6B,iBAAA,EAAmB,CAACvB,OAAA,CAAQL,gBAAgB;UAC9C;QACF;QAAA;QAAAnB,aAAA,GAAAE,CAAA;QACA,OAAO;MACT,EAAE,OAAO8C,QAAA,EAAU;QAAA;QAAAhD,aAAA,GAAAE,CAAA;QACjBuC,OAAA,CAAQD,KAAK,CAAC,YAAYQ,QAAA;QAAA;QAAAhD,aAAA,GAAAE,CAAA;QAC1B,OAAO;MACT;IACF;IAAA;IAAA;MAAAF,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IACA,OAAO;EACT;AACF;AAAA;AAAAF,aAAA,GAAAE,CAAA;AAGO,MAAMU,0BAAA,GAA8BqC,QAAA;EAAA;EAAAjD,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACzC;EACA,IAAI,CAACQ,WAAA,IAAe;IAAA;IAAAV,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAE,CAAA;EAE3B,MAAMgD,qBAAA,GAAyBb,QAAA;IAAA;IAAArC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC7B+C,QAAA,CAASZ,QAAA;EACX;EAAA;EAAArC,aAAA,GAAAE,CAAA;EAEAmB,MAAA,CAAOE,QAAQ,CAAC4B,EAAE,CAAC,mBAAmBD,qBAAA;EAEtC;EAAA;EAAAlD,aAAA,GAAAE,CAAA;EACA,OAAO;IAAA;IAAAF,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACLmB,MAAA,CAAOE,QAAQ,CAAC6B,cAAc,CAAC,mBAAmBF,qBAAA;EACpD;AACF","ignoreList":[]}