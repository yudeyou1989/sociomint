{"version":3,"names":["cov_2e9w7anruz","actualCoverage","s","WalletProvider","f","useWallet","walletService","walletServicePromise","loadWalletService","window","b","Promise","resolve","then","_interop_require_wildcard","require","service","catch","error","console","logger","_logger","default","createContextLogger","component","defaultWalletState","isConnected","defaultAvailableWallets","type","name","icon","installed","WalletContext","_react","createContext","wallet","connect","disconnect","updateBalances","connectWallet","disconnectWallet","isConnecting","availableWallets","checkIfBrowserHasWallet","ethereum","getEthereumProvider","Error","_ethers","ethers","BrowserProvider","connectToWallet","provider","send","signer","getSigner","address","getAddress","networkInfo","getNetwork","chainId","Number","_contractService","initialize","bnbBalance","getBalance","smBalance","getTokenBalance","warn","network","id","balance","bnb","formatEther","sm","account","children","setWallet","useState","setIsConnecting","setAvailableWallets","info","action","additionalData","walletType","connectedWallet","race","_","reject","setTimeout","result","connectWalletByType","BigNumber","from","getNetworkInfo","errorMessage","message","getConnectedWalletType","disconnectWalletService","log","prev","_jsxruntime","jsx","Provider","value","useContext"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/contexts/WalletContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { ethers, formatEther } from 'ethers';\nimport contractService from '@/services/contractService';\nimport Logger from '@/services/logger';\nimport config from '@/lib/config';\n\n// 动态导入钱包服务以避免SSR问题\nlet walletService: any = null;\nlet walletServicePromise: Promise<any> | null = null;\n\nconst loadWalletService = async () => {\n  if (typeof window === 'undefined') return null;\n\n  // 避免重复加载\n  if (walletService) return walletService;\n\n  // 如果正在加载，返回现有的Promise\n  if (walletServicePromise) return walletServicePromise;\n\n  walletServicePromise = import('@/services/walletService').then(service => {\n    walletService = service;\n    return service;\n  }).catch(error => {\n    console.error('Failed to load wallet service:', error);\n    walletServicePromise = null; // 重置Promise以允许重试\n    throw error;\n  });\n\n  return walletServicePromise;\n};\n\n// 创建日志记录器\nconst logger = Logger.createContextLogger({ component: 'WalletContext' });\n\n// 钱包状态接口\nexport interface WalletState {\n  isConnected: boolean;\n  address?: string;\n  chainId?: number;\n  balance?: {\n    bnb: string;\n    sm?: string;\n    flowers?: string;\n  };\n  network?: {\n    id: number;\n    name: string;\n  };\n  account?: {\n    address: string;\n  };\n}\n\n// 可用钱包接口\nexport interface AvailableWallet {\n  type: WalletType;\n  name: string;\n  icon: string;\n  installed: boolean;\n}\n\n// 钱包上下文接口\ninterface WalletContextType {\n  wallet: WalletState;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  updateBalances: () => Promise<void>;\n  connectWallet: (type: WalletType) => Promise<void>;\n  disconnectWallet: () => Promise<void>;\n  isConnecting: boolean;\n  availableWallets: AvailableWallet[];\n}\n\n// 创建上下文，提供默认值\nconst defaultWalletState: WalletState = {\n  isConnected: false,\n};\n\n// 默认可用钱包列表\nconst defaultAvailableWallets: AvailableWallet[] = [\n  {\n    type: 'metamask',\n    name: 'MetaMask',\n    icon: '/images/wallets/metamask.svg',\n    installed: true\n  },\n  {\n    type: 'coinbase',\n    name: 'Coinbase Wallet',\n    icon: '/images/wallets/coinbase.svg',\n    installed: true\n  },\n  {\n    type: 'walletconnect',\n    name: 'WalletConnect',\n    icon: '/images/wallets/walletconnect.svg',\n    installed: true\n  }\n];\n\nconst WalletContext = createContext<WalletContextType>({\n  wallet: defaultWalletState,\n  connect: async () => {},\n  disconnect: async () => {},\n  updateBalances: async () => {},\n  connectWallet: async () => {},\n  disconnectWallet: async () => {},\n  isConnecting: false,\n  availableWallets: defaultAvailableWallets,\n});\n\n// 钱包提供者Props\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\n// 检查浏览器是否有MetaMask或其他以太坊提供者\nconst checkIfBrowserHasWallet = (): boolean => {\n  return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n};\n\n// 获取以太坊提供者\nconst getEthereumProvider = (): ethers.BrowserProvider => {\n  if (typeof window === 'undefined' || !window.ethereum) {\n    throw new Error('没有检测到Ethereum提供者');\n  }\n  return new ethers.BrowserProvider(window.ethereum as any);\n};\n\n// 连接到以太坊钱包\nconst connectToWallet = async (): Promise<WalletState> => {\n  try {\n    if (!checkIfBrowserHasWallet()) {\n      throw new Error('请安装MetaMask或其他钱包扩展');\n    }\n\n    // 请求用户授权连接钱包\n    const provider = getEthereumProvider();\n    await provider.send('eth_requestAccounts', []);\n\n    const signer = await provider.getSigner();\n    const address = await signer.getAddress();\n    const networkInfo = await provider.getNetwork();\n    const chainId = Number(networkInfo.chainId);\n\n    // 初始化合约服务\n    await contractService.initialize(provider);\n\n    // 获取余额信息\n    const bnbBalance = await provider.getBalance(address);\n\n    let smBalance = '0';\n    try {\n      smBalance = await contractService.getTokenBalance(address);\n    } catch (error) {\n      console.warn('获取SM代币余额失败', error);\n    }\n\n    const network = {\n      id: chainId,\n      name: chainId === 56 ? 'BNB Smart Chain' :\n           chainId === 97 ? 'BNB Smart Chain Testnet' :\n           'Unknown Network'\n    };\n\n    return {\n      isConnected: true,\n      address,\n      chainId,\n      balance: {\n        bnb: formatEther(bnbBalance),\n        sm: smBalance\n      },\n      network,\n      account: { address }\n    };\n  } catch (error) {\n    console.error('连接钱包失败:', error);\n    throw error;\n  }\n};\n\n// 钱包提供者组件\nexport function WalletProvider({ children }: WalletProviderProps) {\n  const [wallet, setWallet] = useState<WalletState>(defaultWalletState);\n  const [isConnecting, setIsConnecting] = useState<boolean>(false);\n  const [availableWallets, setAvailableWallets] = useState<AvailableWallet[]>(defaultAvailableWallets);\n\n  // 连接钱包 - 统一的连接函数\n  const connect = async (type?: WalletType) => {\n    setIsConnecting(true);\n    try {\n      logger.info(type ? `正在连接 ${type} 钱包...` : '连接钱包...', {\n        action: 'connect',\n        additionalData: { walletType: type }\n      });\n\n      const connectedWallet = await connectToWallet();\n      setWallet(connectedWallet);\n\n      logger.info('钱包已连接', {\n        action: 'connect',\n        additionalData: { address: connectedWallet.address, walletType: type }\n      });\n    } catch (error) {\n      logger.error('连接钱包失败', {\n        action: 'connect',\n        additionalData: { error, walletType: type }\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // 按类型连接钱包 - 为了保持API兼容性\n  const connectWallet = async (type: WalletType) => {\n    if (isConnecting) {\n      logger.warn('钱包连接已在进行中', { action: 'connectWallet', walletType: type });\n      return;\n    }\n\n    setIsConnecting(true);\n\n    try {\n      logger.info(`正在连接 ${type} 钱包...`, {\n        action: 'connectWallet',\n        additionalData: { walletType: type }\n      });\n\n      // 加载钱包服务，增加超时处理\n      const service = await Promise.race([\n        loadWalletService(),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('钱包服务加载超时')), 10000)\n        )\n      ]);\n\n      if (!service) {\n        throw new Error('钱包服务加载失败');\n      }\n\n      // 使用钱包服务连接指定类型的钱包，增加超时处理\n      const result = await Promise.race([\n        service.connectWalletByType(type),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('钱包连接超时')), 30000)\n        )\n      ]);\n\n      if (!result) {\n        throw new Error(`连接 ${type} 钱包失败`);\n      }\n\n      const { address, chainId } = result;\n\n      // 初始化合约服务\n      try {\n        const provider = service.getEthereumProvider();\n        await contractService.initialize(provider);\n      } catch (error) {\n        logger.warn('合约服务初始化失败', { error });\n        // 继续执行，不阻断钱包连接\n      }\n\n      // 获取余额信息，增加错误处理\n      let bnbBalance;\n      try {\n        const provider = service.getEthereumProvider();\n        bnbBalance = await provider.getBalance(address);\n      } catch (error) {\n        logger.warn('获取BNB余额失败', { error });\n        bnbBalance = ethers.BigNumber.from(0);\n      }\n\n      let smBalance = '0';\n      try {\n        smBalance = await contractService.getTokenBalance(address);\n      } catch (error) {\n        logger.warn('获取SM代币余额失败', { error });\n      }\n\n      const network = service.getNetworkInfo(chainId) || {\n        id: chainId,\n        name: chainId === 56 ? 'BSC Mainnet' :\n              chainId === 97 ? 'BSC Testnet' :\n              chainId === 1 ? 'Ethereum Mainnet' :\n              'Unknown Network'\n      };\n\n      const connectedWallet: WalletState = {\n        isConnected: true,\n        address,\n        chainId,\n        balance: {\n          bnb: formatEther(bnbBalance),\n          sm: smBalance\n        },\n        network,\n        account: { address }\n      };\n\n      setWallet(connectedWallet);\n\n      logger.info('钱包已连接', {\n        action: 'connectWallet',\n        additionalData: { address, walletType: type }\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : '未知错误';\n      logger.error('连接钱包失败', {\n        action: 'connectWallet',\n        additionalData: { error: errorMessage, walletType: type }\n      });\n\n      // 重置钱包状态\n      setWallet(defaultWalletState);\n\n      // 重新抛出错误供UI处理\n      throw new Error(`连接${type}钱包失败: ${errorMessage}`);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // 断开连接 - 统一的断开连接函数\n  const disconnect = async () => {\n    try {\n      logger.info('断开钱包连接...', {\n        action: 'disconnect'\n      });\n\n      // 尝试断开WalletConnect连接\n      const walletType = getConnectedWalletType();\n      if (walletType) {\n        await disconnectWalletService(walletType);\n      }\n\n      // 重置状态\n      setWallet(defaultWalletState);\n\n      logger.info('钱包已断开连接', {\n        action: 'disconnect'\n      });\n    } catch (error) {\n      logger.error('断开钱包连接失败', {\n        action: 'disconnect',\n        additionalData: { error }\n      });\n    }\n  };\n\n  // 断开钱包连接 - 为了保持API兼容性\n  const disconnectWallet = async () => {\n    return disconnect();\n  };\n\n  // 更新余额\n  const updateBalances = async () => {\n    if (!wallet.isConnected || !wallet.address) return;\n\n    try {\n      console.log('更新余额...');\n\n      // 获取真实余额\n      const provider = getEthereumProvider();\n      const bnbBalance = await provider.getBalance(wallet.address);\n\n      let smBalance = '0';\n      try {\n        smBalance = await contractService.getTokenBalance(wallet.address);\n      } catch (error) {\n        console.warn('获取SM代币余额失败', error);\n      }\n\n      setWallet(prev => ({\n        ...prev,\n        balance: {\n          bnb: formatEther(bnbBalance),\n          sm: smBalance\n        }\n      }));\n\n      console.log('余额已更新');\n    } catch (error) {\n      console.error('更新余额失败:', error);\n    }\n  };\n\n  return (\n    <WalletContext.Provider value={{\n      wallet,\n      connect,\n      disconnect,\n      updateBalances,\n      connectWallet,\n      disconnectWallet,\n      isConnecting,\n      availableWallets\n    }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\n// 钱包钩子\nexport function useWallet() {\n  return useContext(WalletContext);\n}"],"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","ignoreList":[]}