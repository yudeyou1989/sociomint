{"version":3,"names":["cov_2e9w7anruz","actualCoverage","s","WalletProvider","f","useWallet","walletService","loadWalletService","b","window","getConnectedWalletType","getConnectedWalletType1","disconnectWallet","Promise","resolve","then","_interop_require_wildcard","require","logger","_logger","default","createContextLogger","component","defaultWalletState","isConnected","defaultAvailableWallets","type","name","icon","installed","WalletContext","_react","createContext","wallet","connect","disconnect","updateBalances","connectWallet","isConnecting","availableWallets","checkIfBrowserHasWallet","ethereum","getEthereumProvider","Error","_ethers","ethers","BrowserProvider","connectToWallet","provider","send","signer","getSigner","address","getAddress","networkInfo","getNetwork","chainId","Number","_contractService","initialize","bnbBalance","getBalance","smBalance","getTokenBalance","error","console","warn","network","id","balance","bnb","formatEther","sm","account","children","setWallet","useState","setIsConnecting","setAvailableWallets","info","action","additionalData","walletType","connectedWallet","disconnectWalletService","log","prev","_jsxruntime","jsx","Provider","value","useContext"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/contexts/WalletContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { ethers, formatEther } from 'ethers';\nimport contractService from '@/services/contractService';\nimport Logger from '@/services/logger';\nimport config from '@/lib/config';\n\n// 动态导入钱包服务以避免SSR问题\nlet walletService: any = null;\nconst loadWalletService = async () => {\n  if (typeof window !== 'undefined' && !walletService) {\n    const { getConnectedWalletType, disconnectWallet } = await import('@/services/walletService');\n    walletService = { getConnectedWalletType, disconnectWallet };\n  }\n  return walletService;\n};\n\n// 创建日志记录器\nconst logger = Logger.createContextLogger({ component: 'WalletContext' });\n\n// 钱包状态接口\nexport interface WalletState {\n  isConnected: boolean;\n  address?: string;\n  chainId?: number;\n  balance?: {\n    bnb: string;\n    sm?: string;\n    flowers?: string;\n  };\n  network?: {\n    id: number;\n    name: string;\n  };\n  account?: {\n    address: string;\n  };\n}\n\n// 可用钱包接口\nexport interface AvailableWallet {\n  type: WalletType;\n  name: string;\n  icon: string;\n  installed: boolean;\n}\n\n// 钱包上下文接口\ninterface WalletContextType {\n  wallet: WalletState;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  updateBalances: () => Promise<void>;\n  connectWallet: (type: WalletType) => Promise<void>;\n  disconnectWallet: () => Promise<void>;\n  isConnecting: boolean;\n  availableWallets: AvailableWallet[];\n}\n\n// 创建上下文，提供默认值\nconst defaultWalletState: WalletState = {\n  isConnected: false,\n};\n\n// 默认可用钱包列表\nconst defaultAvailableWallets: AvailableWallet[] = [\n  {\n    type: 'metamask',\n    name: 'MetaMask',\n    icon: '/images/wallets/metamask.svg',\n    installed: true\n  },\n  {\n    type: 'coinbase',\n    name: 'Coinbase Wallet',\n    icon: '/images/wallets/coinbase.svg',\n    installed: true\n  },\n  {\n    type: 'walletconnect',\n    name: 'WalletConnect',\n    icon: '/images/wallets/walletconnect.svg',\n    installed: true\n  }\n];\n\nconst WalletContext = createContext<WalletContextType>({\n  wallet: defaultWalletState,\n  connect: async () => {},\n  disconnect: async () => {},\n  updateBalances: async () => {},\n  connectWallet: async () => {},\n  disconnectWallet: async () => {},\n  isConnecting: false,\n  availableWallets: defaultAvailableWallets,\n});\n\n// 钱包提供者Props\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\n// 检查浏览器是否有MetaMask或其他以太坊提供者\nconst checkIfBrowserHasWallet = (): boolean => {\n  return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n};\n\n// 获取以太坊提供者\nconst getEthereumProvider = (): ethers.BrowserProvider => {\n  if (typeof window === 'undefined' || !window.ethereum) {\n    throw new Error('没有检测到Ethereum提供者');\n  }\n  return new ethers.BrowserProvider(window.ethereum as any);\n};\n\n// 连接到以太坊钱包\nconst connectToWallet = async (): Promise<WalletState> => {\n  try {\n    if (!checkIfBrowserHasWallet()) {\n      throw new Error('请安装MetaMask或其他钱包扩展');\n    }\n\n    // 请求用户授权连接钱包\n    const provider = getEthereumProvider();\n    await provider.send('eth_requestAccounts', []);\n\n    const signer = await provider.getSigner();\n    const address = await signer.getAddress();\n    const networkInfo = await provider.getNetwork();\n    const chainId = Number(networkInfo.chainId);\n\n    // 初始化合约服务\n    await contractService.initialize(provider);\n\n    // 获取余额信息\n    const bnbBalance = await provider.getBalance(address);\n\n    let smBalance = '0';\n    try {\n      smBalance = await contractService.getTokenBalance(address);\n    } catch (error) {\n      console.warn('获取SM代币余额失败', error);\n    }\n\n    const network = {\n      id: chainId,\n      name: chainId === 56 ? 'BNB Smart Chain' :\n           chainId === 97 ? 'BNB Smart Chain Testnet' :\n           'Unknown Network'\n    };\n\n    return {\n      isConnected: true,\n      address,\n      chainId,\n      balance: {\n        bnb: formatEther(bnbBalance),\n        sm: smBalance\n      },\n      network,\n      account: { address }\n    };\n  } catch (error) {\n    console.error('连接钱包失败:', error);\n    throw error;\n  }\n};\n\n// 钱包提供者组件\nexport function WalletProvider({ children }: WalletProviderProps) {\n  const [wallet, setWallet] = useState<WalletState>(defaultWalletState);\n  const [isConnecting, setIsConnecting] = useState<boolean>(false);\n  const [availableWallets, setAvailableWallets] = useState<AvailableWallet[]>(defaultAvailableWallets);\n\n  // 连接钱包 - 统一的连接函数\n  const connect = async (type?: WalletType) => {\n    setIsConnecting(true);\n    try {\n      logger.info(type ? `正在连接 ${type} 钱包...` : '连接钱包...', {\n        action: 'connect',\n        additionalData: { walletType: type }\n      });\n\n      const connectedWallet = await connectToWallet();\n      setWallet(connectedWallet);\n\n      logger.info('钱包已连接', {\n        action: 'connect',\n        additionalData: { address: connectedWallet.address, walletType: type }\n      });\n    } catch (error) {\n      logger.error('连接钱包失败', {\n        action: 'connect',\n        additionalData: { error, walletType: type }\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // 按类型连接钱包 - 为了保持API兼容性\n  const connectWallet = async (type: WalletType) => {\n    return connect(type);\n  };\n\n  // 断开连接 - 统一的断开连接函数\n  const disconnect = async () => {\n    try {\n      logger.info('断开钱包连接...', {\n        action: 'disconnect'\n      });\n\n      // 尝试断开WalletConnect连接\n      const walletType = getConnectedWalletType();\n      if (walletType) {\n        await disconnectWalletService(walletType);\n      }\n\n      // 重置状态\n      setWallet(defaultWalletState);\n\n      logger.info('钱包已断开连接', {\n        action: 'disconnect'\n      });\n    } catch (error) {\n      logger.error('断开钱包连接失败', {\n        action: 'disconnect',\n        additionalData: { error }\n      });\n    }\n  };\n\n  // 断开钱包连接 - 为了保持API兼容性\n  const disconnectWallet = async () => {\n    return disconnect();\n  };\n\n  // 更新余额\n  const updateBalances = async () => {\n    if (!wallet.isConnected || !wallet.address) return;\n\n    try {\n      console.log('更新余额...');\n\n      // 获取真实余额\n      const provider = getEthereumProvider();\n      const bnbBalance = await provider.getBalance(wallet.address);\n\n      let smBalance = '0';\n      try {\n        smBalance = await contractService.getTokenBalance(wallet.address);\n      } catch (error) {\n        console.warn('获取SM代币余额失败', error);\n      }\n\n      setWallet(prev => ({\n        ...prev,\n        balance: {\n          bnb: formatEther(bnbBalance),\n          sm: smBalance\n        }\n      }));\n\n      console.log('余额已更新');\n    } catch (error) {\n      console.error('更新余额失败:', error);\n    }\n  };\n\n  return (\n    <WalletContext.Provider value={{\n      wallet,\n      connect,\n      disconnect,\n      updateBalances,\n      connectWallet,\n      disconnectWallet,\n      isConnecting,\n      availableWallets\n    }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\n// 钱包钩子\nexport function useWallet() {\n  return useContext(WalletContext);\n}"],"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","ignoreList":[]}