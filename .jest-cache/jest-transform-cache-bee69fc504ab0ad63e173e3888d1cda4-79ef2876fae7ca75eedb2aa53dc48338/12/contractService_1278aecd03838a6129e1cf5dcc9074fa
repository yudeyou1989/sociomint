22cd9bd2fabc9a90ffa9c6bb7c3e29b2
"use strict";

/* istanbul ignore next */
function cov_xz4dxzbsl() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/services/contractService.ts";
  var hash = "f257585e54646679eb2a53ebf4918ee0b378c869";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/services/contractService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "7": {
        start: {
          line: 20,
          column: 43
        },
        end: {
          line: 20,
          column: 108
        }
      },
      "8": {
        start: {
          line: 21,
          column: 35
        },
        end: {
          line: 21,
          column: 92
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 75
        }
      },
      "11": {
        start: {
          line: 29,
          column: 40
        },
        end: {
          line: 29,
          column: 84
        }
      },
      "12": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 69
        }
      },
      "13": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 73
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 27
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 44
        }
      },
      "19": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 36
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 33
        }
      },
      "21": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 49
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "23": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 130
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 108
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 44
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 39
        }
      },
      "28": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 53
        }
      },
      "29": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 68,
          column: 53
        }
      },
      "30": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "31": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "32": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 53
        }
      },
      "33": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 45
        }
      },
      "34": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "35": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "36": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "37": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "38": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 67
        }
      },
      "39": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 53
        }
      },
      "40": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "41": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 24
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 61
        }
      },
      "43": {
        start: {
          line: 90,
          column: 35
        },
        end: {
          line: 90,
          column: 61
        }
      },
      "44": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "45": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 71
        }
      },
      "46": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "47": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 48
        }
      },
      "48": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "49": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 61
        }
      },
      "50": {
        start: {
          line: 109,
          column: 35
        },
        end: {
          line: 109,
          column: 61
        }
      },
      "51": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "52": {
        start: {
          line: 111,
          column: 30
        },
        end: {
          line: 111,
          column: 64
        }
      },
      "53": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 43
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 24
        }
      },
      "56": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "57": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 45
        }
      },
      "58": {
        start: {
          line: 128,
          column: 17
        },
        end: {
          line: 128,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 22
          }
        },
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 13
          },
          end: {
            line: 15,
            column: 14
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 33
          }
        },
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 48
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 35
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 67
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 33
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 78
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 29
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 89
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 36
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 108
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 122
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 35
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 41
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 23,
            column: 14
          }
        }, {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 109,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 109,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/services/contractService.ts"],
      sourcesContent: ["import { ethers, formatEther, formatUnits, parseEther } from 'ethers';\nimport SMTokenExchangeABI from '../abis/SMTokenExchange.json';\nimport SMTokenABI from '../abis/SMToken.json';\n\n// BSC\u6D4B\u8BD5\u7F51\u5408\u7EA6\u5730\u5740\nconst EXCHANGE_PROXY_ADDRESS = '0x1B03DD8dCeD4c7D38ABA907671e5e1064D10F8A8'; // \u4EE3\u7406\u5408\u7EA6\u5730\u5740\nconst EXCHANGE_IMPLEMENTATION_ADDRESS = '0xD23E2E1A55a7E9cC9Cf9CbaA3327F09f1910a1Cb'; // \u5B9E\u73B0\u5408\u7EA6\u5730\u5740\nconst SM_TOKEN_ADDRESS = '0x3273b627510d47CD97Ad6b6DbcFafc6998913643'; // \u4EE3\u5E01\u5408\u7EA6\u5730\u5740\n\n// BSC\u6D4B\u8BD5\u7F51RPC URL\nconst BSC_TESTNET_RPC = 'https://data-seed-prebsc-1-s1.binance.org:8545/';\n\nexport interface ExchangeStats {\n  totalTokensSold: string;\n  totalTokensRemaining: string;\n  totalBnbRaised: string;\n  currentPrice: string;\n  nextRoundPrice: string;\n  isActive: boolean;\n  currentRound: number;\n}\n\nexport class ContractService {\n  private provider: ethers.BrowserProvider | null = null;\n  private signer: ethers.Signer | null = null;\n  private smToken: ethers.Contract | null = null;\n  private smTokenExchange: ethers.Contract | null = null;\n\n  constructor() {}\n\n  // \u83B7\u53D6Exchange\u5408\u7EA6ABI\n  public getExchangeABI() {\n    return SMTokenExchangeABI;\n  }\n\n  // \u83B7\u53D6Token\u5408\u7EA6ABI\n  public getTokenABI() {\n    return SMTokenABI;\n  }\n\n  public async initialize(provider: ethers.BrowserProvider) {\n    this.provider = provider;\n    this.signer = await provider.getSigner();\n\n    try {\n      // \u521D\u59CB\u5316\u4EA4\u6613\u6240\u5408\u7EA6\u5B9E\u4F8B\n      this.smTokenExchange = new ethers.Contract(\n        EXCHANGE_PROXY_ADDRESS,\n        SMTokenExchangeABI,\n        this.signer\n      );\n\n      // \u521D\u59CB\u5316\u4EE3\u5E01\u5408\u7EA6\uFF08\u76F4\u63A5\u4F7F\u7528\u5DF2\u77E5\u5730\u5740\uFF09\n      this.smToken = new ethers.Contract(\n        SM_TOKEN_ADDRESS,\n        SMTokenABI,\n        this.signer\n      );\n\n      console.log('\u5408\u7EA6\u521D\u59CB\u5316\u6210\u529F', {\n        exchange: EXCHANGE_PROXY_ADDRESS,\n        implementation: EXCHANGE_IMPLEMENTATION_ADDRESS,\n        token: SM_TOKEN_ADDRESS\n      });\n    } catch (error) {\n      console.error('\u5408\u7EA6\u521D\u59CB\u5316\u5931\u8D25', error);\n      throw new Error('\u5408\u7EA6\u521D\u59CB\u5316\u5931\u8D25');\n    }\n  }\n\n  // \u83B7\u53D6\u4EE3\u5E01\u4F59\u989D\n  public async getTokenBalance(address: string): Promise<string> {\n    if (!this.smToken) throw new Error('\u5408\u7EA6\u672A\u521D\u59CB\u5316');\n    try {\n      const balance = await this.smToken.balanceOf(address);\n      return formatEther(balance);\n    } catch (error) {\n      console.error('\u83B7\u53D6\u4EE3\u5E01\u4F59\u989D\u5931\u8D25', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6BNB\u4F59\u989D\n  public async getBnbBalance(address: string): Promise<string> {\n    if (!this.provider) throw new Error('Provider\u672A\u521D\u59CB\u5316');\n    try {\n      const balance = await this.provider.getBalance(address);\n      return formatEther(balance);\n    } catch (error) {\n      console.error('\u83B7\u53D6BNB\u4F59\u989D\u5931\u8D25', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u4EA4\u6613\u6240\u7EDF\u8BA1\u6570\u636E\n  public async getExchangeStats(): Promise<ExchangeStats> {\n    if (!this.smTokenExchange) throw new Error('\u5408\u7EA6\u672A\u521D\u59CB\u5316');\n    try {\n      const stats = await this.smTokenExchange.getExchangeStats();\n      return {\n        totalTokensSold: formatEther(stats.totalTokensSold),\n        totalTokensRemaining: formatEther(stats.totalTokensRemaining),\n        totalBnbRaised: formatEther(stats.totalBnbRaised),\n        currentPrice: formatUnits(stats.currentPrice, 'gwei'),\n        nextRoundPrice: formatUnits(stats.nextRoundPrice, 'gwei'),\n        isActive: stats.isActive,\n        currentRound: stats.currentRound\n      };\n    } catch (error) {\n      console.error('\u83B7\u53D6\u4EA4\u6613\u6240\u7EDF\u8BA1\u6570\u636E\u5931\u8D25', error);\n      throw error;\n    }\n  }\n\n  // \u8D2D\u4E70\u4EE3\u5E01\n  public async exchangeTokens(bnbAmount: string): Promise<ethers.ContractTransaction> {\n    if (!this.smTokenExchange) throw new Error('\u5408\u7EA6\u672A\u521D\u59CB\u5316');\n    try {\n      const amountWei = parseEther(bnbAmount);\n      return await this.smTokenExchange.exchangeTokens({\n        value: amountWei,\n        gasLimit: 500000 // \u8BBE\u7F6E\u9002\u5F53\u7684gas\u9650\u5236\n      });\n    } catch (error) {\n      console.error('\u8D2D\u4E70\u4EE3\u5E01\u5931\u8D25', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u9ED8\u8BA4provider\uFF08\u7528\u4E8E\u672A\u8FDE\u63A5\u94B1\u5305\u65F6\u8BFB\u53D6\u94FE\u4E0A\u6570\u636E\uFF09\n  public static getReadOnlyProvider(): ethers.JsonRpcProvider {\n    return new ethers.JsonRpcProvider(BSC_TESTNET_RPC);\n  }\n}\n\n// \u5BFC\u51FA\u5355\u4F8B\u5B9E\u4F8B\nconst contractService = new ContractService();\nexport default contractService;"],
      names: ["ContractService", "EXCHANGE_PROXY_ADDRESS", "EXCHANGE_IMPLEMENTATION_ADDRESS", "SM_TOKEN_ADDRESS", "BSC_TESTNET_RPC", "constructor", "provider", "signer", "smToken", "smTokenExchange", "getExchangeABI", "SMTokenExchangeABI", "getTokenABI", "SMTokenABI", "initialize", "getSigner", "ethers", "Contract", "console", "log", "exchange", "implementation", "token", "error", "Error", "getTokenBalance", "address", "balance", "balanceOf", "formatEther", "getBnbBalance", "getBalance", "getExchangeStats", "stats", "totalTokensSold", "totalTokensRemaining", "totalBnbRaised", "currentPrice", "formatUnits", "nextRoundPrice", "isActive", "currentRound", "exchangeTokens", "bnbAmount", "amountWei", "parseEther", "value", "gasLimit", "getReadOnlyProvider", "JsonRpcProvider", "contractService"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f257585e54646679eb2a53ebf4918ee0b378c869"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xz4dxzbsl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xz4dxzbsl();
cov_xz4dxzbsl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_xz4dxzbsl().f[0]++;
  cov_xz4dxzbsl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_xz4dxzbsl().s[3]++;
_export(exports, {
  ContractService: function () {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[1]++;
    cov_xz4dxzbsl().s[4]++;
    return ContractService;
  },
  default: function () {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[2]++;
    cov_xz4dxzbsl().s[5]++;
    return _default;
  }
});
const _ethers =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[6]++, require("ethers"));
const _SMTokenExchangejson =
/* istanbul ignore next */
(/*#__PURE__*/cov_xz4dxzbsl().s[7]++, _interop_require_default(require("../abis/SMTokenExchange.json")));
const _SMTokenjson =
/* istanbul ignore next */
(/*#__PURE__*/cov_xz4dxzbsl().s[8]++, _interop_require_default(require("../abis/SMToken.json")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_xz4dxzbsl().f[3]++;
  cov_xz4dxzbsl().s[9]++;
  return /* istanbul ignore next */(cov_xz4dxzbsl().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_xz4dxzbsl().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_xz4dxzbsl().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_xz4dxzbsl().b[0][1]++, {
    default: obj
  });
}
// BSC测试网合约地址
const EXCHANGE_PROXY_ADDRESS =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[10]++, '0x1B03DD8dCeD4c7D38ABA907671e5e1064D10F8A8'); // 代理合约地址
const EXCHANGE_IMPLEMENTATION_ADDRESS =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[11]++, '0xD23E2E1A55a7E9cC9Cf9CbaA3327F09f1910a1Cb'); // 实现合约地址
const SM_TOKEN_ADDRESS =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[12]++, '0x3273b627510d47CD97Ad6b6DbcFafc6998913643'); // 代币合约地址
// BSC测试网RPC URL
const BSC_TESTNET_RPC =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[13]++, 'https://data-seed-prebsc-1-s1.binance.org:8545/');
class ContractService {
  constructor() {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[4]++;
    cov_xz4dxzbsl().s[14]++;
    this.provider = null;
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[15]++;
    this.signer = null;
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[16]++;
    this.smToken = null;
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[17]++;
    this.smTokenExchange = null;
  }
  // 获取Exchange合约ABI
  getExchangeABI() {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[5]++;
    cov_xz4dxzbsl().s[18]++;
    return _SMTokenExchangejson.default;
  }
  // 获取Token合约ABI
  getTokenABI() {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[6]++;
    cov_xz4dxzbsl().s[19]++;
    return _SMTokenjson.default;
  }
  async initialize(provider) {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[7]++;
    cov_xz4dxzbsl().s[20]++;
    this.provider = provider;
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[21]++;
    this.signer = await provider.getSigner();
    /* istanbul ignore next */
    cov_xz4dxzbsl().s[22]++;
    try {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[23]++;
      // 初始化交易所合约实例
      this.smTokenExchange = new _ethers.ethers.Contract(EXCHANGE_PROXY_ADDRESS, _SMTokenExchangejson.default, this.signer);
      // 初始化代币合约（直接使用已知地址）
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[24]++;
      this.smToken = new _ethers.ethers.Contract(SM_TOKEN_ADDRESS, _SMTokenjson.default, this.signer);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[25]++;
      console.log('合约初始化成功', {
        exchange: EXCHANGE_PROXY_ADDRESS,
        implementation: EXCHANGE_IMPLEMENTATION_ADDRESS,
        token: SM_TOKEN_ADDRESS
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[26]++;
      console.error('合约初始化失败', error);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[27]++;
      throw new Error('合约初始化失败');
    }
  }
  // 获取代币余额
  async getTokenBalance(address) {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[8]++;
    cov_xz4dxzbsl().s[28]++;
    if (!this.smToken) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().b[2][0]++;
      cov_xz4dxzbsl().s[29]++;
      throw new Error('合约未初始化');
    } else
    /* istanbul ignore next */
    {
      cov_xz4dxzbsl().b[2][1]++;
    }
    cov_xz4dxzbsl().s[30]++;
    try {
      const balance =
      /* istanbul ignore next */
      (cov_xz4dxzbsl().s[31]++, await this.smToken.balanceOf(address));
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[32]++;
      return (0, _ethers.formatEther)(balance);
    } catch (error) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[33]++;
      console.error('获取代币余额失败', error);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[34]++;
      throw error;
    }
  }
  // 获取BNB余额
  async getBnbBalance(address) {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[9]++;
    cov_xz4dxzbsl().s[35]++;
    if (!this.provider) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().b[3][0]++;
      cov_xz4dxzbsl().s[36]++;
      throw new Error('Provider未初始化');
    } else
    /* istanbul ignore next */
    {
      cov_xz4dxzbsl().b[3][1]++;
    }
    cov_xz4dxzbsl().s[37]++;
    try {
      const balance =
      /* istanbul ignore next */
      (cov_xz4dxzbsl().s[38]++, await this.provider.getBalance(address));
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[39]++;
      return (0, _ethers.formatEther)(balance);
    } catch (error) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[40]++;
      console.error('获取BNB余额失败', error);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[41]++;
      throw error;
    }
  }
  // 获取交易所统计数据
  async getExchangeStats() {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[10]++;
    cov_xz4dxzbsl().s[42]++;
    if (!this.smTokenExchange) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().b[4][0]++;
      cov_xz4dxzbsl().s[43]++;
      throw new Error('合约未初始化');
    } else
    /* istanbul ignore next */
    {
      cov_xz4dxzbsl().b[4][1]++;
    }
    cov_xz4dxzbsl().s[44]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_xz4dxzbsl().s[45]++, await this.smTokenExchange.getExchangeStats());
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[46]++;
      return {
        totalTokensSold: (0, _ethers.formatEther)(stats.totalTokensSold),
        totalTokensRemaining: (0, _ethers.formatEther)(stats.totalTokensRemaining),
        totalBnbRaised: (0, _ethers.formatEther)(stats.totalBnbRaised),
        currentPrice: (0, _ethers.formatUnits)(stats.currentPrice, 'gwei'),
        nextRoundPrice: (0, _ethers.formatUnits)(stats.nextRoundPrice, 'gwei'),
        isActive: stats.isActive,
        currentRound: stats.currentRound
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[47]++;
      console.error('获取交易所统计数据失败', error);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[48]++;
      throw error;
    }
  }
  // 购买代币
  async exchangeTokens(bnbAmount) {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[11]++;
    cov_xz4dxzbsl().s[49]++;
    if (!this.smTokenExchange) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().b[5][0]++;
      cov_xz4dxzbsl().s[50]++;
      throw new Error('合约未初始化');
    } else
    /* istanbul ignore next */
    {
      cov_xz4dxzbsl().b[5][1]++;
    }
    cov_xz4dxzbsl().s[51]++;
    try {
      const amountWei =
      /* istanbul ignore next */
      (cov_xz4dxzbsl().s[52]++, (0, _ethers.parseEther)(bnbAmount));
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[53]++;
      return await this.smTokenExchange.exchangeTokens({
        value: amountWei,
        gasLimit: 500000 // 设置适当的gas限制
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[54]++;
      console.error('购买代币失败', error);
      /* istanbul ignore next */
      cov_xz4dxzbsl().s[55]++;
      throw error;
    }
  }
  // 获取默认provider（用于未连接钱包时读取链上数据）
  static getReadOnlyProvider() {
    /* istanbul ignore next */
    cov_xz4dxzbsl().f[12]++;
    cov_xz4dxzbsl().s[56]++;
    return new _ethers.ethers.JsonRpcProvider(BSC_TESTNET_RPC);
  }
}
// 导出单例实例
const contractService =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[57]++, new ContractService());
const _default =
/* istanbul ignore next */
(cov_xz4dxzbsl().s[58]++, contractService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,