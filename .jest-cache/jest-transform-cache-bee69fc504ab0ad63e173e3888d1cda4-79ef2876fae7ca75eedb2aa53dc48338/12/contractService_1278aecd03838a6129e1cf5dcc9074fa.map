{"version":3,"names":["ContractService","cov_xz4dxzbsl","f","s","default","_default","EXCHANGE_PROXY_ADDRESS","EXCHANGE_IMPLEMENTATION_ADDRESS","SM_TOKEN_ADDRESS","BSC_TESTNET_RPC","constructor","provider","signer","smToken","smTokenExchange","getExchangeABI","_SMTokenExchangejson","getTokenABI","_SMTokenjson","initialize","getSigner","_ethers","ethers","Contract","console","log","exchange","implementation","token","error","Error","getTokenBalance","address","b","balance","balanceOf","formatEther","getBnbBalance","getBalance","getExchangeStats","stats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","formatUnits","nextRoundPrice","isActive","currentRound","exchangeTokens","bnbAmount","amountWei","parseEther","value","gasLimit","getReadOnlyProvider","JsonRpcProvider","contractService"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/services/contractService.ts"],"sourcesContent":["import { ethers, formatEther, formatUnits, parseEther } from 'ethers';\nimport SMTokenExchangeABI from '../abis/SMTokenExchange.json';\nimport SMTokenABI from '../abis/SMToken.json';\n\n// BSC测试网合约地址\nconst EXCHANGE_PROXY_ADDRESS = '0x1B03DD8dCeD4c7D38ABA907671e5e1064D10F8A8'; // 代理合约地址\nconst EXCHANGE_IMPLEMENTATION_ADDRESS = '0xD23E2E1A55a7E9cC9Cf9CbaA3327F09f1910a1Cb'; // 实现合约地址\nconst SM_TOKEN_ADDRESS = '0x3273b627510d47CD97Ad6b6DbcFafc6998913643'; // 代币合约地址\n\n// BSC测试网RPC URL\nconst BSC_TESTNET_RPC = 'https://data-seed-prebsc-1-s1.binance.org:8545/';\n\nexport interface ExchangeStats {\n  totalTokensSold: string;\n  totalTokensRemaining: string;\n  totalBnbRaised: string;\n  currentPrice: string;\n  nextRoundPrice: string;\n  isActive: boolean;\n  currentRound: number;\n}\n\nexport class ContractService {\n  private provider: ethers.BrowserProvider | null = null;\n  private signer: ethers.Signer | null = null;\n  private smToken: ethers.Contract | null = null;\n  private smTokenExchange: ethers.Contract | null = null;\n\n  constructor() {}\n\n  // 获取Exchange合约ABI\n  public getExchangeABI() {\n    return SMTokenExchangeABI;\n  }\n\n  // 获取Token合约ABI\n  public getTokenABI() {\n    return SMTokenABI;\n  }\n\n  public async initialize(provider: ethers.BrowserProvider) {\n    this.provider = provider;\n    this.signer = await provider.getSigner();\n\n    try {\n      // 初始化交易所合约实例\n      this.smTokenExchange = new ethers.Contract(\n        EXCHANGE_PROXY_ADDRESS,\n        SMTokenExchangeABI,\n        this.signer\n      );\n\n      // 初始化代币合约（直接使用已知地址）\n      this.smToken = new ethers.Contract(\n        SM_TOKEN_ADDRESS,\n        SMTokenABI,\n        this.signer\n      );\n\n      console.log('合约初始化成功', {\n        exchange: EXCHANGE_PROXY_ADDRESS,\n        implementation: EXCHANGE_IMPLEMENTATION_ADDRESS,\n        token: SM_TOKEN_ADDRESS\n      });\n    } catch (error) {\n      console.error('合约初始化失败', error);\n      throw new Error('合约初始化失败');\n    }\n  }\n\n  // 获取代币余额\n  public async getTokenBalance(address: string): Promise<string> {\n    if (!this.smToken) throw new Error('合约未初始化');\n    try {\n      const balance = await this.smToken.balanceOf(address);\n      return formatEther(balance);\n    } catch (error) {\n      console.error('获取代币余额失败', error);\n      throw error;\n    }\n  }\n\n  // 获取BNB余额\n  public async getBnbBalance(address: string): Promise<string> {\n    if (!this.provider) throw new Error('Provider未初始化');\n    try {\n      const balance = await this.provider.getBalance(address);\n      return formatEther(balance);\n    } catch (error) {\n      console.error('获取BNB余额失败', error);\n      throw error;\n    }\n  }\n\n  // 获取交易所统计数据\n  public async getExchangeStats(): Promise<ExchangeStats> {\n    if (!this.smTokenExchange) throw new Error('合约未初始化');\n    try {\n      const stats = await this.smTokenExchange.getExchangeStats();\n      return {\n        totalTokensSold: formatEther(stats.totalTokensSold),\n        totalTokensRemaining: formatEther(stats.totalTokensRemaining),\n        totalBnbRaised: formatEther(stats.totalBnbRaised),\n        currentPrice: formatUnits(stats.currentPrice, 'gwei'),\n        nextRoundPrice: formatUnits(stats.nextRoundPrice, 'gwei'),\n        isActive: stats.isActive,\n        currentRound: stats.currentRound\n      };\n    } catch (error) {\n      console.error('获取交易所统计数据失败', error);\n      throw error;\n    }\n  }\n\n  // 购买代币\n  public async exchangeTokens(bnbAmount: string): Promise<ethers.ContractTransaction> {\n    if (!this.smTokenExchange) throw new Error('合约未初始化');\n    try {\n      const amountWei = parseEther(bnbAmount);\n      return await this.smTokenExchange.exchangeTokens({\n        value: amountWei,\n        gasLimit: 500000 // 设置适当的gas限制\n      });\n    } catch (error) {\n      console.error('购买代币失败', error);\n      throw error;\n    }\n  }\n\n  // 获取默认provider（用于未连接钱包时读取链上数据）\n  public static getReadOnlyProvider(): ethers.JsonRpcProvider {\n    return new ethers.JsonRpcProvider(BSC_TESTNET_RPC);\n  }\n}\n\n// 导出单例实例\nconst contractService = new ContractService();\nexport default contractService;"],"mappingssBaA,eAAe,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAfH,eAAA;;EAmHbI,OAA+B,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAA/BE,QAAA;;;;;iCAzI6D;;;uEAC9B;;;uEACR;;;;;;;;;;;;;;;AAEvB;AACA,MAAMC,sBAAA;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,QAAyB,+CAA8C;AAC7E,MAAMI,+BAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,QAAkC,+CAA8C;AACtF,MAAMK,gBAAA;AAAA;AAAA,CAAAP,aAAA,GAAAE,CAAA,QAAmB,+CAA8C;AAEvE;AACA,MAAMM,eAAA;AAAA;AAAA,CAAAR,aAAA,GAAAE,CAAA,QAAkB;AAYjB,MAAMH,eAAA;EAMXU,YAAA,EAAc;IAAA;IAAAT,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;SALNQ,QAAA,GAA0C;IAAA;IAAAV,aAAA,GAAAE,CAAA;SAC1CS,MAAA,GAA+B;IAAA;IAAAX,aAAA,GAAAE,CAAA;SAC/BU,OAAA,GAAkC;IAAA;IAAAZ,aAAA,GAAAE,CAAA;SAClCW,eAAA,GAA0C;EAEnC;EAEf;EACOC,eAAA,EAAiB;IAAA;IAAAd,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACtB,OAAOa,oBAAA,CAAAZ,OAAkB;EAC3B;EAEA;EACOa,YAAA,EAAc;IAAA;IAAAhB,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACnB,OAAOe,YAAA,CAAAd,OAAU;EACnB;EAEA,MAAae,WAAWR,QAAgC,EAAE;IAAA;IAAAV,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACxD,IAAI,CAACQ,QAAQ,GAAGA,QAAA;IAAA;IAAAV,aAAA,GAAAE,CAAA;IAChB,IAAI,CAACS,MAAM,GAAG,MAAMD,QAAA,CAASS,SAAS;IAAA;IAAAnB,aAAA,GAAAE,CAAA;IAEtC,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF;MACA,IAAI,CAACW,eAAe,GAAG,IAAIO,OAAA,CAAAC,MAAM,CAACC,QAAQ,CACxCjB,sBAAA,EACAU,oBAAA,CAAAZ,OAAkB,EAClB,IAAI,CAACQ,MAAM;MAGb;MAAA;MAAAX,aAAA,GAAAE,CAAA;MACA,IAAI,CAACU,OAAO,GAAG,IAAIQ,OAAA,CAAAC,MAAM,CAACC,QAAQ,CAChCf,gBAAA,EACAU,YAAA,CAAAd,OAAU,EACV,IAAI,CAACQ,MAAM;MAAA;MAAAX,aAAA,GAAAE,CAAA;MAGbqB,OAAA,CAAQC,GAAG,CAAC,WAAW;QACrBC,QAAA,EAAUpB,sBAAA;QACVqB,cAAA,EAAgBpB,+BAAA;QAChBqB,KAAA,EAAOpB;MACT;IACF,EAAE,OAAOqB,KAAA,EAAO;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACdqB,OAAA,CAAQK,KAAK,CAAC,WAAWA,KAAA;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACzB,MAAM,IAAI2B,KAAA,CAAM;IAClB;EACF;EAEA;EACA,MAAaC,gBAAgBC,OAAe,EAAmB;IAAA;IAAA/B,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC7D,IAAI,CAAC,IAAI,CAACU,OAAO,EAAE;MAAA;MAAAZ,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAE,CAAA;MAAA,MAAM,IAAI2B,KAAA,CAAM;IAAA;IAAA;IAAA;MAAA7B,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACnC,IAAI;MACF,MAAM+B,OAAA;MAAA;MAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAI,CAACU,OAAO,CAACsB,SAAS,CAACH,OAAA;MAAA;MAAA/B,aAAA,GAAAE,CAAA;MAC7C,OAAO,IAAAkB,OAAA,CAAAe,WAAW,EAACF,OAAA;IACrB,EAAE,OAAOL,KAAA,EAAO;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACdqB,OAAA,CAAQK,KAAK,CAAC,YAAYA,KAAA;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MAC1B,MAAM0B,KAAA;IACR;EACF;EAEA;EACA,MAAaQ,cAAcL,OAAe,EAAmB;IAAA;IAAA/B,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC3D,IAAI,CAAC,IAAI,CAACQ,QAAQ,EAAE;MAAA;MAAAV,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAE,CAAA;MAAA,MAAM,IAAI2B,KAAA,CAAM;IAAA;IAAA;IAAA;MAAA7B,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IACpC,IAAI;MACF,MAAM+B,OAAA;MAAA;MAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAU,MAAM,IAAI,CAACQ,QAAQ,CAAC2B,UAAU,CAACN,OAAA;MAAA;MAAA/B,aAAA,GAAAE,CAAA;MAC/C,OAAO,IAAAkB,OAAA,CAAAe,WAAW,EAACF,OAAA;IACrB,EAAE,OAAOL,KAAA,EAAO;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACdqB,OAAA,CAAQK,KAAK,CAAC,aAAaA,KAAA;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MAC3B,MAAM0B,KAAA;IACR;EACF;EAEA;EACA,MAAaU,iBAAA,EAA2C;IAAA;IAAAtC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IACtD,IAAI,CAAC,IAAI,CAACW,eAAe,EAAE;MAAA;MAAAb,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAE,CAAA;MAAA,MAAM,IAAI2B,KAAA,CAAM;IAAA;IAAA;IAAA;MAAA7B,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IAC3C,IAAI;MACF,MAAMqC,KAAA;MAAA;MAAA,CAAAvC,aAAA,GAAAE,CAAA,QAAQ,MAAM,IAAI,CAACW,eAAe,CAACyB,gBAAgB;MAAA;MAAAtC,aAAA,GAAAE,CAAA;MACzD,OAAO;QACLsC,eAAA,EAAiB,IAAApB,OAAA,CAAAe,WAAW,EAACI,KAAA,CAAMC,eAAe;QAClDC,oBAAA,EAAsB,IAAArB,OAAA,CAAAe,WAAW,EAACI,KAAA,CAAME,oBAAoB;QAC5DC,cAAA,EAAgB,IAAAtB,OAAA,CAAAe,WAAW,EAACI,KAAA,CAAMG,cAAc;QAChDC,YAAA,EAAc,IAAAvB,OAAA,CAAAwB,WAAW,EAACL,KAAA,CAAMI,YAAY,EAAE;QAC9CE,cAAA,EAAgB,IAAAzB,OAAA,CAAAwB,WAAW,EAACL,KAAA,CAAMM,cAAc,EAAE;QAClDC,QAAA,EAAUP,KAAA,CAAMO,QAAQ;QACxBC,YAAA,EAAcR,KAAA,CAAMQ;MACtB;IACF,EAAE,OAAOnB,KAAA,EAAO;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACdqB,OAAA,CAAQK,KAAK,CAAC,eAAeA,KAAA;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MAC7B,MAAM0B,KAAA;IACR;EACF;EAEA;EACA,MAAaoB,eAAeC,SAAiB,EAAuC;IAAA;IAAAjD,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAClF,IAAI,CAAC,IAAI,CAACW,eAAe,EAAE;MAAA;MAAAb,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAE,CAAA;MAAA,MAAM,IAAI2B,KAAA,CAAM;IAAA;IAAA;IAAA;MAAA7B,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAE,CAAA;IAC3C,IAAI;MACF,MAAMgD,SAAA;MAAA;MAAA,CAAAlD,aAAA,GAAAE,CAAA,QAAY,IAAAkB,OAAA,CAAA+B,UAAU,EAACF,SAAA;MAAA;MAAAjD,aAAA,GAAAE,CAAA;MAC7B,OAAO,MAAM,IAAI,CAACW,eAAe,CAACmC,cAAc,CAAC;QAC/CI,KAAA,EAAOF,SAAA;QACPG,QAAA,EAAU,OAAO;MACnB;IACF,EAAE,OAAOzB,KAAA,EAAO;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACdqB,OAAA,CAAQK,KAAK,CAAC,UAAUA,KAAA;MAAA;MAAA5B,aAAA,GAAAE,CAAA;MACxB,MAAM0B,KAAA;IACR;EACF;EAEA;EACA,OAAc0B,oBAAA,EAA8C;IAAA;IAAAtD,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAC1D,OAAO,IAAIkB,OAAA,CAAAC,MAAM,CAACkC,eAAe,CAAC/C,eAAA;EACpC;AACF;AAEA;AACA,MAAMgD,eAAA;AAAA;AAAA,CAAAxD,aAAA,GAAAE,CAAA,QAAkB,IAAIH,eAAA;MAC5BK,QAAA;AAAA;AAAA,CAAAJ,aAAA,GAAAE,CAAA,QAAesD,eAAA","ignoreList":[]}