87f2690cf961b18032f84e575b730d47
"use strict";

/* istanbul ignore next */
function cov_20r483ngjn() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/lib/supabaseUtils.ts";
  var hash = "943ef27f1a054f4e3188941599bf0aca11565183";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/lib/supabaseUtils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "7": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "8": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 23,
          column: 102
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "10": {
        start: {
          line: 27,
          column: 41
        },
        end: {
          line: 27,
          column: 83
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "12": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 31,
          column: 18
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 36,
          column: 14
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "15": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "16": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "17": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "18": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "19": {
        start: {
          line: 58,
          column: 39
        },
        end: {
          line: 60,
          column: 19
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "21": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 65,
          column: 14
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "23": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 12,
            column: 30
          }
        },
        loc: {
          start: {
            line: 12,
            column: 40
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 15,
            column: 24
          }
        },
        loc: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "checkSupabaseConnection",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 38
          }
        },
        loc: {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 20
      },
      "4": {
        name: "testSupabaseQuery",
        decl: {
          start: {
            line: 55,
            column: 15
          },
          end: {
            line: 55,
            column: 32
          }
        },
        loc: {
          start: {
            line: 55,
            column: 44
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 55
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 17
          }
        }, {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 25,
            column: 43
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 55
          },
          end: {
            line: 51,
            column: 68
          }
        }, {
          start: {
            line: 51,
            column: 71
          },
          end: {
            line: 51,
            column: 84
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 30
          },
          end: {
            line: 75,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 55
          },
          end: {
            line: 75,
            column: 68
          }
        }, {
          start: {
            line: 75,
            column: 71
          },
          end: {
            line: 75,
            column: 84
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/lib/supabaseUtils.ts"],
      sourcesContent: ["import { supabase } from './supabase';\n\n/**\n * \u68C0\u67E5Supabase\u8FDE\u63A5\u72B6\u6001\n * @returns \u5305\u542B\u8FDE\u63A5\u72B6\u6001\u548C\u9519\u8BEF\u4FE1\u606F\u7684\u5BF9\u8C61\n */\nexport async function checkSupabaseConnection(): Promise<{ connected: boolean; error?: string }> {\n  try {\n    // \u5C1D\u8BD5\u6267\u884C\u4E00\u4E2A\u7B80\u5355\u7684\u67E5\u8BE2\u6765\u68C0\u67E5\u8FDE\u63A5\u72B6\u6001\n    const { data, error } = await supabase\n      .from('health_check')\n      .select('count')\n      .single();\n\n    // \u5982\u679C\u67E5\u8BE2\u5931\u8D25\u4F46\u9519\u8BEF\u4FE1\u606F\u8868\u660E\u662F\u8868\u4E0D\u5B58\u5728\u7684\u95EE\u9898\uFF0C\u5219\u53EF\u80FD\u662F\u6570\u636E\u5E93\u8FDE\u63A5\u6B63\u5E38\u4F46\u8868\u4E0D\u5B58\u5728\n    if (error && error.code === '42P01') {\n      // \u5C1D\u8BD5\u53E6\u4E00\u4E2A\u64CD\u4F5C\uFF0C\u4F8B\u5982\u67E5\u8BE2auth.users\n      const { error: authError } = await supabase.auth.getSession();\n      \n      if (!authError) {\n        return { connected: true };\n      }\n      \n      return { \n        connected: false, \n        error: `Supabase\u5DF2\u8FDE\u63A5\uFF0C\u4F46health_check\u8868\u4E0D\u5B58\u5728\uFF0C\u8BA4\u8BC1API\u9519\u8BEF: ${authError.message}` \n      };\n    }\n    \n    // \u5982\u679C\u6709\u5176\u4ED6\u9519\u8BEF\n    if (error) {\n      return { \n        connected: false, \n        error: `\u8FDE\u63A5\u9519\u8BEF: ${error.message}` \n      };\n    }\n    \n    return { connected: true };\n  } catch (error) {\n    return { \n      connected: false, \n      error: `\u672A\u9884\u671F\u7684\u9519\u8BEF: ${error instanceof Error ? error.message : String(error)}` \n    };\n  }\n}\n\n/**\n * \u6267\u884C\u7B80\u5355\u67E5\u8BE2\u6D4B\u8BD5Supabase\n * @param tableName \u8868\u540D\n * @returns \u67E5\u8BE2\u7ED3\u679C\u548C\u72B6\u6001\n */\nexport async function testSupabaseQuery(tableName: string): Promise<{ \n  success: boolean; \n  data?: any; \n  error?: string;\n  count?: number;\n}> {\n  try {\n    // \u5C1D\u8BD5\u67E5\u8BE2\u6307\u5B9A\u8868\u7684\u6570\u91CF\n    const { data, error, count } = await supabase\n      .from(tableName)\n      .select('*', { count: 'exact' })\n      .limit(1);\n    \n    if (error) {\n      return { \n        success: false, \n        error: `\u67E5\u8BE2\u9519\u8BEF: ${error.message}` \n      };\n    }\n    \n    return { \n      success: true, \n      data, \n      count \n    };\n  } catch (error) {\n    return { \n      success: false, \n      error: `\u672A\u9884\u671F\u7684\u9519\u8BEF: ${error instanceof Error ? error.message : String(error)}` \n    };\n  }\n} "],
      names: ["checkSupabaseConnection", "testSupabaseQuery", "data", "error", "supabase", "from", "select", "single", "code", "authError", "auth", "getSession", "connected", "message", "Error", "String", "tableName", "count", "limit", "success"],
      mappings: ";;;;;;;;;;;IAMsBA,uBAAuB;eAAvBA;;IA6CAC,iBAAiB;eAAjBA;;;0BAnDG;AAMlB,eAAeD;IACpB,IAAI;QACF,qBAAqB;QACrB,MAAM,EAAEE,IAAI,EAAEC,KAAK,EAAE,GAAG,MAAMC,kBAAQ,CACnCC,IAAI,CAAC,gBACLC,MAAM,CAAC,SACPC,MAAM;QAET,yCAAyC;QACzC,IAAIJ,SAASA,MAAMK,IAAI,KAAK,SAAS;YACnC,yBAAyB;YACzB,MAAM,EAAEL,OAAOM,SAAS,EAAE,GAAG,MAAML,kBAAQ,CAACM,IAAI,CAACC,UAAU;YAE3D,IAAI,CAACF,WAAW;gBACd,OAAO;oBAAEG,WAAW;gBAAK;YAC3B;YAEA,OAAO;gBACLA,WAAW;gBACXT,OAAO,CAAC,uCAAuC,EAAEM,UAAUI,OAAO,EAAE;YACtE;QACF;QAEA,UAAU;QACV,IAAIV,OAAO;YACT,OAAO;gBACLS,WAAW;gBACXT,OAAO,CAAC,MAAM,EAAEA,MAAMU,OAAO,EAAE;YACjC;QACF;QAEA,OAAO;YAAED,WAAW;QAAK;IAC3B,EAAE,OAAOT,OAAO;QACd,OAAO;YACLS,WAAW;YACXT,OAAO,CAAC,QAAQ,EAAEA,iBAAiBW,QAAQX,MAAMU,OAAO,GAAGE,OAAOZ,QAAQ;QAC5E;IACF;AACF;AAOO,eAAeF,kBAAkBe,SAAiB;IAMvD,IAAI;QACF,aAAa;QACb,MAAM,EAAEd,IAAI,EAAEC,KAAK,EAAEc,KAAK,EAAE,GAAG,MAAMb,kBAAQ,CAC1CC,IAAI,CAACW,WACLV,MAAM,CAAC,KAAK;YAAEW,OAAO;QAAQ,GAC7BC,KAAK,CAAC;QAET,IAAIf,OAAO;YACT,OAAO;gBACLgB,SAAS;gBACThB,OAAO,CAAC,MAAM,EAAEA,MAAMU,OAAO,EAAE;YACjC;QACF;QAEA,OAAO;YACLM,SAAS;YACTjB;YACAe;QACF;IACF,EAAE,OAAOd,OAAO;QACd,OAAO;YACLgB,SAAS;YACThB,OAAO,CAAC,QAAQ,EAAEA,iBAAiBW,QAAQX,MAAMU,OAAO,GAAGE,OAAOZ,QAAQ;QAC5E;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "943ef27f1a054f4e3188941599bf0aca11565183"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20r483ngjn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20r483ngjn();
cov_20r483ngjn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_20r483ngjn().f[0]++;
  cov_20r483ngjn().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_20r483ngjn().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_20r483ngjn().s[3]++;
_export(exports, {
  checkSupabaseConnection: function () {
    /* istanbul ignore next */
    cov_20r483ngjn().f[1]++;
    cov_20r483ngjn().s[4]++;
    return checkSupabaseConnection;
  },
  testSupabaseQuery: function () {
    /* istanbul ignore next */
    cov_20r483ngjn().f[2]++;
    cov_20r483ngjn().s[5]++;
    return testSupabaseQuery;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_20r483ngjn().s[6]++, require("./supabase"));
async function checkSupabaseConnection() {
  /* istanbul ignore next */
  cov_20r483ngjn().f[3]++;
  cov_20r483ngjn().s[7]++;
  try {
    // 尝试执行一个简单的查询来检查连接状态
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_20r483ngjn().s[8]++, await _supabase.supabase.from('health_check').select('count').single());
    // 如果查询失败但错误信息表明是表不存在的问题，则可能是数据库连接正常但表不存在
    /* istanbul ignore next */
    cov_20r483ngjn().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_20r483ngjn().b[1][0]++, error) &&
    /* istanbul ignore next */
    (cov_20r483ngjn().b[1][1]++, error.code === '42P01')) {
      /* istanbul ignore next */
      cov_20r483ngjn().b[0][0]++;
      // 尝试另一个操作，例如查询auth.users
      const {
        error: authError
      } =
      /* istanbul ignore next */
      (cov_20r483ngjn().s[10]++, await _supabase.supabase.auth.getSession());
      /* istanbul ignore next */
      cov_20r483ngjn().s[11]++;
      if (!authError) {
        /* istanbul ignore next */
        cov_20r483ngjn().b[2][0]++;
        cov_20r483ngjn().s[12]++;
        return {
          connected: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_20r483ngjn().b[2][1]++;
      }
      cov_20r483ngjn().s[13]++;
      return {
        connected: false,
        error: `Supabase已连接，但health_check表不存在，认证API错误: ${authError.message}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_20r483ngjn().b[0][1]++;
    }
    // 如果有其他错误
    cov_20r483ngjn().s[14]++;
    if (error) {
      /* istanbul ignore next */
      cov_20r483ngjn().b[3][0]++;
      cov_20r483ngjn().s[15]++;
      return {
        connected: false,
        error: `连接错误: ${error.message}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_20r483ngjn().b[3][1]++;
    }
    cov_20r483ngjn().s[16]++;
    return {
      connected: true
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_20r483ngjn().s[17]++;
    return {
      connected: false,
      error: `未预期的错误: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_20r483ngjn().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_20r483ngjn().b[4][1]++, String(error))}`
    };
  }
}
async function testSupabaseQuery(tableName) {
  /* istanbul ignore next */
  cov_20r483ngjn().f[4]++;
  cov_20r483ngjn().s[18]++;
  try {
    // 尝试查询指定表的数量
    const {
      data,
      error,
      count
    } =
    /* istanbul ignore next */
    (cov_20r483ngjn().s[19]++, await _supabase.supabase.from(tableName).select('*', {
      count: 'exact'
    }).limit(1));
    /* istanbul ignore next */
    cov_20r483ngjn().s[20]++;
    if (error) {
      /* istanbul ignore next */
      cov_20r483ngjn().b[5][0]++;
      cov_20r483ngjn().s[21]++;
      return {
        success: false,
        error: `查询错误: ${error.message}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_20r483ngjn().b[5][1]++;
    }
    cov_20r483ngjn().s[22]++;
    return {
      success: true,
      data,
      count
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_20r483ngjn().s[23]++;
    return {
      success: false,
      error: `未预期的错误: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_20r483ngjn().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_20r483ngjn().b[6][1]++, String(error))}`
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja1N1cGFiYXNlQ29ubmVjdGlvbiIsImNvdl8yMHI0ODNuZ2puIiwiZiIsInMiLCJ0ZXN0U3VwYWJhc2VRdWVyeSIsImRhdGEiLCJlcnJvciIsIl9zdXBhYmFzZSIsInN1cGFiYXNlIiwiZnJvbSIsInNlbGVjdCIsInNpbmdsZSIsImIiLCJjb2RlIiwiYXV0aEVycm9yIiwiYXV0aCIsImdldFNlc3Npb24iLCJjb25uZWN0ZWQiLCJtZXNzYWdlIiwiRXJyb3IiLCJTdHJpbmciLCJ0YWJsZU5hbWUiLCJjb3VudCIsImxpbWl0Iiwic3VjY2VzcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy95dWRleW91L0Rlc2t0b3Avc20vc29jaW9taW50L3NyYy9saWIvc3VwYWJhc2VVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJy4vc3VwYWJhc2UnO1xuXG4vKipcbiAqIOajgOafpVN1cGFiYXNl6L+e5o6l54q25oCBXG4gKiBAcmV0dXJucyDljIXlkKvov57mjqXnirbmgIHlkozplJnor6/kv6Hmga/nmoTlr7nosaFcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrU3VwYWJhc2VDb25uZWN0aW9uKCk6IFByb21pc2U8eyBjb25uZWN0ZWQ6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+IHtcbiAgdHJ5IHtcbiAgICAvLyDlsJ3or5XmiafooYzkuIDkuKrnroDljZXnmoTmn6Xor6LmnaXmo4Dmn6Xov57mjqXnirbmgIFcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2hlYWx0aF9jaGVjaycpXG4gICAgICAuc2VsZWN0KCdjb3VudCcpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICAvLyDlpoLmnpzmn6Xor6LlpLHotKXkvYbplJnor6/kv6Hmga/ooajmmI7mmK/ooajkuI3lrZjlnKjnmoTpl67popjvvIzliJnlj6/og73mmK/mlbDmja7lupPov57mjqXmraPluLjkvYbooajkuI3lrZjlnKhcbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJzQyUDAxJykge1xuICAgICAgLy8g5bCd6K+V5Y+m5LiA5Liq5pON5L2c77yM5L6L5aaC5p+l6K+iYXV0aC51c2Vyc1xuICAgICAgY29uc3QgeyBlcnJvcjogYXV0aEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFNlc3Npb24oKTtcbiAgICAgIFxuICAgICAgaWYgKCFhdXRoRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgY29ubmVjdGVkOiB0cnVlIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB7IFxuICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlLCBcbiAgICAgICAgZXJyb3I6IGBTdXBhYmFzZeW3sui/nuaOpe+8jOS9hmhlYWx0aF9jaGVja+ihqOS4jeWtmOWcqO+8jOiupOivgUFQSemUmeivrzogJHthdXRoRXJyb3IubWVzc2FnZX1gIFxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgLy8g5aaC5p6c5pyJ5YW25LuW6ZSZ6K+vXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgY29ubmVjdGVkOiBmYWxzZSwgXG4gICAgICAgIGVycm9yOiBg6L+e5o6l6ZSZ6K+vOiAke2Vycm9yLm1lc3NhZ2V9YCBcbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IGNvbm5lY3RlZDogdHJ1ZSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IFxuICAgICAgY29ubmVjdGVkOiBmYWxzZSwgXG4gICAgICBlcnJvcjogYOacqumihOacn+eahOmUmeivrzogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCBcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICog5omn6KGM566A5Y2V5p+l6K+i5rWL6K+VU3VwYWJhc2VcbiAqIEBwYXJhbSB0YWJsZU5hbWUg6KGo5ZCNXG4gKiBAcmV0dXJucyDmn6Xor6Lnu5PmnpzlkoznirbmgIFcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRlc3RTdXBhYmFzZVF1ZXJ5KHRhYmxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IFxuICBzdWNjZXNzOiBib29sZWFuOyBcbiAgZGF0YT86IGFueTsgXG4gIGVycm9yPzogc3RyaW5nO1xuICBjb3VudD86IG51bWJlcjtcbn0+IHtcbiAgdHJ5IHtcbiAgICAvLyDlsJ3or5Xmn6Xor6LmjIflrprooajnmoTmlbDph49cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yLCBjb3VudCB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKHRhYmxlTmFtZSlcbiAgICAgIC5zZWxlY3QoJyonLCB7IGNvdW50OiAnZXhhY3QnIH0pXG4gICAgICAubGltaXQoMSk7XG4gICAgXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBlcnJvcjogYOafpeivoumUmeivrzogJHtlcnJvci5tZXNzYWdlfWAgXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4geyBcbiAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgZGF0YSwgXG4gICAgICBjb3VudCBcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IFxuICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgZXJyb3I6IGDmnKrpooTmnJ/nmoTplJnor686ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAgXG4gICAgfTtcbiAgfVxufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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WCxjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPO01BQUVjLFNBQUEsRUFBVztJQUFLO0VBQzNCLEVBQUUsT0FBT1gsS0FBQSxFQUFPO0lBQUE7SUFBQUwsY0FBQSxHQUFBRSxDQUFBO0lBQ2QsT0FBTztNQUNMYyxTQUFBLEVBQVc7TUFDWFgsS0FBQSxFQUFPLFdBQVdBLEtBQUEsWUFBaUJhLEtBQUE7TUFBQTtNQUFBLENBQUFsQixjQUFBLEdBQUFXLENBQUEsVUFBUU4sS0FBQSxDQUFNWSxPQUFPO01BQUE7TUFBQSxDQUFBakIsY0FBQSxHQUFBVyxDQUFBLFVBQUdRLE1BQUEsQ0FBT2QsS0FBQTtJQUNwRTtFQUNGO0FBQ0Y7QUFPTyxlQUFlRixrQkFBa0JpQixTQUFpQjtFQUFBO0VBQUFwQixjQUFBLEdBQUFDLENBQUE7RUFBQUQsY0FBQSxHQUFBRSxDQUFBO0VBTXZELElBQUk7SUFDRjtJQUNBLE1BQU07TUFBRUUsSUFBSTtNQUFFQyxLQUFLO01BQUVnQjtJQUFLLENBQUU7SUFBQTtJQUFBLENBQUFyQixjQUFBLEdBQUFFLENBQUEsUUFBRyxNQUFNSSxTQUFBLENBQUFDLFFBQVEsQ0FDMUNDLElBQUksQ0FBQ1ksU0FBQSxFQUNMWCxNQUFNLENBQUMsS0FBSztNQUFFWSxLQUFBLEVBQU87SUFBUSxHQUM3QkMsS0FBSyxDQUFDO0lBQUE7SUFBQXRCLGNBQUEsR0FBQUUsQ0FBQTtJQUVULElBQUlHLEtBQUEsRUFBTztNQUFBO01BQUFMLGNBQUEsR0FBQVcsQ0FBQTtNQUFBWCxjQUFBLEdBQUFFLENBQUE7TUFDVCxPQUFPO1FBQ0xxQixPQUFBLEVBQVM7UUFDVGxCLEtBQUEsRUFBTyxTQUFTQSxLQUFBLENBQU1ZLE9BQU87TUFDL0I7SUFDRjtJQUFBO0lBQUE7TUFBQWpCLGNBQUEsR0FBQVcsQ0FBQTtJQUFBO0lBQUFYLGNBQUEsR0FBQUUsQ0FBQTtJQUVBLE9BQU87TUFDTHFCLE9BQUEsRUFBUztNQUNUbkIsSUFBQTtNQUNBaUI7SUFDRjtFQUNGLEVBQUUsT0FBT2hCLEtBQUEsRUFBTztJQUFBO0lBQUFMLGNBQUEsR0FBQUUsQ0FBQTtJQUNkLE9BQU87TUFDTHFCLE9BQUEsRUFBUztNQUNUbEIsS0FBQSxFQUFPLFdBQVdBLEtBQUEsWUFBaUJhLEtBQUE7TUFBQTtNQUFBLENBQUFsQixjQUFBLEdBQUFXLENBQUEsVUFBUU4sS0FBQSxDQUFNWSxPQUFPO01BQUE7TUFBQSxDQUFBakIsY0FBQSxHQUFBVyxDQUFBLFVBQUdRLE1BQUEsQ0FBT2QsS0FBQTtJQUNwRTtFQUNGO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=