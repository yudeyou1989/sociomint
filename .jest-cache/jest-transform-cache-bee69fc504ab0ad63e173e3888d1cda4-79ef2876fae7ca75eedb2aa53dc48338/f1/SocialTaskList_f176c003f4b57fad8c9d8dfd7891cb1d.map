{"version":3,"names":["_default","supabaseUrl","cov_6mkvsw0ej","s","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseAnonKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","supabase","_supabasejs","createClient","platformIcons","twitter","_jsxruntime","jsx","_FaTwitter","default","className","telegram","_FaTelegram","discord","_FaDiscord","taskTypeLabels","twitter_follow","twitter_like","twitter_retweet","twitter_comment","telegram_join","telegram_message","discord_join","discord_message","SocialTaskList","f","address","isConnected","_wagmi","useAccount","tasks","setTasks","_react","useState","loading","setLoading","error","setError","activeTab","setActiveTab","selectedPlatform","setSelectedPlatform","userSession","setUserSession","userFlowerBalance","setUserFlowerBalance","completingTask","setCompletingTask","useEffect","getSession","data","auth","session","b","fetchUserBalance","from","select","eq","user","id","single","xiaohonghua_balance","err","console","fetchTasks","url","response","fetch","headers","access_token","ok","Error","result","json","success","message","handleCompleteTask","taskId","alert","task","find","t","flower_cost","platformUserId","platformUsername","proofUrl","proofData","platform","authWindow","window","open","location","origin","authResult","Promise","resolve","addEventListener","event","type","userId","username","tweetId","messageId","method","body","JSON","stringify","task_id","platform_user_id","platform_username","proof_url","proof_data","prev","flower_reward","handleTabChange","newValue","handlePlatformChange","renderPlatformFilter","jsxs","_Box","sx","display","gap","mb","_Chip","label","color","onClick","icon","renderTaskCard","_Card","position","_CardContent","justifyContent","alignItems","_Typography","variant","component","title","charAt","toUpperCase","slice","size","description","task_type","mr","_Tooltip","_AccessTime","fontSize","daily_limit","_Divider","my","_Grid","container","spacing","mt","item","xs","_LocalFlorist","isCompleted","_Button","startIcon","_CheckCircle","disabled","Fragment","_CircularProgress","_IconButton","_Refresh","_Tabs","value","onChange","_Tab","_Alert","severity","length","map"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/components/social/SocialTaskList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAccount } from 'wagmi';\nimport { createClient } from '@supabase/supabase-js';\nimport type { SocialTask, TaskSubmission } from '@/types/global';\nimport { \n  Box, \n  Card, \n  CardContent, \n  Typography, \n  Button, \n  Chip, \n  Grid, \n  CircularProgress,\n  Tabs,\n  Tab,\n  Divider,\n  Alert,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  CheckCircle as CheckCircleIcon,\n  AccessTime as AccessTimeIcon,\n  LocalFlorist as FlowerIcon\n} from '@mui/icons-material';\nimport { FaTwitter, FaTelegram, FaDiscord } from 'react-icons/fa';\n\n// 创建Supabase客户端\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// 平台图标映射\nconst platformIcons = {\n  twitter: <FaTwitter className=\"text-blue-400\" />,\n  telegram: <FaTelegram className=\"text-cyan-400\" />,\n  discord: <FaDiscord className=\"text-purple-400\" />\n};\n\n// 任务类型映射\nconst taskTypeLabels = {\n  twitter_follow: '关注',\n  twitter_like: '点赞',\n  twitter_retweet: '转发',\n  twitter_comment: '评论',\n  telegram_join: '加入频道',\n  telegram_message: '发送消息',\n  discord_join: '加入服务器',\n  discord_message: '发送消息'\n};\n\ninterface SocialTaskListProps {\n  className?: string;\n}\n\n/**\n * 社交任务列表组件\n */\nconst SocialTaskList: React.FC<SocialTaskListProps> = ({ className }) => {\n  const { address, isConnected } = useAccount();\n  const [tasks, setTasks] = useState<SocialTask[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<string>('all');\n  const [selectedPlatform, setSelectedPlatform] = useState<string>('all');\n  const [userSession, setUserSession] = useState<any>(null);\n  const [userFlowerBalance, setUserFlowerBalance] = useState<number>(0);\n  const [completingTask, setCompletingTask] = useState<string | null>(null);\n\n  // 获取用户会话\n  useEffect(() => {\n    const getSession = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      if (data.session) {\n        setUserSession(data.session);\n      }\n    };\n\n    getSession();\n  }, []);\n\n  // 获取用户小红花余额\n  useEffect(() => {\n    const fetchUserBalance = async () => {\n      if (!userSession) return;\n\n      try {\n        const { data, error } = await supabase\n          .from('users')\n          .select('xiaohonghua_balance')\n          .eq('id', userSession.user.id)\n          .single();\n\n        if (error) throw error;\n        setUserFlowerBalance(data?.xiaohonghua_balance || 0);\n      } catch (err) {\n        console.error('获取小红花余额失败:', err);\n      }\n    };\n\n    fetchUserBalance();\n  }, [userSession]);\n\n  // 加载任务列表\n  useEffect(() => {\n    fetchTasks();\n  }, [activeTab, selectedPlatform, userSession]);\n\n  // 获取任务列表\n  const fetchTasks = async () => {\n    if (!userSession) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // 构建API URL\n      let url = `${supabaseUrl}/functions/v1/social-tasks/tasks/list?`;\n      \n      // 添加平台筛选\n      if (selectedPlatform !== 'all') {\n        url += `platform=${selectedPlatform}&`;\n      }\n      \n      // 添加状态筛选\n      if (activeTab === 'completed') {\n        url += 'status=completed&';\n      } else {\n        url += 'status=active&';\n      }\n      \n      // 发送请求\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${userSession.access_token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('获取任务列表失败');\n      }\n\n      const result = await response.json();\n      \n      if (result.success) {\n        setTasks(result.data || []);\n      } else {\n        throw new Error(result.message || '获取任务列表失败');\n      }\n    } catch (err) {\n      console.error('获取任务列表错误:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 处理任务完成\n  const handleCompleteTask = async (taskId) => {\n    if (!userSession || !isConnected) {\n      alert('请先登录并连接钱包');\n      return;\n    }\n\n    // 获取任务详情\n    const task = tasks.find(t => t.id === taskId);\n    if (!task) return;\n\n    // 检查小红花余额\n    if (userFlowerBalance < task.flower_cost) {\n      alert(`小红花余额不足！需要 ${task.flower_cost} 朵小红花，但您只有 ${userFlowerBalance} 朵。`);\n      return;\n    }\n\n    setCompletingTask(taskId);\n\n    try {\n      // 根据平台类型处理不同的验证流程\n      let platformUserId, platformUsername, proofUrl, proofData;\n\n      if (task.platform === 'twitter') {\n        // 打开Twitter授权窗口\n        const authWindow = window.open(`${window.location.origin}/auth/twitter?task=${taskId}`, 'twitter-auth', 'width=600,height=600');\n        \n        // 等待授权完成\n        const authResult = await new Promise((resolve) => {\n          window.addEventListener('message', (event) => {\n            if (event.data.type === 'twitter-auth-complete') {\n              resolve(event.data);\n            }\n          });\n        });\n        \n        if (!authResult.success) {\n          throw new Error(authResult.message || 'Twitter授权失败');\n        }\n        \n        platformUserId = authResult.userId;\n        platformUsername = authResult.username;\n        proofUrl = authResult.proofUrl;\n        proofData = { tweetId: authResult.tweetId };\n      } else if (task.platform === 'telegram') {\n        // 打开Telegram授权窗口\n        const authWindow = window.open(`${window.location.origin}/auth/telegram?task=${taskId}`, 'telegram-auth', 'width=600,height=600');\n        \n        // 等待授权完成\n        const authResult = await new Promise((resolve) => {\n          window.addEventListener('message', (event) => {\n            if (event.data.type === 'telegram-auth-complete') {\n              resolve(event.data);\n            }\n          });\n        });\n        \n        if (!authResult.success) {\n          throw new Error(authResult.message || 'Telegram授权失败');\n        }\n        \n        platformUserId = authResult.userId;\n        platformUsername = authResult.username;\n        proofUrl = authResult.proofUrl;\n        proofData = { messageId: authResult.messageId };\n      } else if (task.platform === 'discord') {\n        // 打开Discord授权窗口\n        const authWindow = window.open(`${window.location.origin}/auth/discord?task=${taskId}`, 'discord-auth', 'width=600,height=600');\n        \n        // 等待授权完成\n        const authResult = await new Promise((resolve) => {\n          window.addEventListener('message', (event) => {\n            if (event.data.type === 'discord-auth-complete') {\n              resolve(event.data);\n            }\n          });\n        });\n        \n        if (!authResult.success) {\n          throw new Error(authResult.message || 'Discord授权失败');\n        }\n        \n        platformUserId = authResult.userId;\n        platformUsername = authResult.username;\n        proofUrl = authResult.proofUrl;\n        proofData = { messageId: authResult.messageId };\n      } else {\n        throw new Error('不支持的平台类型');\n      }\n\n      // 提交任务完成\n      const response = await fetch(`${supabaseUrl}/functions/v1/social-tasks/tasks/complete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${userSession.access_token}`\n        },\n        body: JSON.stringify({\n          task_id: taskId,\n          platform_user_id: platformUserId,\n          platform_username: platformUsername,\n          proof_url: proofUrl,\n          proof_data: proofData\n        })\n      });\n\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.message || '提交任务失败');\n      }\n\n      // 更新小红花余额\n      setUserFlowerBalance(prev => prev - task.flower_cost + task.flower_reward);\n      \n      // 刷新任务列表\n      fetchTasks();\n      \n      alert(result.message || '任务完成成功！');\n    } catch (err) {\n      console.error('完成任务失败:', err);\n      alert(`完成任务失败: ${err.message}`);\n    } finally {\n      setCompletingTask(null);\n    }\n  };\n\n  // 处理标签切换\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  // 处理平台筛选\n  const handlePlatformChange = (platform) => {\n    setSelectedPlatform(platform);\n  };\n\n  // 渲染平台筛选器\n  const renderPlatformFilter = () => (\n    <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n      <Chip \n        label=\"全部\" \n        color={selectedPlatform === 'all' ? 'primary' : 'default'} \n        onClick={() => handlePlatformChange('all')} \n      />\n      <Chip\n        icon={<FaTwitter />}\n        label=\"Twitter\"\n        color={selectedPlatform === 'twitter' ? 'primary' : 'default'}\n        onClick={() => handlePlatformChange('twitter')}\n      />\n      <Chip\n        icon={<FaTelegram />}\n        label=\"Telegram\"\n        color={selectedPlatform === 'telegram' ? 'primary' : 'default'}\n        onClick={() => handlePlatformChange('telegram')}\n      />\n      <Chip\n        icon={<FaDiscord />}\n        label=\"Discord\"\n        color={selectedPlatform === 'discord' ? 'primary' : 'default'}\n        onClick={() => handlePlatformChange('discord')}\n      />\n    </Box>\n  );\n\n  // 渲染任务卡片\n  const renderTaskCard = (task) => (\n    <Card key={task.id} sx={{ mb: 2, position: 'relative' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n          <Typography variant=\"h6\" component=\"div\">\n            {task.title}\n          </Typography>\n          <Chip \n            icon={platformIcons[task.platform]} \n            label={task.platform.charAt(0).toUpperCase() + task.platform.slice(1)} \n            size=\"small\" \n            color=\"primary\" \n            variant=\"outlined\" \n          />\n        </Box>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          {task.description}\n        </Typography>\n        \n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <Chip \n            label={taskTypeLabels[task.task_type] || task.task_type} \n            size=\"small\" \n            sx={{ mr: 1 }} \n          />\n          <Tooltip title=\"每日可完成次数\">\n            <Chip \n              icon={<AccessTimeIcon fontSize=\"small\" />}\n              label={`每日限制: ${task.daily_limit}次`} \n              size=\"small\" \n              variant=\"outlined\" \n              sx={{ mr: 1 }} \n            />\n          </Tooltip>\n        </Box>\n        \n        <Divider sx={{ my: 1 }} />\n        \n        <Grid container spacing={2} sx={{ mt: 1 }}>\n          <Grid item xs={6}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <FlowerIcon color=\"error\" fontSize=\"small\" sx={{ mr: 0.5 }} />\n              <Typography variant=\"body2\" color=\"error\">\n                消耗: {task.flower_cost} 小红花\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <FlowerIcon color=\"success\" fontSize=\"small\" sx={{ mr: 0.5 }} />\n              <Typography variant=\"body2\" color=\"success\">\n                奖励: {task.flower_reward} 小红花\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n        \n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n          {task.isCompleted ? (\n            <Button \n              variant=\"contained\" \n              color=\"success\" \n              startIcon={<CheckCircleIcon />}\n              disabled\n            >\n              已完成\n            </Button>\n          ) : (\n            <Button \n              variant=\"contained\" \n              color=\"primary\"\n              onClick={() => handleCompleteTask(task.id)}\n              disabled={completingTask === task.id}\n            >\n              {completingTask === task.id ? (\n                <>\n                  <CircularProgress size={20} sx={{ mr: 1 }} />\n                  处理中...\n                </>\n              ) : '完成任务'}\n            </Button>\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" component=\"h2\">\n          社交任务\n        </Typography>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Chip \n            icon={<FlowerIcon />} \n            label={`${userFlowerBalance} 小红花`} \n            color=\"primary\" \n            sx={{ mr: 2 }} \n          />\n          <IconButton onClick={fetchTasks} disabled={loading}>\n            <RefreshIcon />\n          </IconButton>\n        </Box>\n      </Box>\n\n      <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 2 }}>\n        <Tab label=\"可用任务\" value=\"all\" />\n        <Tab label=\"已完成\" value=\"completed\" />\n      </Tabs>\n\n      {renderPlatformFilter()}\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n          <CircularProgress />\n        </Box>\n      ) : tasks.length > 0 ? (\n        tasks.map(renderTaskCard)\n      ) : (\n        <Alert severity=\"info\">\n          {activeTab === 'completed' ? '您还没有完成任何任务' : '当前没有可用的任务'}\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default SocialTaskList;\n"],"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","ignoreList":[]}