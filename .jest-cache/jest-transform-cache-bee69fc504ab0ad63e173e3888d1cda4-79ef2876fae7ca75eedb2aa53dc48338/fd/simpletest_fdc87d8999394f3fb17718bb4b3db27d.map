{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/simple.test.ts"],"sourcesContent":["/**\n * 简化的测试文件，用于验证测试环境配置\n */\n\ndescribe('Simple Tests', () => {\n  it('should pass basic test', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  it('should handle async operations', async () => {\n    const result = await Promise.resolve('test');\n    expect(result).toBe('test');\n  });\n\n  it('should work with arrays', () => {\n    const arr = [1, 2, 3];\n    expect(arr).toHaveLength(3);\n    expect(arr).toContain(2);\n  });\n\n  it('should work with objects', () => {\n    const obj = { name: 'test', value: 42 };\n    expect(obj).toHaveProperty('name');\n    expect(obj.name).toBe('test');\n  });\n\n  it('should handle errors', () => {\n    expect(() => {\n      throw new Error('test error');\n    }).toThrow('test error');\n  });\n\n  it('should work with mocks', () => {\n    const mockFn = jest.fn();\n    mockFn('test');\n    \n    expect(mockFn).toHaveBeenCalled();\n    expect(mockFn).toHaveBeenCalledWith('test');\n  });\n\n  it('should work with promises', async () => {\n    const mockPromise = jest.fn().mockResolvedValue('success');\n    const result = await mockPromise();\n    \n    expect(result).toBe('success');\n    expect(mockPromise).toHaveBeenCalled();\n  });\n\n  it('should work with rejected promises', async () => {\n    const mockPromise = jest.fn().mockRejectedValue(new Error('failed'));\n    \n    await expect(mockPromise()).rejects.toThrow('failed');\n  });\n});\n\n// 测试工具函数\ndescribe('Utility Functions', () => {\n  const formatAddress = (address: string) => {\n    if (!address) return '';\n    if (address.length <= 10) return address;\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const formatNumber = (num: number, decimals: number = 2) => {\n    return num.toLocaleString('zh-CN', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    });\n  };\n\n  const validateAddress = (address: string) => {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n  };\n\n  it('should format addresses correctly', () => {\n    const longAddress = '0x1234567890abcdef1234567890abcdef12345678';\n    expect(formatAddress(longAddress)).toBe('0x1234...5678');\n    \n    const shortAddress = '0x123';\n    expect(formatAddress(shortAddress)).toBe('0x123');\n    \n    expect(formatAddress('')).toBe('');\n  });\n\n  it('should format numbers correctly', () => {\n    expect(formatNumber(1000)).toBe('1,000.00');\n    expect(formatNumber(1000.123, 2)).toBe('1,000.12');\n    expect(formatNumber(1000.123, 0)).toBe('1,000');\n  });\n\n  it('should validate addresses correctly', () => {\n    expect(validateAddress('0x1234567890abcdef1234567890abcdef12345678')).toBe(true);\n    expect(validateAddress('0x123')).toBe(false);\n    expect(validateAddress('invalid')).toBe(false);\n    expect(validateAddress('')).toBe(false);\n  });\n});\n\n// 测试异步操作\ndescribe('Async Operations', () => {\n  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  const fetchData = async (shouldFail: boolean = false) => {\n    await sleep(10);\n    if (shouldFail) {\n      throw new Error('Fetch failed');\n    }\n    return { data: 'test data', timestamp: Date.now() };\n  };\n\n  it('should handle successful async operations', async () => {\n    const result = await fetchData();\n    \n    expect(result).toHaveProperty('data');\n    expect(result.data).toBe('test data');\n    expect(result.timestamp).toBeGreaterThan(0);\n  });\n\n  it('should handle failed async operations', async () => {\n    await expect(fetchData(true)).rejects.toThrow('Fetch failed');\n  });\n\n  it('should handle timeouts', async () => {\n    const start = Date.now();\n    await sleep(50);\n    const end = Date.now();\n    \n    expect(end - start).toBeGreaterThanOrEqual(40); // 允许一些误差\n  });\n});\n\n// 测试数据处理\ndescribe('Data Processing', () => {\n  const processTokenData = (data: any) => {\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid data');\n    }\n    \n    return {\n      ...data,\n      processed: true,\n      timestamp: Date.now(),\n    };\n  };\n\n  const calculateTokenAmount = (bnbAmount: number, price: number) => {\n    if (bnbAmount <= 0 || price <= 0) {\n      throw new Error('Invalid amounts');\n    }\n    \n    return (bnbAmount / price) * 1e18;\n  };\n\n  it('should process token data correctly', () => {\n    const input = { name: 'SM Token', symbol: 'SM' };\n    const result = processTokenData(input);\n    \n    expect(result).toHaveProperty('processed', true);\n    expect(result).toHaveProperty('timestamp');\n    expect(result.name).toBe('SM Token');\n    expect(result.symbol).toBe('SM');\n  });\n\n  it('should handle invalid token data', () => {\n    expect(() => processTokenData(null)).toThrow('Invalid data');\n    expect(() => processTokenData('invalid')).toThrow('Invalid data');\n    expect(() => processTokenData(123)).toThrow('Invalid data');\n  });\n\n  it('should calculate token amounts correctly', () => {\n    const result = calculateTokenAmount(1, 0.000001);\n    expect(result).toBe(1e24);\n    \n    const result2 = calculateTokenAmount(0.5, 0.000002);\n    expect(result2).toBe(2.5e23);\n  });\n\n  it('should handle invalid calculation inputs', () => {\n    expect(() => calculateTokenAmount(0, 0.000001)).toThrow('Invalid amounts');\n    expect(() => calculateTokenAmount(1, 0)).toThrow('Invalid amounts');\n    expect(() => calculateTokenAmount(-1, 0.000001)).toThrow('Invalid amounts');\n  });\n});\n\n// 测试状态管理\ndescribe('State Management', () => {\n  class SimpleStore {\n    private state: any = {};\n    \n    setState(newState: any) {\n      this.state = { ...this.state, ...newState };\n    }\n    \n    getState() {\n      return this.state;\n    }\n    \n    reset() {\n      this.state = {};\n    }\n  }\n\n  let store: SimpleStore;\n\n  beforeEach(() => {\n    store = new SimpleStore();\n  });\n\n  it('should manage state correctly', () => {\n    expect(store.getState()).toEqual({});\n    \n    store.setState({ count: 1 });\n    expect(store.getState()).toEqual({ count: 1 });\n    \n    store.setState({ name: 'test' });\n    expect(store.getState()).toEqual({ count: 1, name: 'test' });\n  });\n\n  it('should reset state correctly', () => {\n    store.setState({ count: 1, name: 'test' });\n    expect(store.getState()).toEqual({ count: 1, name: 'test' });\n    \n    store.reset();\n    expect(store.getState()).toEqual({});\n  });\n});\n\n// 测试错误处理\ndescribe('Error Handling', () => {\n  const riskyOperation = (shouldFail: boolean, errorType: string = 'generic') => {\n    if (shouldFail) {\n      switch (errorType) {\n        case 'network':\n          throw new Error('Network error');\n        case 'validation':\n          throw new Error('Validation error');\n        default:\n          throw new Error('Generic error');\n      }\n    }\n    return 'success';\n  };\n\n  it('should handle different error types', () => {\n    expect(() => riskyOperation(true, 'network')).toThrow('Network error');\n    expect(() => riskyOperation(true, 'validation')).toThrow('Validation error');\n    expect(() => riskyOperation(true)).toThrow('Generic error');\n  });\n\n  it('should return success when no error', () => {\n    expect(riskyOperation(false)).toBe('success');\n  });\n});\n\n// 测试数组和对象操作\ndescribe('Array and Object Operations', () => {\n  const transactions = [\n    { id: 1, amount: 100, type: 'buy' },\n    { id: 2, amount: 50, type: 'sell' },\n    { id: 3, amount: 200, type: 'buy' },\n  ];\n\n  it('should filter transactions correctly', () => {\n    const buyTransactions = transactions.filter(tx => tx.type === 'buy');\n    expect(buyTransactions).toHaveLength(2);\n    expect(buyTransactions[0].amount).toBe(100);\n    expect(buyTransactions[1].amount).toBe(200);\n  });\n\n  it('should calculate total amounts', () => {\n    const totalAmount = transactions.reduce((sum, tx) => sum + tx.amount, 0);\n    expect(totalAmount).toBe(350);\n    \n    const buyTotal = transactions\n      .filter(tx => tx.type === 'buy')\n      .reduce((sum, tx) => sum + tx.amount, 0);\n    expect(buyTotal).toBe(300);\n  });\n\n  it('should map transactions correctly', () => {\n    const mapped = transactions.map(tx => ({\n      ...tx,\n      amountInWei: tx.amount * 1e18,\n    }));\n    \n    expect(mapped[0].amountInWei).toBe(100e18);\n    expect(mapped).toHaveLength(3);\n  });\n});\n"],"names":["describe","it","expect","toBe","result","Promise","resolve","arr","toHaveLength","toContain","obj","name","value","toHaveProperty","Error","toThrow","mockFn","jest","fn","toHaveBeenCalled","toHaveBeenCalledWith","mockPromise","mockResolvedValue","mockRejectedValue","rejects","formatAddress","address","length","slice","formatNumber","num","decimals","toLocaleString","minimumFractionDigits","maximumFractionDigits","validateAddress","test","longAddress","shortAddress","sleep","ms","setTimeout","fetchData","shouldFail","data","timestamp","Date","now","toBeGreaterThan","start","end","toBeGreaterThanOrEqual","processTokenData","processed","calculateTokenAmount","bnbAmount","price","input","symbol","result2","SimpleStore","setState","newState","state","getState","reset","store","beforeEach","toEqual","count","riskyOperation","errorType","transactions","id","amount","type","buyTransactions","filter","tx","totalAmount","reduce","sum","buyTotal","mapped","map","amountInWei"],"mappings":"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"}