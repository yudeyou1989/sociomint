{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/contexts/__tests__/WalletContext.test.tsx"],"sourcesContent":["/**\n * WalletContext测试\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { WalletProvider, useWallet } from '@/contexts/WalletContext';\n\n// Mock ethers\njest.mock('ethers', () => ({\n  ethers: {\n    BrowserProvider: jest.fn(),\n    formatEther: jest.fn((value) => '1.0'),\n    parseEther: jest.fn((value) => BigInt(value)),\n  },\n  formatEther: jest.fn((value) => '1.0'),\n}));\n\n// Mock wallet service\njest.mock('@/services/walletService', () => ({\n  getConnectedWalletType: jest.fn(),\n  disconnectWallet: jest.fn(),\n  WalletType: {\n    METAMASK: 'metamask',\n    WALLETCONNECT: 'walletconnect',\n  },\n}));\n\n// Mock contract service\njest.mock('@/services/contractService', () => ({\n  default: {\n    getSMTokenBalance: jest.fn().mockResolvedValue('100'),\n    getFlowerBalance: jest.fn().mockResolvedValue('50'),\n  },\n}));\n\n// Test component that uses wallet context\nconst TestComponent = () => {\n  const {\n    isConnected,\n    address,\n    balance,\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n  } = useWallet();\n\n  return (\n    <div>\n      <div data-testid=\"connection-status\">\n        {isConnected ? 'Connected' : 'Disconnected'}\n      </div>\n      <div data-testid=\"address\">{address || 'No address'}</div>\n      <div data-testid=\"balance\">\n        BNB: {balance?.bnb || '0'}, SM: {balance?.sm || '0'}\n      </div>\n      <button onClick={connectWallet} data-testid=\"connect-btn\">\n        Connect\n      </button>\n      <button onClick={disconnectWallet} data-testid=\"disconnect-btn\">\n        Disconnect\n      </button>\n      <button onClick={() => switchNetwork(56)} data-testid=\"switch-network-btn\">\n        Switch Network\n      </button>\n    </div>\n  );\n};\n\nconst renderWithProvider = (component: React.ReactElement) => {\n  return render(\n    <WalletProvider>\n      {component}\n    </WalletProvider>\n  );\n};\n\ndescribe('WalletContext', () => {\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Mock window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: {\n        request: jest.fn(),\n        on: jest.fn(),\n        removeListener: jest.fn(),\n        isMetaMask: true,\n      },\n      writable: true,\n    });\n  });\n\n  it('provides initial wallet state', () => {\n    renderWithProvider(<TestComponent />);\n    \n    expect(screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');\n    expect(screen.getByTestId('address')).toHaveTextContent('No address');\n    expect(screen.getByTestId('balance')).toHaveTextContent('BNB: 0, SM: 0');\n  });\n\n  it('handles wallet connection', async () => {\n    const mockAccounts = ['0x1234567890123456789012345678901234567890'];\n    \n    (window.ethereum as any).request.mockImplementation((params: any) => {\n      if (params.method === 'eth_requestAccounts') {\n        return Promise.resolve(mockAccounts);\n      }\n      if (params.method === 'eth_getBalance') {\n        return Promise.resolve('0x1bc16d674ec80000'); // 2 ETH in wei\n      }\n      if (params.method === 'eth_chainId') {\n        return Promise.resolve('0x38'); // BSC mainnet\n      }\n      return Promise.resolve();\n    });\n\n    renderWithProvider(<TestComponent />);\n    \n    fireEvent.click(screen.getByTestId('connect-btn'));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n    });\n    \n    expect(window.ethereum.request).toHaveBeenCalledWith({\n      method: 'eth_requestAccounts',\n    });\n  });\n\n  it('handles wallet disconnection', async () => {\n    renderWithProvider(<TestComponent />);\n    \n    // First connect\n    (window.ethereum as any).request.mockResolvedValue(['0x1234567890123456789012345678901234567890']);\n    fireEvent.click(screen.getByTestId('connect-btn'));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n    });\n    \n    // Then disconnect\n    fireEvent.click(screen.getByTestId('disconnect-btn'));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');\n    });\n  });\n\n  it('handles network switching', async () => {\n    renderWithProvider(<TestComponent />);\n    \n    (window.ethereum as any).request.mockImplementation((params: any) => {\n      if (params.method === 'wallet_switchEthereumChain') {\n        return Promise.resolve();\n      }\n      return Promise.resolve();\n    });\n    \n    fireEvent.click(screen.getByTestId('switch-network-btn'));\n    \n    await waitFor(() => {\n      expect(window.ethereum.request).toHaveBeenCalledWith({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x38' }], // BSC mainnet\n      });\n    });\n  });\n\n  it('handles connection errors gracefully', async () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    \n    (window.ethereum as any).request.mockRejectedValue(new Error('User rejected'));\n    \n    renderWithProvider(<TestComponent />);\n    \n    fireEvent.click(screen.getByTestId('connect-btn'));\n    \n    await waitFor(() => {\n      expect(consoleSpy).toHaveBeenCalled();\n    });\n    \n    expect(screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');\n    \n    consoleSpy.mockRestore();\n  });\n\n  it('updates balance when connected', async () => {\n    const mockAccounts = ['0x1234567890123456789012345678901234567890'];\n    \n    (window.ethereum as any).request.mockImplementation((params: any) => {\n      if (params.method === 'eth_requestAccounts') {\n        return Promise.resolve(mockAccounts);\n      }\n      if (params.method === 'eth_getBalance') {\n        return Promise.resolve('0x1bc16d674ec80000'); // 2 ETH in wei\n      }\n      return Promise.resolve();\n    });\n\n    renderWithProvider(<TestComponent />);\n    \n    fireEvent.click(screen.getByTestId('connect-btn'));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('balance')).toHaveTextContent('BNB: 1.0');\n    });\n  });\n\n  it('handles account changes', async () => {\n    renderWithProvider(<TestComponent />);\n    \n    // Simulate account change\n    const accountChangeHandler = (window.ethereum as any).on.mock.calls\n      .find((call: any) => call[0] === 'accountsChanged')?.[1];\n    \n    if (accountChangeHandler) {\n      accountChangeHandler(['0x9876543210987654321098765432109876543210']);\n    }\n    \n    // Should trigger wallet state update\n    expect(window.ethereum.on).toHaveBeenCalledWith('accountsChanged', expect.any(Function));\n  });\n\n  it('handles chain changes', async () => {\n    renderWithProvider(<TestComponent />);\n    \n    // Simulate chain change\n    const chainChangeHandler = (window.ethereum as any).on.mock.calls\n      .find((call: any) => call[0] === 'chainChanged')?.[1];\n    \n    if (chainChangeHandler) {\n      chainChangeHandler('0x1'); // Ethereum mainnet\n    }\n    \n    expect(window.ethereum.on).toHaveBeenCalledWith('chainChanged', expect.any(Function));\n  });\n});\n"],"names":["jest","mock","ethers","BrowserProvider","fn","formatEther","value","parseEther","BigInt","getConnectedWalletType","disconnectWallet","WalletType","METAMASK","WALLETCONNECT","default","getSMTokenBalance","mockResolvedValue","getFlowerBalance","TestComponent","isConnected","address","balance","connectWallet","switchNetwork","useWallet","div","data-testid","bnb","sm","button","onClick","renderWithProvider","component","render","WalletProvider","describe","beforeEach","clearAllMocks","Object","defineProperty","window","request","on","removeListener","isMetaMask","writable","it","expect","screen","getByTestId","toHaveTextContent","mockAccounts","ethereum","mockImplementation","params","method","Promise","resolve","fireEvent","click","waitFor","toHaveBeenCalledWith","chainId","consoleSpy","spyOn","console","mockRejectedValue","Error","toHaveBeenCalled","mockRestore","accountChangeHandler","calls","find","call","any","Function","chainChangeHandler"],"mappings":"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"}