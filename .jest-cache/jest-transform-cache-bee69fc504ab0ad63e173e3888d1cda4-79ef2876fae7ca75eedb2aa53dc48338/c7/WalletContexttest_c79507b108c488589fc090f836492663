a454d5377c7b77bfd156c027a03058cf
/**
 * WalletContext测试
 */ "use strict";
// Mock ethers
jest.mock('ethers', ()=>({
        ethers: {
            BrowserProvider: jest.fn(),
            formatEther: jest.fn((value)=>'1.0'),
            parseEther: jest.fn((value)=>BigInt(value))
        },
        formatEther: jest.fn((value)=>'1.0')
    }));
// Mock wallet service
jest.mock('@/services/walletService', ()=>({
        getConnectedWalletType: jest.fn(),
        disconnectWallet: jest.fn(),
        WalletType: {
            METAMASK: 'metamask',
            WALLETCONNECT: 'walletconnect'
        }
    }));
// Mock contract service
jest.mock('@/services/contractService', ()=>({
        default: {
            getSMTokenBalance: jest.fn().mockResolvedValue('100'),
            getFlowerBalance: jest.fn().mockResolvedValue('50')
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _WalletContext = require("../WalletContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Test component that uses wallet context
const TestComponent = ()=>{
    const { isConnected, address, balance, connectWallet, disconnectWallet, switchNetwork } = (0, _WalletContext.useWallet)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "connection-status",
                children: isConnected ? 'Connected' : 'Disconnected'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "address",
                children: address || 'No address'
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "balance",
                children: [
                    "BNB: ",
                    balance?.bnb || '0',
                    ", SM: ",
                    balance?.sm || '0'
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: connectWallet,
                "data-testid": "connect-btn",
                children: "Connect"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: disconnectWallet,
                "data-testid": "disconnect-btn",
                children: "Disconnect"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>switchNetwork(56),
                "data-testid": "switch-network-btn",
                children: "Switch Network"
            })
        ]
    });
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WalletContext.WalletProvider, {
        children: component
    }));
};
describe('WalletContext', ()=>{
    beforeEach(()=>{
        // Reset mocks
        jest.clearAllMocks();
        // Mock window.ethereum
        Object.defineProperty(window, 'ethereum', {
            value: {
                request: jest.fn(),
                on: jest.fn(),
                removeListener: jest.fn(),
                isMetaMask: true
            },
            writable: true
        });
    });
    it('provides initial wallet state', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');
        expect(_react1.screen.getByTestId('address')).toHaveTextContent('No address');
        expect(_react1.screen.getByTestId('balance')).toHaveTextContent('BNB: 0, SM: 0');
    });
    it('handles wallet connection', async ()=>{
        const mockAccounts = [
            '0x1234567890123456789012345678901234567890'
        ];
        window.ethereum.request.mockImplementation((params)=>{
            if (params.method === 'eth_requestAccounts') {
                return Promise.resolve(mockAccounts);
            }
            if (params.method === 'eth_getBalance') {
                return Promise.resolve('0x1bc16d674ec80000'); // 2 ETH in wei
            }
            if (params.method === 'eth_chainId') {
                return Promise.resolve('0x38'); // BSC mainnet
            }
            return Promise.resolve();
        });
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        _react1.fireEvent.click(_react1.screen.getByTestId('connect-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
        });
        expect(window.ethereum.request).toHaveBeenCalledWith({
            method: 'eth_requestAccounts'
        });
    });
    it('handles wallet disconnection', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // First connect
        window.ethereum.request.mockResolvedValue([
            '0x1234567890123456789012345678901234567890'
        ]);
        _react1.fireEvent.click(_react1.screen.getByTestId('connect-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Connected');
        });
        // Then disconnect
        _react1.fireEvent.click(_react1.screen.getByTestId('disconnect-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');
        });
    });
    it('handles network switching', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        window.ethereum.request.mockImplementation((params)=>{
            if (params.method === 'wallet_switchEthereumChain') {
                return Promise.resolve();
            }
            return Promise.resolve();
        });
        _react1.fireEvent.click(_react1.screen.getByTestId('switch-network-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(window.ethereum.request).toHaveBeenCalledWith({
                method: 'wallet_switchEthereumChain',
                params: [
                    {
                        chainId: '0x38'
                    }
                ]
            });
        });
    });
    it('handles connection errors gracefully', async ()=>{
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
        window.ethereum.request.mockRejectedValue(new Error('User rejected'));
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        _react1.fireEvent.click(_react1.screen.getByTestId('connect-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(consoleSpy).toHaveBeenCalled();
        });
        expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Disconnected');
        consoleSpy.mockRestore();
    });
    it('updates balance when connected', async ()=>{
        const mockAccounts = [
            '0x1234567890123456789012345678901234567890'
        ];
        window.ethereum.request.mockImplementation((params)=>{
            if (params.method === 'eth_requestAccounts') {
                return Promise.resolve(mockAccounts);
            }
            if (params.method === 'eth_getBalance') {
                return Promise.resolve('0x1bc16d674ec80000'); // 2 ETH in wei
            }
            return Promise.resolve();
        });
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        _react1.fireEvent.click(_react1.screen.getByTestId('connect-btn'));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId('balance')).toHaveTextContent('BNB: 1.0');
        });
    });
    it('handles account changes', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Simulate account change
        const accountChangeHandler = window.ethereum.on.mock.calls.find((call)=>call[0] === 'accountsChanged')?.[1];
        if (accountChangeHandler) {
            accountChangeHandler([
                '0x9876543210987654321098765432109876543210'
            ]);
        }
        // Should trigger wallet state update
        expect(window.ethereum.on).toHaveBeenCalledWith('accountsChanged', expect.any(Function));
    });
    it('handles chain changes', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // Simulate chain change
        const chainChangeHandler = window.ethereum.on.mock.calls.find((call)=>call[0] === 'chainChanged')?.[1];
        if (chainChangeHandler) {
            chainChangeHandler('0x1'); // Ethereum mainnet
        }
        expect(window.ethereum.on).toHaveBeenCalledWith('chainChanged', expect.any(Function));
    });
});

//# sourceMappingURL=data:application/json;base64,