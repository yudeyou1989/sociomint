{"version":3,"names":["formatRewardAmount","cov_2ih9zencbd","f","s","getRewardLevel","getRewardSuggestion","useDailyReward","SM_TOKEN_EXCHANGE_ABI","name","type","inputs","outputs","stateMutability","refreshKey","b","address","isConnected","_wagmi","useAccount","supabase","_authhelpersreact","useSupabaseClient","isLoadingData","setIsLoadingData","_react","useState","error","setError","refetchKey","setRefetchKey","dailyStats","setDailyStats","leaderboard","setLeaderboard","smTokenExchangeAddress","process","env","NEXT_PUBLIC_SM_TOKEN_EXCHANGE_ADDRESS","contractReads","useContractReads","contracts","abi","functionName","args","watch","cacheTime","staleTime","enabled","onError","console","message","parseContractData","useCallback","data","userRewardResult","configResult","userRewardInfo","status","smBalance","result","dailyFlowers","Number","canClaim","nextClaimTime","totalClaimed","fetchDatabaseData","todayStats","statsError","from","select","eq","Date","toISOString","split","single","code","leaderboardData","leaderboardError","order","ascending","limit","totalClaimers","total_claimers","totalFlowersDistributed","parseFloat","total_flowers_distributed","averageFlowersPerUser","average_flowers_per_user","map","item","rank","wallet","user_wallet","username","sm_balance","flowersAmount","flowers_claimed","checkCanClaimFromDatabase","rpc","p_user_wallet","p_claim_date","getUserStreak","streak","useEffect","loadData","isLoading","Promise","all","refetch","prev","contractData","amount","toFixed","levels","threshold","title","currentLevel","currentTitle","nextThreshold","i","length","progress","level","nextLevelThreshold","Math","min","neededSm"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useDailyReward.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useAccount, useContractReads } from 'wagmi';\nimport { useSupabaseClient } from '@supabase/auth-helpers-react';\nimport type { Database } from '@/types/supabase';\n\ntype SupabaseClient = ReturnType<typeof useSupabaseClient<Database>>;\n\ninterface UserRewardInfo {\n  smBalance: bigint;\n  dailyFlowers: number;\n  canClaim: boolean;\n  nextClaimTime: number;\n  totalClaimed: number;\n}\n\ninterface DailyRewardStats {\n  totalClaimers: number;\n  totalFlowersDistributed: number;\n  averageFlowersPerUser: number;\n  userRank?: number;\n}\n\ninterface DailyRewardData {\n  userRewardInfo: UserRewardInfo | null;\n  dailyStats: DailyRewardStats | null;\n  leaderboard: Array<{\n    rank: number;\n    wallet: string;\n    username?: string;\n    smBalance: number;\n    flowersAmount: number;\n  }>;\n  isLoadingData: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\n// 合约 ABI\nconst SM_TOKEN_EXCHANGE_ABI = [\n  {\n    name: 'getUserDailyRewardInfo',\n    type: 'function',\n    inputs: [{ name: 'user', type: 'address' }],\n    outputs: [\n      { name: 'smBalance', type: 'uint256' },\n      { name: 'dailyFlowers', type: 'uint256' },\n      { name: 'canClaim', type: 'bool' },\n      { name: 'nextClaimTime', type: 'uint256' },\n      { name: 'totalClaimed', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    name: 'getDailyRewardConfig',\n    type: 'function',\n    inputs: [],\n    outputs: [\n      { name: 'flowersPer500Sm', type: 'uint256' },\n      { name: 'maxDailyFlowersPerUser', type: 'uint256' },\n      { name: 'dailyClaimInterval', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  }\n] as const;\n\nexport function useDailyReward(refreshKey: number = 0): DailyRewardData {\n  const { address, isConnected } = useAccount();\n  const supabase = useSupabaseClient<Database>();\n  \n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refetchKey, setRefetchKey] = useState(0);\n  const [dailyStats, setDailyStats] = useState<DailyRewardStats | null>(null);\n  const [leaderboard, setLeaderboard] = useState<Array<any>>([]);\n  \n  const smTokenExchangeAddress = process.env.NEXT_PUBLIC_SM_TOKEN_EXCHANGE_ADDRESS as `0x${string}`;\n  \n  // 合约读取配置\n  const contractReads = useContractReads({\n    contracts: [\n      // 获取用户每日奖励信息\n      ...(isConnected && address ? [{\n        address: smTokenExchangeAddress,\n        abi: SM_TOKEN_EXCHANGE_ABI,\n        functionName: 'getUserDailyRewardInfo',\n        args: [address]\n      }] : []),\n      // 获取每日奖励配置\n      {\n        address: smTokenExchangeAddress,\n        abi: SM_TOKEN_EXCHANGE_ABI,\n        functionName: 'getDailyRewardConfig'\n      }\n    ],\n    watch: true,\n    cacheTime: 10000, // 10秒缓存\n    staleTime: 5000, // 5秒后标记为过期\n    enabled: !!smTokenExchangeAddress,\n    onError: (error) => {\n      console.error('Contract read error:', error);\n      setError(error.message);\n    }\n  });\n  \n  // 解析合约数据\n  const parseContractData = useCallback(() => {\n    if (!contractReads.data) return null;\n    \n    try {\n      const [userRewardResult, configResult] = contractReads.data;\n      \n      // 解析用户奖励信息\n      const userRewardInfo: UserRewardInfo | null = userRewardResult?.status === 'success' ? {\n        smBalance: userRewardResult.result[0],\n        dailyFlowers: Number(userRewardResult.result[1]),\n        canClaim: userRewardResult.result[2],\n        nextClaimTime: Number(userRewardResult.result[3]),\n        totalClaimed: Number(userRewardResult.result[4])\n      } : null;\n      \n      return {\n        userRewardInfo\n      };\n    } catch (error) {\n      console.error('Parse contract data error:', error);\n      setError('Failed to parse contract data');\n      return null;\n    }\n  }, [contractReads.data]);\n  \n  // 从数据库获取统计数据\n  const fetchDatabaseData = useCallback(async () => {\n    try {\n      // 获取今日统计数据\n      const { data: todayStats, error: statsError } = await supabase\n        .from('daily_reward_overview')\n        .select('*')\n        .eq('claim_date', new Date().toISOString().split('T')[0])\n        .single();\n      \n      if (statsError && statsError.code !== 'PGRST116') {\n        console.error('Database stats query error:', statsError);\n      }\n      \n      // 获取排行榜数据\n      const { data: leaderboardData, error: leaderboardError } = await supabase\n        .from('current_daily_leaderboard')\n        .select('*')\n        .order('rank', { ascending: true })\n        .limit(20);\n      \n      if (leaderboardError) {\n        console.error('Database leaderboard query error:', leaderboardError);\n      }\n      \n      // 设置统计数据\n      if (todayStats) {\n        setDailyStats({\n          totalClaimers: todayStats.total_claimers || 0,\n          totalFlowersDistributed: parseFloat(todayStats.total_flowers_distributed || '0'),\n          averageFlowersPerUser: parseFloat(todayStats.average_flowers_per_user || '0')\n        });\n      }\n      \n      // 设置排行榜数据\n      if (leaderboardData) {\n        setLeaderboard(leaderboardData.map(item => ({\n          rank: item.rank,\n          wallet: item.user_wallet,\n          username: item.username,\n          smBalance: parseFloat(item.sm_balance || '0'),\n          flowersAmount: parseFloat(item.flowers_claimed || '0')\n        })));\n      }\n      \n      return {\n        todayStats,\n        leaderboardData\n      };\n    } catch (error) {\n      console.error('Database fetch error:', error);\n      return null;\n    }\n  }, [supabase]);\n  \n  // 检查用户是否可以领取奖励（数据库验证）\n  const checkCanClaimFromDatabase = useCallback(async () => {\n    if (!address) return true;\n    \n    try {\n      const { data: canClaim } = await supabase.rpc('can_claim_daily_reward', {\n        p_user_wallet: address,\n        p_claim_date: new Date().toISOString().split('T')[0]\n      });\n      \n      return canClaim;\n    } catch (error) {\n      console.error('Database claim check error:', error);\n      return true; // 默认允许领取，由合约进行最终验证\n    }\n  }, [address, supabase]);\n  \n  // 获取用户连续领取天数\n  const getUserStreak = useCallback(async () => {\n    if (!address) return 0;\n    \n    try {\n      const { data: streak } = await supabase.rpc('get_user_streak', {\n        p_user_wallet: address\n      });\n      \n      return streak || 0;\n    } catch (error) {\n      console.error('Database streak query error:', error);\n      return 0;\n    }\n  }, [address, supabase]);\n  \n  // 主要数据获取效果\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoadingData(true);\n      setError(null);\n      \n      try {\n        // 等待合约数据\n        if (contractReads.isLoading) {\n          return;\n        }\n        \n        // 获取数据库数据\n        await Promise.all([\n          fetchDatabaseData(),\n          checkCanClaimFromDatabase(),\n          getUserStreak()\n        ]);\n        \n      } catch (error: any) {\n        console.error('Load data error:', error);\n        setError(error.message || 'Failed to load data');\n      } finally {\n        setIsLoadingData(false);\n      }\n    };\n    \n    loadData();\n  }, [contractReads.isLoading, fetchDatabaseData, checkCanClaimFromDatabase, getUserStreak, refreshKey, refetchKey]);\n  \n  // 手动刷新函数\n  const refetch = useCallback(() => {\n    setRefetchKey(prev => prev + 1);\n    contractReads.refetch();\n  }, [contractReads]);\n  \n  // 解析最终数据\n  const contractData = parseContractData();\n  \n  return {\n    userRewardInfo: contractData?.userRewardInfo || null,\n    dailyStats,\n    leaderboard,\n    isLoadingData: isLoadingData || contractReads.isLoading,\n    error: error || (contractReads.error?.message),\n    refetch\n  };\n}\n\n// 辅助函数：格式化奖励数量\nexport function formatRewardAmount(amount: number): string {\n  if (amount >= 1000000) {\n    return (amount / 1000000).toFixed(1) + 'M';\n  }\n  if (amount >= 1000) {\n    return (amount / 1000).toFixed(1) + 'K';\n  }\n  return amount.toFixed(0);\n}\n\n// 辅助函数：计算奖励等级\nexport function getRewardLevel(totalClaimed: number): {\n  level: number;\n  title: string;\n  nextLevelThreshold: number;\n  progress: number;\n} {\n  const levels = [\n    { threshold: 0, title: '新手' },\n    { threshold: 100, title: '初级' },\n    { threshold: 500, title: '中级' },\n    { threshold: 1000, title: '高级' },\n    { threshold: 2000, title: '专家' },\n    { threshold: 5000, title: '大师' },\n    { threshold: 10000, title: '传奇' }\n  ];\n  \n  let currentLevel = 0;\n  let currentTitle = levels[0].title;\n  let nextThreshold = levels[1].threshold;\n  \n  for (let i = 0; i < levels.length; i++) {\n    if (totalClaimed >= levels[i].threshold) {\n      currentLevel = i;\n      currentTitle = levels[i].title;\n      nextThreshold = i < levels.length - 1 ? levels[i + 1].threshold : levels[i].threshold;\n    } else {\n      break;\n    }\n  }\n  \n  const progress = currentLevel === levels.length - 1 ? 100 : \n    ((totalClaimed - levels[currentLevel].threshold) / (nextThreshold - levels[currentLevel].threshold)) * 100;\n  \n  return {\n    level: currentLevel,\n    title: currentTitle,\n    nextLevelThreshold: nextThreshold,\n    progress: Math.min(progress, 100)\n  };\n}\n\n// 辅助函数：获取奖励建议\nexport function getRewardSuggestion(smBalance: number, dailyFlowers: number): string {\n  if (smBalance === 0) {\n    return '购买 SM 代币开始获得每日奖励！';\n  }\n  \n  if (smBalance < 500) {\n    return `再购买 ${500 - smBalance} SM 即可获得每日奖励！`;\n  }\n  \n  if (dailyFlowers < 200) {\n    const neededSm = (200 - dailyFlowers) * 50; // 每10朵小红花需要500 SM\n    return `持有 ${neededSm} 更多 SM 可获得最大每日奖励！`;\n  }\n  \n  return '您已达到最大每日奖励！';\n}\n"],"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","ignoreList":[]}