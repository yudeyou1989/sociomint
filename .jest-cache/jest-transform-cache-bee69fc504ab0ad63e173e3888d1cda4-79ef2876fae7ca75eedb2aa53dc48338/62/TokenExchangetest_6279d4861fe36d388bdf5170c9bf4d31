07834f9c1f1c39e22fc61eccbc4c1bf7
"use strict";
jest.mock('ethers', ()=>({
        BrowserProvider: jest.fn().mockImplementation(()=>mockProvider),
        Contract: jest.fn().mockImplementation(()=>mockContract),
        formatEther: jest.fn().mockImplementation((value)=>{
            return (Number(value) / 1e18).toString();
        }),
        formatUnits: jest.fn().mockImplementation((value, decimals)=>{
            return (Number(value) / Math.pow(10, decimals)).toString();
        }),
        parseEther: jest.fn().mockImplementation((value)=>{
            return BigInt(Math.floor(parseFloat(value) * 1e18));
        })
    }));
jest.mock('../../contexts/WalletContext', ()=>({
        useWallet: ()=>mockWalletContext,
        WalletProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock TokenExchange component
const MockTokenExchange = ()=>{
    const [bnbAmount, setBnbAmount] = _react.default.useState('');
    const [loading, setLoading] = _react.default.useState(false);
    const handleExchange = async ()=>{
        setLoading(true);
        // Simulate exchange
        setTimeout(()=>setLoading(false), 1000);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "token-exchange",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Token Exchange"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "exchange-stats",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Current Price: 0.000833 BNB"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Tokens Sold: 1,000"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Tokens Remaining: 9,000"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "exchange-form",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "bnb-input",
                        type: "number",
                        placeholder: "Enter BNB amount",
                        value: bnbAmount,
                        onChange: (e)=>setBnbAmount(e.target.value)
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "exchange-button",
                        onClick: handleExchange,
                        disabled: loading || !bnbAmount,
                        children: loading ? 'Exchanging...' : 'Exchange Tokens'
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "user-balance",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "BNB Balance: 5.0"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "SM Balance: 100"
                    })
                ]
            })
        ]
    });
};
// Mock WalletProvider
const MockWalletProvider = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "wallet-provider",
        children: children
    });
};
// 模拟 ethers
const mockContract = {
    getExchangeStats: jest.fn().mockResolvedValue({
        totalTokensSold: BigInt('1000000000000000000000'),
        totalTokensRemaining: BigInt('9000000000000000000000'),
        totalBnbRaised: BigInt('100000000000000000000'),
        currentPrice: BigInt('833000000000'),
        nextRoundPrice: BigInt('974900000000'),
        isActive: true,
        currentRound: 0
    }),
    exchangeTokens: jest.fn().mockResolvedValue({
        hash: '0x123456789abcdef',
        wait: jest.fn().mockResolvedValue({
            status: 1
        })
    }),
    minPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000')),
    maxPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000000'))
};
const mockProvider = {
    getSigner: jest.fn().mockResolvedValue({
        getAddress: jest.fn().mockResolvedValue('0x123456789abcdef')
    }),
    getBalance: jest.fn().mockResolvedValue(BigInt('5000000000000000000'))
};
// 模拟 WalletContext
const mockWalletContext = {
    wallet: {
        isConnected: true,
        address: '0x123456789abcdef123456789abcdef123456789a',
        chainId: 97,
        balance: {
            bnb: '5.0',
            sm: '100.0'
        }
    },
    connectWallet: jest.fn(),
    disconnectWallet: jest.fn(),
    isConnecting: false
};
const TestWrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWalletProvider, {
        children: children
    });
describe('TokenExchange Component', ()=>{
    const user = _userevent.default.setup();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('renders exchange interface correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Token Exchange')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('exchange-form')).toBeInTheDocument();
        });
    });
    it('displays exchange statistics', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/已售出代币/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/剩余代币/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
    });
    it('handles BNB input correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        expect(bnbInput).toHaveValue('1.0');
    });
    it('calculates token amount correctly', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/您将获得/)).toBeInTheDocument();
        });
    });
    it('validates minimum purchase amount', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '0.005'); // 低于最小金额
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/购买金额不能低于最小限制/)).toBeInTheDocument();
        });
    });
    it('validates maximum purchase amount', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '15.0'); // 高于最大金额
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/购买金额不能超过最大限制/)).toBeInTheDocument();
        });
    });
    it('validates sufficient balance', async ()=>{
        // 模拟余额不足
        mockProvider.getBalance.mockResolvedValue(BigInt('100000000000000000')); // 0.1 BNB
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/余额不足/)).toBeInTheDocument();
        });
    });
    it('executes token purchase successfully', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.exchangeTokens).toHaveBeenCalledWith({
                value: expect.any(BigInt)
            });
        });
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/交易成功/)).toBeInTheDocument();
        });
    });
    it('handles transaction failure', async ()=>{
        mockContract.exchangeTokens.mockRejectedValue(new Error('Transaction failed'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/交易失败/)).toBeInTheDocument();
        });
    });
    it('displays loading state during transaction', async ()=>{
        // 模拟慢交易
        const slowWait = jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        status: 1
                    }), 1000)));
        mockContract.exchangeTokens.mockResolvedValue({
            hash: '0x123456789abcdef',
            wait: slowWait
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/交易进行中/)).toBeInTheDocument();
        });
    });
    it('updates exchange stats after successful purchase', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
        const bnbInput = _react1.screen.getByPlaceholderText('输入 BNB 数量');
        await user.clear(bnbInput);
        await user.type(bnbInput, '1.0');
        const purchaseButton = _react1.screen.getByText('购买代币');
        await user.click(purchaseButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/交易成功/)).toBeInTheDocument();
        });
        // 应该重新获取统计信息
        await (0, _react1.waitFor)(()=>{
            expect(mockContract.getExchangeStats).toHaveBeenCalledTimes(2);
        });
    });
    it('handles exchange inactive state', async ()=>{
        mockContract.getExchangeStats.mockResolvedValue({
            totalTokensSold: BigInt('1000000000000000000000'),
            totalTokensRemaining: BigInt('9000000000000000000000'),
            totalBnbRaised: BigInt('100000000000000000000'),
            currentPrice: BigInt('833000000000'),
            nextRoundPrice: BigInt('974900000000'),
            isActive: false,
            currentRound: 0
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/代币兑换暂未开放/)).toBeInTheDocument();
        });
        const purchaseButton = _react1.screen.getByText('购买代币');
        expect(purchaseButton).toBeDisabled();
    });
    it('displays correct price formatting', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/0\.000000000833/)).toBeInTheDocument();
        });
    });
    it('handles wallet not connected state', async ()=>{
        // 模拟钱包未连接
        const disconnectedWalletContext = {
            ...mockWalletContext,
            wallet: {
                ...mockWalletContext.wallet,
                isConnected: false,
                address: ''
            }
        };
        require('../../contexts/WalletContext').useWallet.mockReturnValue(disconnectedWalletContext);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        expect(_react1.screen.getByText('请先连接钱包')).toBeInTheDocument();
        const purchaseButton = _react1.screen.getByText('购买代币');
        expect(purchaseButton).toBeDisabled();
    });
    it('handles network error gracefully', async ()=>{
        mockContract.getExchangeStats.mockRejectedValue(new Error('Network error'));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/加载失败/)).toBeInTheDocument();
        });
        const retryButton = _react1.screen.getByText('重试');
        expect(retryButton).toBeInTheDocument();
    });
    it('retries loading on network error', async ()=>{
        mockContract.getExchangeStats.mockRejectedValueOnce(new Error('Network error')).mockResolvedValue({
            totalTokensSold: BigInt('1000000000000000000000'),
            totalTokensRemaining: BigInt('9000000000000000000000'),
            totalBnbRaised: BigInt('100000000000000000000'),
            currentPrice: BigInt('833000000000'),
            nextRoundPrice: BigInt('974900000000'),
            isActive: true,
            currentRound: 0
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTokenExchange, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/加载失败/)).toBeInTheDocument();
        });
        const retryButton = _react1.screen.getByText('重试');
        await user.click(retryButton);
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/当前价格/)).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,