{"version":3,"names":["cov_1orgfv57c8","actualCoverage","s","MultisigTransactionStatus","f","MultisigTransactionType","confirmTransaction","default","_default","executeTransaction","getAllTransactions","getMultisigInfo","getTransaction","revokeConfirmation","submitTransaction","logger","_logger","createContextLogger","component","MULTISIG_ABI","MULTISIG_ADDRESS","process","env","NEXT_PUBLIC_MULTISIG_WALLET_ADDRESS","supabaseUrl","NEXT_PUBLIC_SUPABASE_URL","supabaseAnonKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","supabase","_supabasejs","createClient","b","getMultisigContract","provider","_ethers","ethers","Contract","contract","owners","getOwners","requiredConfirmations","required","transactionCount","balance","getBalance","address","toNumber","formatEther","error","action","additionalData","transactionId","destination","value","data","executed","transactions","confirmations","getConfirmationCount","status","txData","from","select","eq","single","type","description","createdAt","Math","floor","Date","now","created_at","getTime","startsWith","includes","gt","id","i","transaction","push","sort","a","signer","valueInWei","parseEther","tx","receipt","wait","submissionEvent","events","find","e","event","args","Error","insert","transaction_id","toISOString","info","executionEvent","executionFailureEvent","success","update","MultisigService"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/services/multisigService.ts"],"sourcesContent":["'use client';\n\n/**\n * 多签钱包服务\n * \n * 该服务提供与多签钱包交互的功能，包括查询多签钱包信息、提交交易和查询交易状态等。\n */\n\nimport { ethers, formatEther, parseEther } from 'ethers';\nimport Logger from './logger';\nimport { createClient } from '@supabase/supabase-js';\n\n// 创建日志记录器\nconst logger = Logger.createContextLogger({ component: 'MultisigService' });\n\n// 多签钱包ABI - 简化版，仅包含我们需要的函数\nconst MULTISIG_ABI = [\n  // 查询所有者\n  'function getOwners() view returns (address[])',\n  // 查询确认数\n  'function getConfirmationCount(uint256 transactionId) view returns (uint256)',\n  // 查询所需确认数\n  'function required() view returns (uint256)',\n  // 查询交易数量\n  'function transactionCount() view returns (uint256)',\n  // 查询交易\n  'function transactions(uint256 transactionId) view returns (address destination, uint256 value, bytes data, bool executed)',\n  // 查询确认状态\n  'function isConfirmed(uint256 transactionId) view returns (bool)',\n  // 提交交易\n  'function submitTransaction(address destination, uint256 value, bytes data) returns (uint256 transactionId)',\n  // 确认交易\n  'function confirmTransaction(uint256 transactionId)',\n  // 撤销确认\n  'function revokeConfirmation(uint256 transactionId)',\n  // 执行交易\n  'function executeTransaction(uint256 transactionId)',\n  // 事件\n  'event Submission(uint256 indexed transactionId)',\n  'event Confirmation(address indexed sender, uint256 indexed transactionId)',\n  'event Execution(uint256 indexed transactionId)',\n  'event ExecutionFailure(uint256 indexed transactionId)',\n];\n\n// 多签钱包地址\nconst MULTISIG_ADDRESS = process.env.NEXT_PUBLIC_MULTISIG_WALLET_ADDRESS as string;\n\n// Supabase客户端\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl || '', supabaseAnonKey || '');\n\n// 交易类型\nexport enum MultisigTransactionType {\n  TRANSFER_FUNDS = 'transfer_funds',\n  UPGRADE_CONTRACT = 'upgrade_contract',\n  CHANGE_PARAMETER = 'change_parameter',\n  ADD_OWNER = 'add_owner',\n  REMOVE_OWNER = 'remove_owner',\n  CHANGE_REQUIREMENT = 'change_requirement',\n  OTHER = 'other',\n}\n\n// 交易状态\nexport enum MultisigTransactionStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  EXECUTED = 'executed',\n  FAILED = 'failed',\n}\n\n// 交易信息接口\nexport interface MultisigTransaction {\n  id: number;\n  destination: string;\n  value: string;\n  data: string;\n  executed: boolean;\n  confirmations: number;\n  requiredConfirmations: number;\n  type: MultisigTransactionType;\n  status: MultisigTransactionStatus;\n  description?: string;\n  createdAt: number;\n}\n\n/**\n * 获取多签钱包合约实例\n */\nconst getMultisigContract = (provider: any) => {\n  return new ethers.Contract(MULTISIG_ADDRESS, MULTISIG_ABI, provider);\n};\n\n/**\n * 获取多签钱包信息\n */\nexport const getMultisigInfo = async (provider: any) => {\n  try {\n    const contract = getMultisigContract(provider);\n    \n    // 获取所有者\n    const owners = await contract.getOwners();\n    \n    // 获取所需确认数\n    const requiredConfirmations = await contract.required();\n    \n    // 获取交易数量\n    const transactionCount = await contract.transactionCount();\n    \n    // 获取钱包余额\n    const balance = await provider.getBalance(MULTISIG_ADDRESS);\n    \n    return {\n      address: MULTISIG_ADDRESS,\n      owners,\n      requiredConfirmations: requiredConfirmations.toNumber(),\n      transactionCount: transactionCount.toNumber(),\n      balance: formatEther(balance),\n    };\n  } catch (error) {\n    logger.error('获取多签钱包信息失败', {\n      action: 'getMultisigInfo',\n      additionalData: { error },\n    });\n    throw error;\n  }\n};\n\n/**\n * 获取交易信息\n */\nexport const getTransaction = async (\n  provider: any,\n  transactionId: number\n): Promise<MultisigTransaction> => {\n  try {\n    const contract = getMultisigContract(provider);\n    \n    // 获取交易信息\n    const [destination, value, data, executed] = await contract.transactions(transactionId);\n    \n    // 获取确认数\n    const confirmations = await contract.getConfirmationCount(transactionId);\n    \n    // 获取所需确认数\n    const requiredConfirmations = await contract.required();\n    \n    // 确定交易状态\n    let status: MultisigTransactionStatus;\n    if (executed) {\n      status = MultisigTransactionStatus.EXECUTED;\n    } else if (confirmations.toNumber() >= requiredConfirmations.toNumber()) {\n      status = MultisigTransactionStatus.CONFIRMED;\n    } else {\n      status = MultisigTransactionStatus.PENDING;\n    }\n    \n    // 从数据库获取交易描述和类型\n    const { data: txData, error } = await supabase\n      .from('multisig_transactions')\n      .select('description, type, created_at')\n      .eq('transaction_id', transactionId)\n      .single();\n    \n    // 确定交易类型\n    let type = MultisigTransactionType.OTHER;\n    let description = '';\n    let createdAt = Math.floor(Date.now() / 1000);\n    \n    if (txData) {\n      type = txData.type || MultisigTransactionType.OTHER;\n      description = txData.description || '';\n      createdAt = new Date(txData.created_at).getTime() / 1000;\n    } else {\n      // 尝试从交易数据推断类型\n      if (destination === MULTISIG_ADDRESS && data.startsWith('0x')) {\n        // 可能是更改所有者或要求的交易\n        if (data.includes('addOwner')) {\n          type = MultisigTransactionType.ADD_OWNER;\n        } else if (data.includes('removeOwner')) {\n          type = MultisigTransactionType.REMOVE_OWNER;\n        } else if (data.includes('changeRequirement')) {\n          type = MultisigTransactionType.CHANGE_REQUIREMENT;\n        }\n      } else if (value.gt(0) && data === '0x') {\n        // 简单的资金转移\n        type = MultisigTransactionType.TRANSFER_FUNDS;\n      }\n    }\n    \n    return {\n      id: transactionId,\n      destination,\n      value: formatEther(value),\n      data,\n      executed,\n      confirmations: confirmations.toNumber(),\n      requiredConfirmations: requiredConfirmations.toNumber(),\n      type,\n      status,\n      description,\n      createdAt,\n    };\n  } catch (error) {\n    logger.error('获取交易信息失败', {\n      action: 'getTransaction',\n      additionalData: { error, transactionId },\n    });\n    throw error;\n  }\n};\n\n/**\n * 获取所有交易\n */\nexport const getAllTransactions = async (\n  provider: any\n): Promise<MultisigTransaction[]> => {\n  try {\n    const contract = getMultisigContract(provider);\n    \n    // 获取交易数量\n    const transactionCount = await contract.transactionCount();\n    \n    // 获取所有交易\n    const transactions: MultisigTransaction[] = [];\n    for (let i = 0; i < transactionCount.toNumber(); i++) {\n      const transaction = await getTransaction(provider, i);\n      transactions.push(transaction);\n    }\n    \n    // 按ID降序排序（最新的交易在前面）\n    return transactions.sort((a, b) => b.id - a.id);\n  } catch (error) {\n    logger.error('获取所有交易失败', {\n      action: 'getAllTransactions',\n      additionalData: { error },\n    });\n    throw error;\n  }\n};\n\n/**\n * 提交交易\n */\nexport const submitTransaction = async (\n  signer: any,\n  destination: string,\n  value: string,\n  data: string,\n  type: MultisigTransactionType,\n  description: string\n): Promise<number> => {\n  try {\n    const contract = getMultisigContract(signer);\n    \n    // 转换值为Wei\n    const valueInWei = parseEther(value);\n    \n    // 提交交易\n    const tx = await contract.submitTransaction(destination, valueInWei, data);\n    const receipt = await tx.wait();\n    \n    // 从事件中获取交易ID\n    const submissionEvent = receipt.events?.find(e => e.event === 'Submission');\n    const transactionId = submissionEvent?.args?.transactionId.toNumber();\n    \n    if (!transactionId && transactionId !== 0) {\n      throw new Error('无法获取交易ID');\n    }\n    \n    // 将交易信息保存到数据库\n    await supabase.from('multisig_transactions').insert({\n      transaction_id: transactionId,\n      destination,\n      value,\n      data,\n      type,\n      description,\n      status: MultisigTransactionStatus.PENDING,\n      created_at: new Date().toISOString(),\n    });\n    \n    logger.info('交易已提交', {\n      action: 'submitTransaction',\n      additionalData: { transactionId, destination, value, type },\n    });\n    \n    return transactionId;\n  } catch (error) {\n    logger.error('提交交易失败', {\n      action: 'submitTransaction',\n      additionalData: { error, destination, value, data },\n    });\n    throw error;\n  }\n};\n\n/**\n * 确认交易\n */\nexport const confirmTransaction = async (\n  signer: any,\n  transactionId: number\n): Promise<boolean> => {\n  try {\n    const contract = getMultisigContract(signer);\n    \n    // 确认交易\n    const tx = await contract.confirmTransaction(transactionId);\n    await tx.wait();\n    \n    logger.info('交易已确认', {\n      action: 'confirmTransaction',\n      additionalData: { transactionId },\n    });\n    \n    return true;\n  } catch (error) {\n    logger.error('确认交易失败', {\n      action: 'confirmTransaction',\n      additionalData: { error, transactionId },\n    });\n    throw error;\n  }\n};\n\n/**\n * 撤销确认\n */\nexport const revokeConfirmation = async (\n  signer: any,\n  transactionId: number\n): Promise<boolean> => {\n  try {\n    const contract = getMultisigContract(signer);\n    \n    // 撤销确认\n    const tx = await contract.revokeConfirmation(transactionId);\n    await tx.wait();\n    \n    logger.info('确认已撤销', {\n      action: 'revokeConfirmation',\n      additionalData: { transactionId },\n    });\n    \n    return true;\n  } catch (error) {\n    logger.error('撤销确认失败', {\n      action: 'revokeConfirmation',\n      additionalData: { error, transactionId },\n    });\n    throw error;\n  }\n};\n\n/**\n * 执行交易\n */\nexport const executeTransaction = async (\n  signer: any,\n  transactionId: number\n): Promise<boolean> => {\n  try {\n    const contract = getMultisigContract(signer);\n    \n    // 执行交易\n    const tx = await contract.executeTransaction(transactionId);\n    const receipt = await tx.wait();\n    \n    // 检查是否执行成功\n    const executionEvent = receipt.events?.find(e => e.event === 'Execution');\n    const executionFailureEvent = receipt.events?.find(e => e.event === 'ExecutionFailure');\n    \n    const success = !!executionEvent && !executionFailureEvent;\n    \n    // 更新数据库中的交易状态\n    await supabase.from('multisig_transactions').update({\n      status: success ? MultisigTransactionStatus.EXECUTED : MultisigTransactionStatus.FAILED,\n    }).eq('transaction_id', transactionId);\n    \n    logger.info(success ? '交易已执行' : '交易执行失败', {\n      action: 'executeTransaction',\n      additionalData: { transactionId, success },\n    });\n    \n    return success;\n  } catch (error) {\n    logger.error('执行交易失败', {\n      action: 'executeTransaction',\n      additionalData: { error, transactionId },\n    });\n    throw error;\n  }\n};\n\n/**\n * 多签钱包服务\n */\nconst MultisigService = {\n  getMultisigInfo,\n  getTransaction,\n  getAllTransactions,\n  submitTransaction,\n  confirmTransaction,\n  revokeConfirmation,\n  executeTransaction,\n};\n\nexport default MultisigService;\n"],"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","ignoreList":[]}