{"version":3,"names":["cov_ruxvubuoe","actualCoverage","s","getMonitoringService","f","initializeMonitoring","reportReactError","MonitoringService","constructor","config","queue","sessionId","generateSessionId","window","b","enableErrorReporting","setupErrorHandlers","enablePerformanceMonitoring","setupPerformanceMonitoring","enableUserTracking","setupUserTracking","flushTimer","setInterval","flush","addEventListener","event","reportError","message","stack","error","url","location","href","userAgent","navigator","timestamp","Date","now","userId","buildId","process","env","BUILD_ID","reason","setTimeout","navigation","performance","getEntriesByType","reportMetric","name","value","loadEventEnd","fetchStart","unit","tags","page","pathname","domContentLoadedEventEnd","observer","PerformanceObserver","list","getEntries","forEach","entry","entryType","duration","resource","type","initiatorType","observe","entryTypes","trackEvent","action","category","properties","referrer","document","target","tagName","toLowerCase","includes","label","textContent","getAttribute","element","className","id","Math","random","sampleRate","console","push","metric","setUserId","trackTransaction","transactionData","parseFloat","amount","hash","token","status","trackWalletConnection","walletType","success","length","data","response","fetch","apiEndpoint","method","headers","apiKey","body","JSON","stringify","events","environment","ok","warn","unshift","toString","substr","destroy","clearInterval","monitoringService","defaultConfig","NODE_ENV","errorInfo","monitoring","componentStack"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/lib/monitoring.ts"],"sourcesContent":["/**\n * 监控系统\n * 提供错误监控、性能监控、用户行为分析等功能\n */\n\n// 错误类型定义\ninterface ErrorInfo {\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  errorBoundary?: string;\n  url: string;\n  userAgent: string;\n  timestamp: number;\n  userId?: string;\n  sessionId: string;\n  buildId?: string;\n}\n\n// 性能指标\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: number;\n  tags?: Record<string, string>;\n}\n\n// 用户行为事件\ninterface UserEvent {\n  type: 'click' | 'view' | 'transaction' | 'error' | 'custom';\n  action: string;\n  category: string;\n  label?: string;\n  value?: number;\n  properties?: Record<string, any>;\n  timestamp: number;\n  userId?: string;\n  sessionId: string;\n}\n\n// 监控配置\ninterface MonitoringConfig {\n  apiEndpoint: string;\n  apiKey?: string;\n  enableErrorReporting: boolean;\n  enablePerformanceMonitoring: boolean;\n  enableUserTracking: boolean;\n  sampleRate: number;\n  environment: 'development' | 'staging' | 'production';\n}\n\nclass MonitoringService {\n  private config: MonitoringConfig;\n  private sessionId: string;\n  private userId?: string;\n  private queue: Array<ErrorInfo | PerformanceMetric | UserEvent> = [];\n  private flushTimer?: NodeJS.Timeout;\n\n  constructor(config: MonitoringConfig) {\n    this.config = config;\n    this.sessionId = this.generateSessionId();\n    this.initializeMonitoring();\n  }\n\n  /**\n   * 初始化监控\n   */\n  private initializeMonitoring(): void {\n    if (typeof window === 'undefined') return;\n\n    // 全局错误处理\n    if (this.config.enableErrorReporting) {\n      this.setupErrorHandlers();\n    }\n\n    // 性能监控\n    if (this.config.enablePerformanceMonitoring) {\n      this.setupPerformanceMonitoring();\n    }\n\n    // 用户行为追踪\n    if (this.config.enableUserTracking) {\n      this.setupUserTracking();\n    }\n\n    // 定期刷新队列\n    this.flushTimer = setInterval(() => {\n      this.flush();\n    }, 10000); // 每10秒发送一次\n  }\n\n  /**\n   * 设置错误处理器\n   */\n  private setupErrorHandlers(): void {\n    // JavaScript错误\n    window.addEventListener('error', (event) => {\n      this.reportError({\n        message: event.message,\n        stack: event.error?.stack,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: Date.now(),\n        userId: this.userId,\n        sessionId: this.sessionId,\n        buildId: process.env.BUILD_ID,\n      });\n    });\n\n    // Promise拒绝\n    window.addEventListener('unhandledrejection', (event) => {\n      this.reportError({\n        message: `Unhandled Promise Rejection: ${event.reason}`,\n        stack: event.reason?.stack,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: Date.now(),\n        userId: this.userId,\n        sessionId: this.sessionId,\n        buildId: process.env.BUILD_ID,\n      });\n    });\n  }\n\n  /**\n   * 设置性能监控\n   */\n  private setupPerformanceMonitoring(): void {\n    // 页面加载性能\n    window.addEventListener('load', () => {\n      setTimeout(() => {\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n        \n        if (navigation) {\n          this.reportMetric({\n            name: 'page_load_time',\n            value: navigation.loadEventEnd - navigation.fetchStart,\n            unit: 'ms',\n            timestamp: Date.now(),\n            tags: { page: window.location.pathname }\n          });\n\n          this.reportMetric({\n            name: 'dom_content_loaded',\n            value: navigation.domContentLoadedEventEnd - navigation.fetchStart,\n            unit: 'ms',\n            timestamp: Date.now(),\n            tags: { page: window.location.pathname }\n          });\n        }\n      }, 0);\n    });\n\n    // 资源加载性能\n    const observer = new PerformanceObserver((list) => {\n      list.getEntries().forEach((entry) => {\n        if (entry.entryType === 'resource') {\n          this.reportMetric({\n            name: 'resource_load_time',\n            value: entry.duration,\n            unit: 'ms',\n            timestamp: Date.now(),\n            tags: { \n              resource: entry.name,\n              type: (entry as PerformanceResourceTiming).initiatorType \n            }\n          });\n        }\n      });\n    });\n\n    observer.observe({ entryTypes: ['resource'] });\n  }\n\n  /**\n   * 设置用户行为追踪\n   */\n  private setupUserTracking(): void {\n    // 页面浏览\n    this.trackEvent({\n      type: 'view',\n      action: 'page_view',\n      category: 'navigation',\n      properties: {\n        page: window.location.pathname,\n        referrer: document.referrer,\n      },\n      timestamp: Date.now(),\n      userId: this.userId,\n      sessionId: this.sessionId,\n    });\n\n    // 点击事件\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      const tagName = target.tagName.toLowerCase();\n      \n      if (['button', 'a', 'input'].includes(tagName)) {\n        this.trackEvent({\n          type: 'click',\n          action: 'element_click',\n          category: 'interaction',\n          label: target.textContent || target.getAttribute('aria-label') || tagName,\n          properties: {\n            element: tagName,\n            className: target.className,\n            id: target.id,\n          },\n          timestamp: Date.now(),\n          userId: this.userId,\n          sessionId: this.sessionId,\n        });\n      }\n    });\n  }\n\n  /**\n   * 报告错误\n   */\n  reportError(error: ErrorInfo): void {\n    if (!this.config.enableErrorReporting) return;\n    \n    // 采样率控制\n    if (Math.random() > this.config.sampleRate) return;\n\n    console.error('Monitoring Error:', error);\n    this.queue.push(error);\n    \n    // 立即发送严重错误\n    if (error.message.includes('ChunkLoadError') || error.message.includes('Network')) {\n      this.flush();\n    }\n  }\n\n  /**\n   * 报告性能指标\n   */\n  reportMetric(metric: PerformanceMetric): void {\n    if (!this.config.enablePerformanceMonitoring) return;\n    \n    this.queue.push(metric);\n  }\n\n  /**\n   * 追踪用户事件\n   */\n  trackEvent(event: UserEvent): void {\n    if (!this.config.enableUserTracking) return;\n    \n    this.queue.push(event);\n  }\n\n  /**\n   * 设置用户ID\n   */\n  setUserId(userId: string): void {\n    this.userId = userId;\n  }\n\n  /**\n   * 追踪交易事件\n   */\n  trackTransaction(transactionData: {\n    hash: string;\n    type: string;\n    amount: string;\n    token: string;\n    status: 'pending' | 'success' | 'failed';\n  }): void {\n    this.trackEvent({\n      type: 'transaction',\n      action: 'blockchain_transaction',\n      category: 'web3',\n      label: transactionData.type,\n      value: parseFloat(transactionData.amount),\n      properties: {\n        hash: transactionData.hash,\n        token: transactionData.token,\n        status: transactionData.status,\n      },\n      timestamp: Date.now(),\n      userId: this.userId,\n      sessionId: this.sessionId,\n    });\n  }\n\n  /**\n   * 追踪钱包连接\n   */\n  trackWalletConnection(walletType: string, success: boolean): void {\n    this.trackEvent({\n      type: 'custom',\n      action: 'wallet_connection',\n      category: 'web3',\n      label: walletType,\n      value: success ? 1 : 0,\n      properties: {\n        walletType,\n        success,\n      },\n      timestamp: Date.now(),\n      userId: this.userId,\n      sessionId: this.sessionId,\n    });\n  }\n\n  /**\n   * 刷新队列，发送数据\n   */\n  private async flush(): Promise<void> {\n    if (this.queue.length === 0) return;\n\n    const data = [...this.queue];\n    this.queue = [];\n\n    try {\n      const response = await fetch(this.config.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(this.config.apiKey && { 'Authorization': `Bearer ${this.config.apiKey}` }),\n        },\n        body: JSON.stringify({\n          events: data,\n          environment: this.config.environment,\n          timestamp: Date.now(),\n        }),\n      });\n\n      if (!response.ok) {\n        console.warn('Failed to send monitoring data:', response.status);\n        // 重新加入队列\n        this.queue.unshift(...data);\n      }\n    } catch (error) {\n      console.warn('Error sending monitoring data:', error);\n      // 重新加入队列\n      this.queue.unshift(...data);\n    }\n  }\n\n  /**\n   * 生成会话ID\n   */\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flush(); // 最后一次发送\n  }\n}\n\n// 全局监控实例\nlet monitoringService: MonitoringService | null = null;\n\n/**\n * 初始化监控服务\n */\nexport function initializeMonitoring(config: Partial<MonitoringConfig> = {}): MonitoringService {\n  const defaultConfig: MonitoringConfig = {\n    apiEndpoint: '/api/monitoring',\n    enableErrorReporting: true,\n    enablePerformanceMonitoring: true,\n    enableUserTracking: true,\n    sampleRate: 1.0,\n    environment: (process.env.NODE_ENV as any) || 'development',\n    ...config,\n  };\n\n  if (!monitoringService && typeof window !== 'undefined') {\n    monitoringService = new MonitoringService(defaultConfig);\n  }\n\n  return monitoringService!;\n}\n\n/**\n * 获取监控服务实例\n */\nexport function getMonitoringService(): MonitoringService | null {\n  return monitoringService;\n}\n\n/**\n * React错误边界监控\n */\nexport function reportReactError(error: Error, errorInfo: React.ErrorInfo): void {\n  const monitoring = getMonitoringService();\n  if (monitoring) {\n    monitoring.reportError({\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      timestamp: Date.now(),\n      sessionId: monitoring['sessionId'],\n      buildId: process.env.BUILD_ID,\n    });\n  }\n}\n\n// 导出类型\nexport type { ErrorInfo, PerformanceMetric, UserEvent, MonitoringConfig };\n"],"mappings":"AAAA;;;GAAA,CAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}