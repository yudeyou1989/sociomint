05d4adbe02d6393b10490fe9e30baa27
/**
 * 钱包连接功能测试
 * 测试钱包连接、断开连接、网络切换等核心功能
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// import WalletConnection from '@/components/wallet/WalletConnection';
// Mock钱包相关的hooks和工具
_globals.jest.mock('@/hooks/useWallet', ()=>({
        useWallet: _globals.jest.fn()
    }));
_globals.jest.mock('@/utils/walletUtils', ()=>({
        connectWallet: _globals.jest.fn(),
        disconnectWallet: _globals.jest.fn(),
        switchNetwork: _globals.jest.fn(),
        getWalletBalance: _globals.jest.fn()
    }));
// Mock window.ethereum
const mockEthereum = {
    request: _globals.jest.fn(),
    on: _globals.jest.fn(),
    removeListener: _globals.jest.fn(),
    isMetaMask: true,
    isConnected: _globals.jest.fn(),
    selectedAddress: null,
    chainId: '0x38' // BSC Mainnet
};
Object.defineProperty(window, 'ethereum', {
    value: mockEthereum,
    writable: true
});
// Mock组件
const MockWalletConnection = ()=>{
    const wallet = mockUseWallet();
    if (!window.ethereum) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "请安装MetaMask钱包"
        });
    }
    if (!wallet.isConnected) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: wallet.connect,
                children: "连接钱包"
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    wallet.address?.slice(0, 6),
                    "...",
                    wallet.address?.slice(-4)
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    wallet.balance?.bnb,
                    " BNB"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    wallet.balance?.sm,
                    " SM"
                ]
            }),
            wallet.chainId !== 56 && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>wallet.switchNetwork(56),
                children: "切换到BSC网络"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: wallet.disconnect,
                children: "断开连接"
            })
        ]
    });
};
describe('WalletConnection', ()=>{
    const mockUseWallet1 = require('@/hooks/useWallet').useWallet;
    const mockWalletUtils = require('@/utils/walletUtils');
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        // 默认的钱包状态
        mockUseWallet1.mockReturnValue({
            address: null,
            isConnected: false,
            chainId: null,
            balance: null,
            connect: _globals.jest.fn(),
            disconnect: _globals.jest.fn(),
            switchNetwork: _globals.jest.fn()
        });
    });
    describe('未连接状态', ()=>{
        it('应该显示连接钱包按钮', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWalletConnection, {}));
            expect(_react1.screen.getByText('连接钱包')).toBeInTheDocument();
            expect(_react1.screen.queryByText('断开连接')).not.toBeInTheDocument();
        });
        it('点击连接按钮应该触发连接流程', async ()=>{
            const mockConnect = _globals.jest.fn().mockResolvedValue(true);
            mockUseWallet1.mockReturnValue({
                address: null,
                isConnected: false,
                chainId: null,
                balance: null,
                connect: mockConnect,
                disconnect: _globals.jest.fn(),
                switchNetwork: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByText('连接钱包');
            _react1.fireEvent.click(connectButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockConnect).toHaveBeenCalledTimes(1);
            });
        });
        it('连接失败时应该显示错误信息', async ()=>{
            const mockConnect = _globals.jest.fn().mockRejectedValue(new Error('用户拒绝连接'));
            mockUseWallet1.mockReturnValue({
                address: null,
                isConnected: false,
                chainId: null,
                balance: null,
                connect: mockConnect,
                disconnect: _globals.jest.fn(),
                switchNetwork: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByText('连接钱包');
            _react1.fireEvent.click(connectButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/连接失败/)).toBeInTheDocument();
            });
        });
    });
    describe('已连接状态', ()=>{
        const mockWalletState = {
            address: '0x1234567890123456789012345678901234567890',
            isConnected: true,
            chainId: 56,
            balance: {
                bnb: '1.5',
                sm: '10000',
                flowers: '500'
            },
            connect: _globals.jest.fn(),
            disconnect: _globals.jest.fn(),
            switchNetwork: _globals.jest.fn()
        };
        beforeEach(()=>{
            mockUseWallet1.mockReturnValue(mockWalletState);
        });
        it('应该显示钱包地址和余额', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(_react1.screen.getByText(/0x1234...7890/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/1.5 BNB/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/10000 SM/)).toBeInTheDocument();
        });
        it('应该显示断开连接按钮', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(_react1.screen.getByText('断开连接')).toBeInTheDocument();
            expect(_react1.screen.queryByText('连接钱包')).not.toBeInTheDocument();
        });
        it('点击断开连接应该触发断开流程', async ()=>{
            const mockDisconnect = _globals.jest.fn().mockResolvedValue(true);
            mockUseWallet1.mockReturnValue({
                ...mockWalletState,
                disconnect: mockDisconnect
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const disconnectButton = _react1.screen.getByText('断开连接');
            _react1.fireEvent.click(disconnectButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockDisconnect).toHaveBeenCalledTimes(1);
            });
        });
        it('错误的网络时应该显示切换网络按钮', ()=>{
            mockUseWallet1.mockReturnValue({
                ...mockWalletState,
                chainId: 1 // Ethereum Mainnet (错误网络)
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(_react1.screen.getByText('切换到BSC网络')).toBeInTheDocument();
        });
        it('点击切换网络应该触发网络切换', async ()=>{
            const mockSwitchNetwork = _globals.jest.fn().mockResolvedValue(true);
            mockUseWallet1.mockReturnValue({
                ...mockWalletState,
                chainId: 1,
                switchNetwork: mockSwitchNetwork
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const switchButton = _react1.screen.getByText('切换到BSC网络');
            _react1.fireEvent.click(switchButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockSwitchNetwork).toHaveBeenCalledWith(56);
            });
        });
    });
    describe('加载状态', ()=>{
        it('连接过程中应该显示加载状态', async ()=>{
            const mockConnect = _globals.jest.fn(()=>new Promise((resolve)=>setTimeout(resolve, 1000)));
            mockUseWallet1.mockReturnValue({
                address: null,
                isConnected: false,
                chainId: null,
                balance: null,
                connect: mockConnect,
                disconnect: _globals.jest.fn(),
                switchNetwork: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByText('连接钱包');
            _react1.fireEvent.click(connectButton);
            expect(_react1.screen.getByText('连接中...')).toBeInTheDocument();
        });
        it('网络切换过程中应该显示加载状态', async ()=>{
            const mockSwitchNetwork = _globals.jest.fn(()=>new Promise((resolve)=>setTimeout(resolve, 1000)));
            mockUseWallet1.mockReturnValue({
                address: '0x1234567890123456789012345678901234567890',
                isConnected: true,
                chainId: 1,
                balance: null,
                connect: _globals.jest.fn(),
                disconnect: _globals.jest.fn(),
                switchNetwork: mockSwitchNetwork
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const switchButton = _react1.screen.getByText('切换到BSC网络');
            _react1.fireEvent.click(switchButton);
            expect(_react1.screen.getByText('切换中...')).toBeInTheDocument();
        });
    });
    describe('钱包检测', ()=>{
        it('未安装钱包时应该显示安装提示', ()=>{
            // 模拟未安装钱包
            Object.defineProperty(window, 'ethereum', {
                value: undefined,
                writable: true
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(_react1.screen.getByText(/请安装MetaMask/)).toBeInTheDocument();
        });
        it('应该检测不同类型的钱包', ()=>{
            // 模拟不同的钱包
            const wallets = [
                {
                    isMetaMask: true,
                    name: 'MetaMask'
                },
                {
                    isCoinbaseWallet: true,
                    name: 'Coinbase Wallet'
                },
                {
                    isTrustWallet: true,
                    name: 'Trust Wallet'
                }
            ];
            wallets.forEach((wallet)=>{
                Object.defineProperty(window, 'ethereum', {
                    value: wallet,
                    writable: true
                });
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            // 这里可以添加特定钱包的检测逻辑测试
            });
        });
    });
    describe('事件监听', ()=>{
        it('应该监听账户变化事件', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(mockEthereum.on).toHaveBeenCalledWith('accountsChanged', expect.any(Function));
        });
        it('应该监听网络变化事件', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            expect(mockEthereum.on).toHaveBeenCalledWith('chainChanged', expect.any(Function));
        });
        it('组件卸载时应该移除事件监听', ()=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            unmount();
            expect(mockEthereum.removeListener).toHaveBeenCalled();
        });
    });
    describe('错误处理', ()=>{
        it('应该处理用户拒绝连接的错误', async ()=>{
            const mockConnect = _globals.jest.fn().mockRejectedValue({
                code: 4001
            });
            mockUseWallet1.mockReturnValue({
                address: null,
                isConnected: false,
                chainId: null,
                balance: null,
                connect: mockConnect,
                disconnect: _globals.jest.fn(),
                switchNetwork: _globals.jest.fn()
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByText('连接钱包');
            _react1.fireEvent.click(connectButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/用户拒绝连接/)).toBeInTheDocument();
            });
        });
        it('应该处理网络切换失败的错误', async ()=>{
            const mockSwitchNetwork = _globals.jest.fn().mockRejectedValue(new Error('切换失败'));
            mockUseWallet1.mockReturnValue({
                address: '0x1234567890123456789012345678901234567890',
                isConnected: true,
                chainId: 1,
                balance: null,
                connect: _globals.jest.fn(),
                disconnect: _globals.jest.fn(),
                switchNetwork: mockSwitchNetwork
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const switchButton = _react1.screen.getByText('切换到BSC网络');
            _react1.fireEvent.click(switchButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/网络切换失败/)).toBeInTheDocument();
            });
        });
    });
    describe('可访问性', ()=>{
        it('按钮应该有正确的aria标签', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByRole('button', {
                name: /连接钱包/
            });
            expect(connectButton).toHaveAttribute('aria-label');
        });
        it('应该支持键盘导航', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WalletConnection, {}));
            const connectButton = _react1.screen.getByText('连接钱包');
            connectButton.focus();
            expect(document.activeElement).toBe(connectButton);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,