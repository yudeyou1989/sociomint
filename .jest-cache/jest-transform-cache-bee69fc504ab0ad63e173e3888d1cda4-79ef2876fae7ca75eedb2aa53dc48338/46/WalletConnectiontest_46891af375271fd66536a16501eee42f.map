{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/components/__tests__/wallet/WalletConnection.test.tsx"],"sourcesContent":["/**\n * 钱包连接功能测试\n * 测试钱包连接、断开连接、网络切换等核心功能\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { jest } from '@jest/globals';\n// import WalletConnection from '@/components/wallet/WalletConnection';\n\n// Mock钱包相关的hooks和工具\njest.mock('@/hooks/useWallet', () => ({\n  useWallet: jest.fn()\n}));\n\njest.mock('@/utils/walletUtils', () => ({\n  connectWallet: jest.fn(),\n  disconnectWallet: jest.fn(),\n  switchNetwork: jest.fn(),\n  getWalletBalance: jest.fn()\n}));\n\n// Mock window.ethereum\nconst mockEthereum = {\n  request: jest.fn(),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n  isConnected: jest.fn(),\n  selectedAddress: null,\n  chainId: '0x38' // BSC Mainnet\n};\n\nObject.defineProperty(window, 'ethereum', {\n  value: mockEthereum,\n  writable: true\n});\n\n// Mock组件\nconst MockWalletConnection = () => {\n  const wallet = mockUseWallet();\n\n  if (!window.ethereum) {\n    return <div>请安装MetaMask钱包</div>;\n  }\n\n  if (!wallet.isConnected) {\n    return (\n      <div>\n        <button onClick={wallet.connect}>连接钱包</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div>{wallet.address?.slice(0, 6)}...{wallet.address?.slice(-4)}</div>\n      <div>{wallet.balance?.bnb} BNB</div>\n      <div>{wallet.balance?.sm} SM</div>\n      {wallet.chainId !== 56 && (\n        <button onClick={() => wallet.switchNetwork(56)}>切换到BSC网络</button>\n      )}\n      <button onClick={wallet.disconnect}>断开连接</button>\n    </div>\n  );\n};\n\ndescribe('WalletConnection', () => {\n  const mockUseWallet = require('@/hooks/useWallet').useWallet;\n  const mockWalletUtils = require('@/utils/walletUtils');\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 默认的钱包状态\n    mockUseWallet.mockReturnValue({\n      address: null,\n      isConnected: false,\n      chainId: null,\n      balance: null,\n      connect: jest.fn(),\n      disconnect: jest.fn(),\n      switchNetwork: jest.fn()\n    });\n  });\n\n  describe('未连接状态', () => {\n    it('应该显示连接钱包按钮', () => {\n      render(<MockWalletConnection />);\n      \n      expect(screen.getByText('连接钱包')).toBeInTheDocument();\n      expect(screen.queryByText('断开连接')).not.toBeInTheDocument();\n    });\n\n    it('点击连接按钮应该触发连接流程', async () => {\n      const mockConnect = jest.fn().mockResolvedValue(true);\n      mockUseWallet.mockReturnValue({\n        address: null,\n        isConnected: false,\n        chainId: null,\n        balance: null,\n        connect: mockConnect,\n        disconnect: jest.fn(),\n        switchNetwork: jest.fn()\n      });\n\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByText('连接钱包');\n      fireEvent.click(connectButton);\n\n      await waitFor(() => {\n        expect(mockConnect).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    it('连接失败时应该显示错误信息', async () => {\n      const mockConnect = jest.fn().mockRejectedValue(new Error('用户拒绝连接'));\n      mockUseWallet.mockReturnValue({\n        address: null,\n        isConnected: false,\n        chainId: null,\n        balance: null,\n        connect: mockConnect,\n        disconnect: jest.fn(),\n        switchNetwork: jest.fn()\n      });\n\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByText('连接钱包');\n      fireEvent.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/连接失败/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('已连接状态', () => {\n    const mockWalletState = {\n      address: '0x1234567890123456789012345678901234567890',\n      isConnected: true,\n      chainId: 56, // BSC Mainnet\n      balance: {\n        bnb: '1.5',\n        sm: '10000',\n        flowers: '500'\n      },\n      connect: jest.fn(),\n      disconnect: jest.fn(),\n      switchNetwork: jest.fn()\n    };\n\n    beforeEach(() => {\n      mockUseWallet.mockReturnValue(mockWalletState);\n    });\n\n    it('应该显示钱包地址和余额', () => {\n      render(<WalletConnection />);\n      \n      expect(screen.getByText(/0x1234...7890/)).toBeInTheDocument();\n      expect(screen.getByText(/1.5 BNB/)).toBeInTheDocument();\n      expect(screen.getByText(/10000 SM/)).toBeInTheDocument();\n    });\n\n    it('应该显示断开连接按钮', () => {\n      render(<WalletConnection />);\n      \n      expect(screen.getByText('断开连接')).toBeInTheDocument();\n      expect(screen.queryByText('连接钱包')).not.toBeInTheDocument();\n    });\n\n    it('点击断开连接应该触发断开流程', async () => {\n      const mockDisconnect = jest.fn().mockResolvedValue(true);\n      mockUseWallet.mockReturnValue({\n        ...mockWalletState,\n        disconnect: mockDisconnect\n      });\n\n      render(<WalletConnection />);\n      \n      const disconnectButton = screen.getByText('断开连接');\n      fireEvent.click(disconnectButton);\n\n      await waitFor(() => {\n        expect(mockDisconnect).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    it('错误的网络时应该显示切换网络按钮', () => {\n      mockUseWallet.mockReturnValue({\n        ...mockWalletState,\n        chainId: 1 // Ethereum Mainnet (错误网络)\n      });\n\n      render(<WalletConnection />);\n      \n      expect(screen.getByText('切换到BSC网络')).toBeInTheDocument();\n    });\n\n    it('点击切换网络应该触发网络切换', async () => {\n      const mockSwitchNetwork = jest.fn().mockResolvedValue(true);\n      mockUseWallet.mockReturnValue({\n        ...mockWalletState,\n        chainId: 1,\n        switchNetwork: mockSwitchNetwork\n      });\n\n      render(<WalletConnection />);\n      \n      const switchButton = screen.getByText('切换到BSC网络');\n      fireEvent.click(switchButton);\n\n      await waitFor(() => {\n        expect(mockSwitchNetwork).toHaveBeenCalledWith(56);\n      });\n    });\n  });\n\n  describe('加载状态', () => {\n    it('连接过程中应该显示加载状态', async () => {\n      const mockConnect = jest.fn(() => new Promise(resolve => setTimeout(resolve, 1000)));\n      mockUseWallet.mockReturnValue({\n        address: null,\n        isConnected: false,\n        chainId: null,\n        balance: null,\n        connect: mockConnect,\n        disconnect: jest.fn(),\n        switchNetwork: jest.fn()\n      });\n\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByText('连接钱包');\n      fireEvent.click(connectButton);\n\n      expect(screen.getByText('连接中...')).toBeInTheDocument();\n    });\n\n    it('网络切换过程中应该显示加载状态', async () => {\n      const mockSwitchNetwork = jest.fn(() => new Promise(resolve => setTimeout(resolve, 1000)));\n      mockUseWallet.mockReturnValue({\n        address: '0x1234567890123456789012345678901234567890',\n        isConnected: true,\n        chainId: 1,\n        balance: null,\n        connect: jest.fn(),\n        disconnect: jest.fn(),\n        switchNetwork: mockSwitchNetwork\n      });\n\n      render(<WalletConnection />);\n      \n      const switchButton = screen.getByText('切换到BSC网络');\n      fireEvent.click(switchButton);\n\n      expect(screen.getByText('切换中...')).toBeInTheDocument();\n    });\n  });\n\n  describe('钱包检测', () => {\n    it('未安装钱包时应该显示安装提示', () => {\n      // 模拟未安装钱包\n      Object.defineProperty(window, 'ethereum', {\n        value: undefined,\n        writable: true\n      });\n\n      render(<WalletConnection />);\n      \n      expect(screen.getByText(/请安装MetaMask/)).toBeInTheDocument();\n    });\n\n    it('应该检测不同类型的钱包', () => {\n      // 模拟不同的钱包\n      const wallets = [\n        { isMetaMask: true, name: 'MetaMask' },\n        { isCoinbaseWallet: true, name: 'Coinbase Wallet' },\n        { isTrustWallet: true, name: 'Trust Wallet' }\n      ];\n\n      wallets.forEach(wallet => {\n        Object.defineProperty(window, 'ethereum', {\n          value: wallet,\n          writable: true\n        });\n\n        render(<WalletConnection />);\n        // 这里可以添加特定钱包的检测逻辑测试\n      });\n    });\n  });\n\n  describe('事件监听', () => {\n    it('应该监听账户变化事件', () => {\n      render(<WalletConnection />);\n      \n      expect(mockEthereum.on).toHaveBeenCalledWith(\n        'accountsChanged',\n        expect.any(Function)\n      );\n    });\n\n    it('应该监听网络变化事件', () => {\n      render(<WalletConnection />);\n      \n      expect(mockEthereum.on).toHaveBeenCalledWith(\n        'chainChanged',\n        expect.any(Function)\n      );\n    });\n\n    it('组件卸载时应该移除事件监听', () => {\n      const { unmount } = render(<WalletConnection />);\n      \n      unmount();\n      \n      expect(mockEthereum.removeListener).toHaveBeenCalled();\n    });\n  });\n\n  describe('错误处理', () => {\n    it('应该处理用户拒绝连接的错误', async () => {\n      const mockConnect = jest.fn().mockRejectedValue({ code: 4001 });\n      mockUseWallet.mockReturnValue({\n        address: null,\n        isConnected: false,\n        chainId: null,\n        balance: null,\n        connect: mockConnect,\n        disconnect: jest.fn(),\n        switchNetwork: jest.fn()\n      });\n\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByText('连接钱包');\n      fireEvent.click(connectButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/用户拒绝连接/)).toBeInTheDocument();\n      });\n    });\n\n    it('应该处理网络切换失败的错误', async () => {\n      const mockSwitchNetwork = jest.fn().mockRejectedValue(new Error('切换失败'));\n      mockUseWallet.mockReturnValue({\n        address: '0x1234567890123456789012345678901234567890',\n        isConnected: true,\n        chainId: 1,\n        balance: null,\n        connect: jest.fn(),\n        disconnect: jest.fn(),\n        switchNetwork: mockSwitchNetwork\n      });\n\n      render(<WalletConnection />);\n      \n      const switchButton = screen.getByText('切换到BSC网络');\n      fireEvent.click(switchButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/网络切换失败/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('可访问性', () => {\n    it('按钮应该有正确的aria标签', () => {\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByRole('button', { name: /连接钱包/ });\n      expect(connectButton).toHaveAttribute('aria-label');\n    });\n\n    it('应该支持键盘导航', () => {\n      render(<WalletConnection />);\n      \n      const connectButton = screen.getByText('连接钱包');\n      connectButton.focus();\n      \n      expect(document.activeElement).toBe(connectButton);\n    });\n  });\n});\n"],"names":["jest","mock","useWallet","fn","connectWallet","disconnectWallet","switchNetwork","getWalletBalance","mockEthereum","request","on","removeListener","isMetaMask","isConnected","selectedAddress","chainId","Object","defineProperty","window","value","writable","MockWalletConnection","wallet","mockUseWallet","ethereum","div","button","onClick","connect","address","slice","balance","bnb","sm","disconnect","describe","require","mockWalletUtils","beforeEach","clearAllMocks","mockReturnValue","it","render","expect","screen","getByText","toBeInTheDocument","queryByText","not","mockConnect","mockResolvedValue","WalletConnection","connectButton","fireEvent","click","waitFor","toHaveBeenCalledTimes","mockRejectedValue","Error","mockWalletState","flowers","mockDisconnect","disconnectButton","mockSwitchNetwork","switchButton","toHaveBeenCalledWith","Promise","resolve","setTimeout","undefined","wallets","name","isCoinbaseWallet","isTrustWallet","forEach","any","Function","unmount","toHaveBeenCalled","code","getByRole","toHaveAttribute","focus","document","activeElement","toBe"],"mappings":"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"}