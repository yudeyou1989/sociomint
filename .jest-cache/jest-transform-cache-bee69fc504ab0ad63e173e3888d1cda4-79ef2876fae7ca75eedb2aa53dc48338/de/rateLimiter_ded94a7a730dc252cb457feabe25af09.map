{"version":3,"names":["cov_601fqc283","actualCoverage","s","DistributedRateLimiter","f","RATE_LIMIT_CONFIGS","commonRateLimiters","default","_default","getRateLimiter","rateLimitMiddleware","useRateLimit","withRateLimit","MemoryRateLimiter","constructor","config","store","Map","setInterval","cleanup","windowMs","check","key","now","Date","record","get","b","resetTime","newRecord","count","firstRequest","set","allowed","remaining","maxRequests","onLimitReached","entries","delete","reset","getStatus","Math","max","strict","moderate","lenient","walletConnect","transaction","socialTask","rateLimiters","name","has","keyGenerator","limiter","checkLimit","requestFn","limitName","result","waitTime","Error","ceil","error","skipFailedRequests","req","res","next","ip","connection","remoteAddress","setHeader","toISOString","message","retryAfter","status","json","storage","windowKey","floor","incr","expire","console","apiCall"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/utils/rateLimiter.ts"],"sourcesContent":["/**\n * API速率限制工具\n * 提供客户端和服务端的速率限制功能\n */\n\n// 速率限制配置\nexport interface RateLimitConfig {\n  windowMs: number; // 时间窗口（毫秒）\n  maxRequests: number; // 最大请求数\n  keyGenerator?: (req?: any) => string; // 键生成器\n  skipSuccessfulRequests?: boolean; // 跳过成功请求\n  skipFailedRequests?: boolean; // 跳过失败请求\n  onLimitReached?: (key: string) => void; // 达到限制时的回调\n}\n\n// 请求记录\ninterface RequestRecord {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\n// 内存存储的速率限制器\nclass MemoryRateLimiter {\n  private store = new Map<string, RequestRecord>();\n  private config: RateLimitConfig;\n\n  constructor(config: RateLimitConfig) {\n    this.config = config;\n    \n    // 定期清理过期记录\n    setInterval(() => {\n      this.cleanup();\n    }, this.config.windowMs);\n  }\n\n  // 检查是否超过限制\n  check(key: string): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const record = this.store.get(key);\n\n    if (!record || now >= record.resetTime) {\n      // 创建新记录或重置过期记录\n      const newRecord: RequestRecord = {\n        count: 1,\n        resetTime: now + this.config.windowMs,\n        firstRequest: now\n      };\n      this.store.set(key, newRecord);\n      \n      return {\n        allowed: true,\n        remaining: this.config.maxRequests - 1,\n        resetTime: newRecord.resetTime\n      };\n    }\n\n    // 检查是否超过限制\n    if (record.count >= this.config.maxRequests) {\n      if (this.config.onLimitReached) {\n        this.config.onLimitReached(key);\n      }\n      \n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: record.resetTime\n      };\n    }\n\n    // 增加计数\n    record.count++;\n    this.store.set(key, record);\n\n    return {\n      allowed: true,\n      remaining: this.config.maxRequests - record.count,\n      resetTime: record.resetTime\n    };\n  }\n\n  // 清理过期记录\n  private cleanup() {\n    const now = Date.now();\n    for (const [key, record] of this.store.entries()) {\n      if (now >= record.resetTime) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  // 重置特定键的限制\n  reset(key: string) {\n    this.store.delete(key);\n  }\n\n  // 获取当前状态\n  getStatus(key: string) {\n    const record = this.store.get(key);\n    if (!record) {\n      return {\n        count: 0,\n        remaining: this.config.maxRequests,\n        resetTime: Date.now() + this.config.windowMs\n      };\n    }\n\n    return {\n      count: record.count,\n      remaining: Math.max(0, this.config.maxRequests - record.count),\n      resetTime: record.resetTime\n    };\n  }\n}\n\n// 预定义的速率限制配置\nexport const RATE_LIMIT_CONFIGS = {\n  // 严格限制（登录、注册等敏感操作）\n  strict: {\n    windowMs: 15 * 60 * 1000, // 15分钟\n    maxRequests: 5\n  },\n  \n  // 中等限制（API调用）\n  moderate: {\n    windowMs: 60 * 1000, // 1分钟\n    maxRequests: 30\n  },\n  \n  // 宽松限制（一般请求）\n  lenient: {\n    windowMs: 60 * 1000, // 1分钟\n    maxRequests: 100\n  },\n  \n  // 钱包连接限制\n  walletConnect: {\n    windowMs: 5 * 60 * 1000, // 5分钟\n    maxRequests: 10\n  },\n  \n  // 交易提交限制\n  transaction: {\n    windowMs: 60 * 1000, // 1分钟\n    maxRequests: 5\n  },\n  \n  // 社交任务提交限制\n  socialTask: {\n    windowMs: 60 * 1000, // 1分钟\n    maxRequests: 3\n  }\n};\n\n// 全局速率限制器实例\nconst rateLimiters = new Map<string, MemoryRateLimiter>();\n\n// 获取或创建速率限制器\nexport const getRateLimiter = (name: string, config: RateLimitConfig): MemoryRateLimiter => {\n  if (!rateLimiters.has(name)) {\n    rateLimiters.set(name, new MemoryRateLimiter(config));\n  }\n  return rateLimiters.get(name)!;\n};\n\n// 客户端速率限制Hook\nexport const useRateLimit = (\n  name: string, \n  config: RateLimitConfig,\n  keyGenerator: () => string = () => 'default'\n) => {\n  const limiter = getRateLimiter(name, config);\n\n  const checkLimit = () => {\n    const key = keyGenerator();\n    return limiter.check(key);\n  };\n\n  const getStatus = () => {\n    const key = keyGenerator();\n    return limiter.getStatus(key);\n  };\n\n  const reset = () => {\n    const key = keyGenerator();\n    limiter.reset(key);\n  };\n\n  return {\n    checkLimit,\n    getStatus,\n    reset\n  };\n};\n\n// API请求包装器，自动应用速率限制\nexport const withRateLimit = async <T>(\n  requestFn: () => Promise<T>,\n  limitName: string,\n  config: RateLimitConfig,\n  key: string = 'default'\n): Promise<T> => {\n  const limiter = getRateLimiter(limitName, config);\n  const result = limiter.check(key);\n\n  if (!result.allowed) {\n    const waitTime = result.resetTime - Date.now();\n    throw new Error(`请求过于频繁，请在 ${Math.ceil(waitTime / 1000)} 秒后重试`);\n  }\n\n  try {\n    return await requestFn();\n  } catch (error) {\n    // 如果配置了跳过失败请求，则减少计数\n    if (config.skipFailedRequests) {\n      const record = (limiter as any).store.get(key);\n      if (record) {\n        record.count = Math.max(0, record.count - 1);\n        (limiter as any).store.set(key, record);\n      }\n    }\n    throw error;\n  }\n};\n\n// 中间件函数（用于API路由）\nexport const rateLimitMiddleware = (config: RateLimitConfig) => {\n  const limiter = new MemoryRateLimiter(config);\n\n  return (req: any, res: any, next?: () => void) => {\n    // 生成键（可以基于IP、用户ID等）\n    const key = config.keyGenerator \n      ? config.keyGenerator(req)\n      : req.ip || req.connection?.remoteAddress || 'unknown';\n\n    const result = limiter.check(key);\n\n    // 设置响应头\n    if (res.setHeader) {\n      res.setHeader('X-RateLimit-Limit', config.maxRequests);\n      res.setHeader('X-RateLimit-Remaining', result.remaining);\n      res.setHeader('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\n    }\n\n    if (!result.allowed) {\n      const error = {\n        error: 'Too Many Requests',\n        message: '请求过于频繁，请稍后重试',\n        retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000)\n      };\n\n      if (res.status) {\n        return res.status(429).json(error);\n      } else {\n        throw new Error(error.message);\n      }\n    }\n\n    if (next) {\n      next();\n    }\n    return true;\n  };\n};\n\n// 分布式速率限制器（使用Redis等外部存储）\nexport class DistributedRateLimiter {\n  private storage: any; // Redis客户端或其他存储\n\n  constructor(storage: any) {\n    this.storage = storage;\n  }\n\n  async check(key: string, config: RateLimitConfig) {\n    const now = Date.now();\n    const windowKey = `rate_limit:${key}:${Math.floor(now / config.windowMs)}`;\n\n    try {\n      // 获取当前窗口的请求计数\n      const count = await this.storage.incr(windowKey);\n      \n      // 设置过期时间\n      if (count === 1) {\n        await this.storage.expire(windowKey, Math.ceil(config.windowMs / 1000));\n      }\n\n      const allowed = count <= config.maxRequests;\n      const remaining = Math.max(0, config.maxRequests - count);\n      const resetTime = Math.ceil(now / config.windowMs) * config.windowMs + config.windowMs;\n\n      return {\n        allowed,\n        remaining,\n        resetTime,\n        count\n      };\n    } catch (error) {\n      console.error('Rate limiter error:', error);\n      // 出错时允许请求通过\n      return {\n        allowed: true,\n        remaining: config.maxRequests,\n        resetTime: now + config.windowMs,\n        count: 0\n      };\n    }\n  }\n}\n\n// 导出常用的速率限制器\nexport const commonRateLimiters = {\n  // 钱包连接限制器\n  walletConnect: getRateLimiter('walletConnect', RATE_LIMIT_CONFIGS.walletConnect),\n  \n  // 交易限制器\n  transaction: getRateLimiter('transaction', RATE_LIMIT_CONFIGS.transaction),\n  \n  // 社交任务限制器\n  socialTask: getRateLimiter('socialTask', RATE_LIMIT_CONFIGS.socialTask),\n  \n  // API调用限制器\n  apiCall: getRateLimiter('apiCall', RATE_LIMIT_CONFIGS.moderate)\n};\n\nexport default {\n  MemoryRateLimiter,\n  DistributedRateLimiter,\n  getRateLimiter,\n  useRateLimit,\n  withRateLimit,\n  rateLimitMiddleware,\n  commonRateLimiters,\n  RATE_LIMIT_CONFIGS\n};\n"],"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","ignoreList":[]}