{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/contractService.test.ts"],"sourcesContent":["import { ContractService } from '../services/contractService';\n\n// 模拟 ethers\nconst mockEthers = {\n  BrowserProvider: jest.fn(),\n  JsonRpcProvider: jest.fn(),\n  Contract: jest.fn(),\n  formatEther: jest.fn().mockReturnValue('1.0'),\n  formatUnits: jest.fn().mockReturnValue('0.000001'),\n  parseEther: jest.fn().mockReturnValue(BigInt('1000000000000000000')),\n};\n\njest.mock('ethers', () => mockEthers);\n\ndescribe('ContractService', () => {\n  let contractService: ContractService;\n  let mockProvider: any;\n  let mockSigner: any;\n  let mockContract: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSigner = {\n      getAddress: jest.fn().mockResolvedValue('0x123456789abcdef'),\n    };\n\n    mockProvider = {\n      getSigner: jest.fn().mockResolvedValue(mockSigner),\n      getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n    };\n\n    mockContract = {\n      balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n      getExchangeStats: jest.fn().mockResolvedValue({\n        totalTokensSold: BigInt('1000000000000000000000'),\n        totalTokensRemaining: BigInt('9000000000000000000000'),\n        totalBnbRaised: BigInt('100000000000000000000'),\n        currentPrice: BigInt('1000000'),\n        nextRoundPrice: BigInt('1100000'),\n        isActive: true,\n        currentRound: 1,\n      }),\n      exchangeTokens: jest.fn().mockResolvedValue({\n        hash: '0x123456789abcdef',\n        wait: jest.fn().mockResolvedValue({ status: 1 }),\n      }),\n    };\n\n    mockEthers.BrowserProvider.mockImplementation(() => mockProvider);\n    mockEthers.Contract.mockImplementation(() => mockContract);\n\n    contractService = new ContractService();\n  });\n\n  describe('initialization', () => {\n    it('initializes with provider', async () => {\n      await contractService.initialize(mockProvider);\n\n      expect(mockProvider.getSigner).toHaveBeenCalled();\n      expect(mockEthers.Contract).toHaveBeenCalledTimes(2); // SMToken and SMTokenExchange\n    });\n  });\n\n  describe('getSMTokenBalance', () => {\n    it('returns formatted token balance', async () => {\n      await contractService.initialize(mockProvider);\n\n      const balance = await contractService.getSMTokenBalance('0x123');\n\n      expect(mockContract.balanceOf).toHaveBeenCalledWith('0x123');\n      expect(mockEthers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('1.0');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getSMTokenBalance('0x123')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getBNBBalance', () => {\n    it('returns formatted BNB balance', async () => {\n      await contractService.initialize(mockProvider);\n\n      const balance = await contractService.getBNBBalance('0x123');\n\n      expect(mockProvider.getBalance).toHaveBeenCalledWith('0x123');\n      expect(mockEthers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('1.0');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getBNBBalance('0x123')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getExchangeStats', () => {\n    it('returns formatted exchange statistics', async () => {\n      await contractService.initialize(mockProvider);\n\n      const stats = await contractService.getExchangeStats();\n\n      expect(mockContract.getExchangeStats).toHaveBeenCalled();\n      expect(stats).toEqual({\n        totalTokensSold: '1.0',\n        totalTokensRemaining: '1.0',\n        totalBnbRaised: '1.0',\n        currentPrice: '0.000001',\n        nextRoundPrice: '0.000001',\n        isActive: true,\n        currentRound: 1,\n      });\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.getExchangeStats()).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('exchangeTokens', () => {\n    it('exchanges BNB for tokens successfully', async () => {\n      await contractService.initialize(mockProvider);\n\n      const result = await contractService.exchangeTokens('1.0');\n\n      expect(mockEthers.parseEther).toHaveBeenCalledWith('1.0');\n      expect(mockContract.exchangeTokens).toHaveBeenCalledWith({\n        value: BigInt('1000000000000000000'),\n      });\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('throws error when not initialized', async () => {\n      await expect(contractService.exchangeTokens('1.0')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('getReadOnlyProvider', () => {\n    it('returns JsonRpcProvider instance', () => {\n      const provider = ContractService.getReadOnlyProvider();\n\n      expect(mockEthers.JsonRpcProvider).toHaveBeenCalledWith('https://data-seed-prebsc-1-s1.binance.org:8545/');\n    });\n  });\n});\n"],"names":["jest","mock","mockEthers","BrowserProvider","fn","JsonRpcProvider","Contract","formatEther","mockReturnValue","formatUnits","parseEther","BigInt","describe","contractService","mockProvider","mockSigner","mockContract","beforeEach","clearAllMocks","getAddress","mockResolvedValue","getSigner","getBalance","balanceOf","getExchangeStats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","exchangeTokens","hash","wait","status","mockImplementation","ContractService","it","initialize","expect","toHaveBeenCalled","toHaveBeenCalledTimes","balance","getSMTokenBalance","toHaveBeenCalledWith","toBe","rejects","toThrow","getBNBBalance","stats","toEqual","result","value","provider","getReadOnlyProvider"],"mappings":";AAYAA,KAAKC,IAAI,CAAC,UAAU,IAAMC;;;;iCAZM;AAEhC,YAAY;AACZ,MAAMA,aAAa;IACjBC,iBAAiBH,KAAKI,EAAE;IACxBC,iBAAiBL,KAAKI,EAAE;IACxBE,UAAUN,KAAKI,EAAE;IACjBG,aAAaP,KAAKI,EAAE,GAAGI,eAAe,CAAC;IACvCC,aAAaT,KAAKI,EAAE,GAAGI,eAAe,CAAC;IACvCE,YAAYV,KAAKI,EAAE,GAAGI,eAAe,CAACG,OAAO;AAC/C;AAIAC,SAAS,mBAAmB;IAC1B,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTjB,KAAKkB,aAAa;QAElBH,aAAa;YACXI,YAAYnB,KAAKI,EAAE,GAAGgB,iBAAiB,CAAC;QAC1C;QAEAN,eAAe;YACbO,WAAWrB,KAAKI,EAAE,GAAGgB,iBAAiB,CAACL;YACvCO,YAAYtB,KAAKI,EAAE,GAAGgB,iBAAiB,CAACT,OAAO;QACjD;QAEAK,eAAe;YACbO,WAAWvB,KAAKI,EAAE,GAAGgB,iBAAiB,CAACT,OAAO;YAC9Ca,kBAAkBxB,KAAKI,EAAE,GAAGgB,iBAAiB,CAAC;gBAC5CK,iBAAiBd,OAAO;gBACxBe,sBAAsBf,OAAO;gBAC7BgB,gBAAgBhB,OAAO;gBACvBiB,cAAcjB,OAAO;gBACrBkB,gBAAgBlB,OAAO;gBACvBmB,UAAU;gBACVC,cAAc;YAChB;YACAC,gBAAgBhC,KAAKI,EAAE,GAAGgB,iBAAiB,CAAC;gBAC1Ca,MAAM;gBACNC,MAAMlC,KAAKI,EAAE,GAAGgB,iBAAiB,CAAC;oBAAEe,QAAQ;gBAAE;YAChD;QACF;QAEAjC,WAAWC,eAAe,CAACiC,kBAAkB,CAAC,IAAMtB;QACpDZ,WAAWI,QAAQ,CAAC8B,kBAAkB,CAAC,IAAMpB;QAE7CH,kBAAkB,IAAIwB,gCAAe;IACvC;IAEAzB,SAAS,kBAAkB;QACzB0B,GAAG,6BAA6B;YAC9B,MAAMzB,gBAAgB0B,UAAU,CAACzB;YAEjC0B,OAAO1B,aAAaO,SAAS,EAAEoB,gBAAgB;YAC/CD,OAAOtC,WAAWI,QAAQ,EAAEoC,qBAAqB,CAAC,IAAI,8BAA8B;QACtF;IACF;IAEA9B,SAAS,qBAAqB;QAC5B0B,GAAG,mCAAmC;YACpC,MAAMzB,gBAAgB0B,UAAU,CAACzB;YAEjC,MAAM6B,UAAU,MAAM9B,gBAAgB+B,iBAAiB,CAAC;YAExDJ,OAAOxB,aAAaO,SAAS,EAAEsB,oBAAoB,CAAC;YACpDL,OAAOtC,WAAWK,WAAW,EAAEkC,gBAAgB;YAC/CD,OAAOG,SAASG,IAAI,CAAC;QACvB;QAEAR,GAAG,qCAAqC;YACtC,MAAME,OAAO3B,gBAAgB+B,iBAAiB,CAAC,UAAUG,OAAO,CAACC,OAAO,CAAC;QAC3E;IACF;IAEApC,SAAS,iBAAiB;QACxB0B,GAAG,iCAAiC;YAClC,MAAMzB,gBAAgB0B,UAAU,CAACzB;YAEjC,MAAM6B,UAAU,MAAM9B,gBAAgBoC,aAAa,CAAC;YAEpDT,OAAO1B,aAAaQ,UAAU,EAAEuB,oBAAoB,CAAC;YACrDL,OAAOtC,WAAWK,WAAW,EAAEkC,gBAAgB;YAC/CD,OAAOG,SAASG,IAAI,CAAC;QACvB;QAEAR,GAAG,qCAAqC;YACtC,MAAME,OAAO3B,gBAAgBoC,aAAa,CAAC,UAAUF,OAAO,CAACC,OAAO,CAAC;QACvE;IACF;IAEApC,SAAS,oBAAoB;QAC3B0B,GAAG,yCAAyC;YAC1C,MAAMzB,gBAAgB0B,UAAU,CAACzB;YAEjC,MAAMoC,QAAQ,MAAMrC,gBAAgBW,gBAAgB;YAEpDgB,OAAOxB,aAAaQ,gBAAgB,EAAEiB,gBAAgB;YACtDD,OAAOU,OAAOC,OAAO,CAAC;gBACpB1B,iBAAiB;gBACjBC,sBAAsB;gBACtBC,gBAAgB;gBAChBC,cAAc;gBACdC,gBAAgB;gBAChBC,UAAU;gBACVC,cAAc;YAChB;QACF;QAEAO,GAAG,qCAAqC;YACtC,MAAME,OAAO3B,gBAAgBW,gBAAgB,IAAIuB,OAAO,CAACC,OAAO,CAAC;QACnE;IACF;IAEApC,SAAS,kBAAkB;QACzB0B,GAAG,yCAAyC;YAC1C,MAAMzB,gBAAgB0B,UAAU,CAACzB;YAEjC,MAAMsC,SAAS,MAAMvC,gBAAgBmB,cAAc,CAAC;YAEpDQ,OAAOtC,WAAWQ,UAAU,EAAEmC,oBAAoB,CAAC;YACnDL,OAAOxB,aAAagB,cAAc,EAAEa,oBAAoB,CAAC;gBACvDQ,OAAO1C,OAAO;YAChB;YACA6B,OAAOY,OAAOnB,IAAI,EAAEa,IAAI,CAAC;QAC3B;QAEAR,GAAG,qCAAqC;YACtC,MAAME,OAAO3B,gBAAgBmB,cAAc,CAAC,QAAQe,OAAO,CAACC,OAAO,CAAC;QACtE;IACF;IAEApC,SAAS,uBAAuB;QAC9B0B,GAAG,oCAAoC;YACrC,MAAMgB,WAAWjB,gCAAe,CAACkB,mBAAmB;YAEpDf,OAAOtC,WAAWG,eAAe,EAAEwC,oBAAoB,CAAC;QAC1D;IACF;AACF"}