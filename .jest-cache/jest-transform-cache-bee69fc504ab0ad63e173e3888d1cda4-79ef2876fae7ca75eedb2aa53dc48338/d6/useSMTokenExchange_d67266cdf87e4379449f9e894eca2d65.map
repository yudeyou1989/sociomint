{"version":3,"names":["cov_1e5bo04z3v","actualCoverage","s","useSMTokenExchange","f","address","isConnected","_wagmi","useAccount","isExchanging","setIsExchanging","_react","useState","txHash","setTxHash","error","setError","data","exchangeStats","isLoading","isLoadingStats","refetch","refetchStats","useReadContract","_contracts","contractAddresses","exchange","abi","contractAbis","smTokenExchange","functionName","enabled","writeContractAsync","isPending","isWritePending","useWriteContract","exchangeTokens","bnbAmount","b","Error","valueInWei","_viem","parseEther","hash","value","err","formattedStats","totalTokensSold","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","currentRound","formattedTokensSold","formatUnits","formattedTokensRemaining","formattedBnbRaised","formatEther","formattedCurrentPrice","formattedNextRoundPrice","buyTokens","getCurrentPrice","toString"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/hooks/useSMTokenExchange.ts"],"sourcesContent":["import { useAccount, useReadContract, useWriteContract } from 'wagmi';\nimport { parseEther, formatEther, formatUnits } from 'viem';\nimport { useState } from 'react';\nimport { contractAbis, contractAddresses } from '../config/contracts';\n\n// 定义合约返回的原始数据类型\ntype ExchangeStatsResult = [\n  bigint, // totalTokensSold\n  bigint, // totalTokensRemaining\n  bigint, // totalBnbRaised\n  bigint, // currentPrice\n  bigint, // nextRoundPrice\n  boolean, // isActive\n  number  // currentRound\n];\n\nexport function useSMTokenExchange() {\n  const { address, isConnected } = useAccount();\n  const [isExchanging, setIsExchanging] = useState(false);\n  const [txHash, setTxHash] = useState<`0x${string}` | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  // 读取交易所统计信息\n  const { \n    data: exchangeStats, \n    isLoading: isLoadingStats, \n    refetch: refetchStats\n  } = useReadContract({\n    address: contractAddresses.exchange as `0x${string}`,\n    abi: contractAbis.smTokenExchange,\n    functionName: 'getExchangeStats',\n    enabled: !!contractAddresses.exchange,\n  }) as { data: ExchangeStatsResult | undefined, isLoading: boolean, refetch: () => Promise<any> };\n\n  // 准备写入合约函数\n  const { writeContractAsync, isPending: isWritePending } = useWriteContract();\n\n  // 执行代币兑换\n  const exchangeTokens = async (bnbAmount: string) => {\n    if (!isConnected || !address) {\n      setError(new Error('请先连接钱包'));\n      return;\n    }\n\n    setIsExchanging(true);\n    setError(null);\n    setTxHash(null);\n\n    try {\n      // 将BNB数量转换为Wei\n      const valueInWei = parseEther(bnbAmount);\n\n      // 调用合约的exchangeTokens函数\n      const hash = await writeContractAsync({\n        address: contractAddresses.exchange as `0x${string}`,\n        abi: contractAbis.smTokenExchange,\n        functionName: 'exchangeTokens',\n        value: valueInWei,\n      });\n\n      setTxHash(hash);\n      \n      // 交易成功后刷新数据\n      await refetchStats();\n      \n      return hash;\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('兑换失败'));\n      throw err;\n    } finally {\n      setIsExchanging(false);\n    }\n  };\n\n  // 格式化统计数据\n  const formattedStats = exchangeStats ? {\n    totalTokensSold: exchangeStats[0],\n    totalTokensRemaining: exchangeStats[1],\n    totalBnbRaised: exchangeStats[2],\n    currentPrice: exchangeStats[3],\n    nextRoundPrice: exchangeStats[4],\n    isActive: exchangeStats[5],\n    currentRound: exchangeStats[6],\n    // 添加一些格式化的值\n    formattedTokensSold: formatUnits(exchangeStats[0], 18),\n    formattedTokensRemaining: formatUnits(exchangeStats[1], 18),\n    formattedBnbRaised: formatEther(exchangeStats[2]),\n    formattedCurrentPrice: formatEther(exchangeStats[3]),\n    formattedNextRoundPrice: formatEther(exchangeStats[4]),\n  } : null;\n\n  // 为了向后兼容，添加 buyTokens 别名\n  const buyTokens = exchangeTokens;\n\n  // 获取当前价格\n  const getCurrentPrice = async () => {\n    if (formattedStats?.currentPrice) {\n      return formattedStats.currentPrice.toString();\n    }\n    return null;\n  };\n\n  return {\n    exchangeStats: formattedStats,\n    exchangeTokens,\n    buyTokens, // 向后兼容\n    getCurrentPrice, // 向后兼容\n    isLoading: isLoadingStats,\n    isLoadingStats,\n    isExchanging: isExchanging || isWritePending,\n    txHash,\n    error,\n    refetchStats,\n  };\n}\n"],"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","ignoreList":[]}