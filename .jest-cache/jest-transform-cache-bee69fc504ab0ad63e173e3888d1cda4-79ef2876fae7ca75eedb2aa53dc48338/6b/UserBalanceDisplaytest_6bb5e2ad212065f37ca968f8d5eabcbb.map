{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/UserBalanceDisplay.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport UserBalanceDisplay from '../UserBalanceDisplay';\nimport { useAccount } from 'wagmi';\nimport { hasEthereum } from '../services/walletService';\nimport { ethers } from 'ethers';\n\n// 模拟依赖\njest.mock('wagmi', () => ({\n  useAccount: jest.fn(),\n}));\n\njest.mock('../services/walletService', () => ({\n  hasEthereum: jest.fn(),\n}));\n\njest.mock('ethers', () => {\n  const original = jest.requireActual('ethers');\n  return {\n    ...original,\n    BrowserProvider: jest.fn().mockImplementation(() => ({\n      getSigner: jest.fn().mockResolvedValue({\n        getAddress: jest.fn().mockResolvedValue('0x123'),\n      }),\n    })),\n    Contract: jest.fn().mockImplementation(() => ({\n      symbol: jest.fn().mockResolvedValue('SM'),\n      decimals: jest.fn().mockResolvedValue(18),\n      balanceOf: jest.fn().mockResolvedValue(ethers.parseEther('1000')),\n      userData: jest.fn().mockResolvedValue([\n        ethers.parseEther('5'),\n        1234567890n,\n      ]),\n      isUserVerified: jest.fn().mockResolvedValue(true),\n    })),\n  };\n});\n\ndescribe('UserBalanceDisplay', () => {\n  beforeEach(() => {\n    // 重置所有模拟\n    jest.clearAllMocks();\n\n    // 默认模拟值\n    (useAccount as jest.Mock).mockReturnValue({\n      address: '0x123456789abcdef',\n      isConnected: true,\n    });\n\n    (hasEthereum as jest.Mock).mockReturnValue(true);\n\n    // 模拟window.ethereum\n    global.window.ethereum = {\n      request: jest.fn(),\n      on: jest.fn(),\n      removeListener: jest.fn(),\n    };\n  });\n\n  it('renders loading state initially', () => {\n    render(<UserBalanceDisplay />);\n    expect(screen.getByText('加载中...')).toBeInTheDocument();\n  });\n\n  it('renders wallet not connected message when not connected', () => {\n    (useAccount as jest.Mock).mockReturnValue({\n      address: undefined,\n      isConnected: false,\n    });\n\n    render(<UserBalanceDisplay />);\n    expect(screen.getByText('请连接钱包查看您的余额')).toBeInTheDocument();\n  });\n\n  it('renders error message when there is an error', async () => {\n    // 模拟Contract抛出错误\n    (ethers.Contract as jest.Mock).mockImplementationOnce(() => {\n      throw new Error('获取用户数据失败');\n    });\n\n    render(<UserBalanceDisplay />);\n\n    await waitFor(() => {\n      expect(screen.getByText('获取用户数据失败，请稍后再试')).toBeInTheDocument();\n    });\n  });\n\n  it('renders user balance data correctly', async () => {\n    render(<UserBalanceDisplay />);\n\n    await waitFor(() => {\n      // 检查钱包地址\n      expect(screen.getByText('0x1234...cdef')).toBeInTheDocument();\n\n      // 检查代币余额\n      expect(screen.getByText('1,000 SM')).toBeInTheDocument();\n\n      // 检查总购买金额\n      expect(screen.getByText('5 BNB')).toBeInTheDocument();\n\n      // 检查验证状态\n      expect(screen.getByText('已验证')).toBeInTheDocument();\n    });\n  });\n\n  it('handles ethereum not available', () => {\n    (hasEthereum as jest.Mock).mockReturnValue(false);\n\n    render(<UserBalanceDisplay />);\n\n    expect(screen.queryByText('加载中...')).not.toBeInTheDocument();\n  });\n});\n"],"names":["jest","mock","useAccount","fn","hasEthereum","original","requireActual","BrowserProvider","mockImplementation","getSigner","mockResolvedValue","getAddress","Contract","symbol","decimals","balanceOf","ethers","parseEther","userData","isUserVerified","describe","beforeEach","clearAllMocks","mockReturnValue","address","isConnected","global","window","ethereum","request","on","removeListener","it","render","UserBalanceDisplay","expect","screen","getByText","toBeInTheDocument","undefined","mockImplementationOnce","Error","waitFor","queryByText","not"],"mappings":"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"}