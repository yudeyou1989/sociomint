{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/WalletContext.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react';\nimport { WalletProvider, useWallet } from '../contexts/WalletContext';\n\n// 模拟 window.ethereum\nconst mockEthereum = {\n  request: jest.fn(),\n  on: jest.fn(),\n  removeListener: jest.fn(),\n  isMetaMask: true,\n};\n\n// 模拟合约服务\nconst mockContractService = {\n  initialize: jest.fn().mockResolvedValue(undefined),\n  getTokenBalance: jest.fn().mockResolvedValue('100.0'),\n};\n\n// 模拟 ethers\nconst mockProvider = {\n  send: jest.fn().mockResolvedValue(['0x123456789abcdef123456789abcdef123456789a']),\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a'),\n  }),\n  getNetwork: jest.fn().mockResolvedValue({ chainId: 97n }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n};\n\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n  Contract: jest.fn().mockImplementation(() => ({\n    balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n    symbol: jest.fn().mockResolvedValue('SM'),\n    decimals: jest.fn().mockResolvedValue(18),\n  })),\n}));\n\n// 模拟合约服务\njest.mock('../services/contractService', () => ({\n  contractService: mockContractService,\n}));\n\n// 测试组件\nconst TestComponent = () => {\n  const { wallet, connect, disconnect, isConnecting } = useWallet();\n\n  const handleConnect = async () => {\n    try {\n      await connect();\n    } catch (error) {\n      console.error('Connection failed:', error);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await disconnect();\n    } catch (error) {\n      console.error('Disconnect failed:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div data-testid=\"connection-status\">\n        {wallet.isConnected ? 'Connected' : 'Not Connected'}\n      </div>\n      <div data-testid=\"address\">{wallet.address || ''}</div>\n      <div data-testid=\"chain-id\">{wallet.chainId || 0}</div>\n      <div data-testid=\"bnb-balance\">{wallet.balance?.bnb || '0'}</div>\n      <div data-testid=\"sm-balance\">{wallet.balance?.sm || '0'}</div>\n      <div data-testid=\"connecting-status\">\n        {isConnecting ? 'Connecting' : 'Not Connecting'}\n      </div>\n      <button onClick={handleConnect} data-testid=\"connect-button\">\n        Connect\n      </button>\n      <button onClick={handleDisconnect} data-testid=\"disconnect-button\">\n        Disconnect\n      </button>\n    </div>\n  );\n};\n\ndescribe('WalletContext', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // 重置 mock ethereum\n    mockEthereum.request.mockClear();\n    mockEthereum.on.mockClear();\n    mockEthereum.removeListener.mockClear();\n\n    // 设置默认成功响应\n    mockEthereum.request.mockResolvedValue(['0x123456789abcdef']);\n\n    // 模拟 window.ethereum\n    Object.defineProperty(window, 'ethereum', {\n      value: mockEthereum,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  it('provides initial wallet state', () => {\n    render(\n      <WalletProvider>\n        <TestComponent />\n      </WalletProvider>\n    );\n\n    expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n    expect(screen.getByTestId('address')).toHaveTextContent('');\n    expect(screen.getByTestId('chain-id')).toHaveTextContent('0');\n    expect(screen.getByTestId('bnb-balance')).toHaveTextContent('0');\n    expect(screen.getByTestId('sm-balance')).toHaveTextContent('0');\n    expect(screen.getByTestId('connecting-status')).toHaveTextContent('Not Connecting');\n  });\n\n  it('connects wallet successfully', async () => {\n    render(\n      <WalletProvider>\n        <TestComponent />\n      </WalletProvider>\n    );\n\n    const connectButton = screen.getByTestId('connect-button');\n\n    await act(async () => {\n      fireEvent.click(connectButton);\n    });\n\n    // 检查连接状态\n    await waitFor(() => {\n      expect(screen.getByTestId('connecting-status')).toHaveTextContent('Connecting');\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n      expect(screen.getByTestId('address')).toHaveTextContent('0x123456789abcdef123456789abcdef123456789a');\n      expect(screen.getByTestId('chain-id')).toHaveTextContent('97');\n    }, { timeout: 3000 });\n  });\n\n  it('disconnects wallet', async () => {\n    render(\n      <WalletProvider>\n        <TestComponent />\n      </WalletProvider>\n    );\n\n    // 先连接\n    const connectButton = screen.getByTestId('connect-button');\n    await act(async () => {\n      fireEvent.click(connectButton);\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Connected');\n    }, { timeout: 3000 });\n\n    // 然后断开连接\n    const disconnectButton = screen.getByTestId('disconnect-button');\n    await act(async () => {\n      fireEvent.click(disconnectButton);\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n      expect(screen.getByTestId('address')).toHaveTextContent('');\n    });\n  });\n\n  it('handles connection error', async () => {\n    // 模拟连接错误\n    mockEthereum.request.mockRejectedValue(new Error('User rejected'));\n\n    render(\n      <WalletProvider>\n        <TestComponent />\n      </WalletProvider>\n    );\n\n    const connectButton = screen.getByTestId('connect-button');\n    await act(async () => {\n      fireEvent.click(connectButton);\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n      expect(screen.getByTestId('connecting-status')).toHaveTextContent('Not Connecting');\n    }, { timeout: 3000 });\n  });\n\n  it('handles missing ethereum provider', async () => {\n    // 移除 ethereum 对象\n    Object.defineProperty(window, 'ethereum', {\n      value: undefined,\n      writable: true,\n      configurable: true,\n    });\n\n    render(\n      <WalletProvider>\n        <TestComponent />\n      </WalletProvider>\n    );\n\n    const connectButton = screen.getByTestId('connect-button');\n    await act(async () => {\n      fireEvent.click(connectButton);\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Not Connected');\n    }, { timeout: 3000 });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","formatEther","value","Number","toString","parseEther","BigInt","Math","floor","parseFloat","Contract","balanceOf","mockResolvedValue","symbol","decimals","contractService","mockContractService","mockEthereum","request","on","removeListener","isMetaMask","initialize","undefined","getTokenBalance","send","getSigner","getAddress","getNetwork","chainId","getBalance","TestComponent","wallet","connect","disconnect","isConnecting","useWallet","handleConnect","error","console","handleDisconnect","div","data-testid","isConnected","address","balance","bnb","sm","button","onClick","describe","beforeEach","clearAllMocks","mockClear","Object","defineProperty","window","writable","configurable","it","render","WalletProvider","expect","screen","getByTestId","toHaveTextContent","connectButton","act","fireEvent","click","waitFor","timeout","disconnectButton","mockRejectedValue","Error"],"mappings":"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"}