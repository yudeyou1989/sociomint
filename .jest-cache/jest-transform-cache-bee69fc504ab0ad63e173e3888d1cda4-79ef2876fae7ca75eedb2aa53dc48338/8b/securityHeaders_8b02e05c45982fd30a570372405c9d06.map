{"version":3,"names":["corsHeaders","cov_1o14oyrvtx","f","s","default","_default","generateCSRFToken","isValidTxHash","isValidWalletAddress","maskSensitiveData","preventSQLInjection","preventXSS","rateLimit","sanitizeInput","securityHeaders","securityLog","validateCSRFToken","request","response","_server","NextResponse","next","csp","join","headers","set","process","env","NODE_ENV","b","delete","origin","get","allowedOrigins","includes","rateLimitMap","Map","limit","windowMs","ip","now","Date","windowStart","userRequests","validRequests","filter","timestamp","length","status","Math","ceil","toString","push","input","replace","trim","slice","address","ethAddressRegex","test","hash","txHashRegex","query","sqlInjectionPatterns","some","pattern","array","Uint8Array","crypto","getRandomValues","Array","from","byte","padStart","token","sessionToken","data","sensitiveFields","masked","field","event","details","level","logEntry","toISOString","userAgent","console","log","toUpperCase","JSON","stringify"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/middleware/securityHeaders.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * 安全头部中间件\n * 添加各种安全头部以防止常见的Web攻击\n */\n\nexport function securityHeaders(request: NextRequest) {\n  const response = NextResponse.next();\n\n  // Content Security Policy (CSP)\n  const csp = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://vercel.live https://cdn.jsdelivr.net https://unpkg.com\",\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n    \"font-src 'self' https://fonts.gstatic.com\",\n    \"img-src 'self' data: https: blob:\",\n    \"media-src 'self' data: https:\",\n    \"connect-src 'self' https: wss: ws:\",\n    \"frame-src 'self' https:\",\n    \"object-src 'none'\",\n    \"base-uri 'self'\",\n    \"form-action 'self'\",\n    \"frame-ancestors 'none'\",\n    \"upgrade-insecure-requests\"\n  ].join('; ');\n\n  // 设置安全头部\n  response.headers.set('Content-Security-Policy', csp);\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Permissions-Policy', \n    'camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()'\n  );\n\n  // HTTPS强制 (生产环境)\n  if (process.env.NODE_ENV === 'production') {\n    response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\n  }\n\n  // 移除服务器信息\n  response.headers.delete('Server');\n  response.headers.delete('X-Powered-By');\n\n  return response;\n}\n\n/**\n * CORS配置\n */\nexport function corsHeaders(request: NextRequest) {\n  const response = NextResponse.next();\n  \n  const origin = request.headers.get('origin');\n  const allowedOrigins = [\n    'https://sociomint.top',\n    'https://www.sociomint.top',\n    'http://localhost:3000',\n    'http://localhost:3001'\n  ];\n\n  if (origin && allowedOrigins.includes(origin)) {\n    response.headers.set('Access-Control-Allow-Origin', origin);\n  }\n\n  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n  response.headers.set('Access-Control-Max-Age', '86400');\n\n  return response;\n}\n\n/**\n * 速率限制\n */\nconst rateLimitMap = new Map();\n\nexport function rateLimit(request: NextRequest, limit: number = 100, windowMs: number = 60000) {\n  const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown';\n  const now = Date.now();\n  const windowStart = now - windowMs;\n\n  // 清理过期记录\n  const userRequests = rateLimitMap.get(ip) || [];\n  const validRequests = userRequests.filter((timestamp: number) => timestamp > windowStart);\n\n  if (validRequests.length >= limit) {\n    return new NextResponse('Too Many Requests', { \n      status: 429,\n      headers: {\n        'Retry-After': Math.ceil(windowMs / 1000).toString(),\n        'X-RateLimit-Limit': limit.toString(),\n        'X-RateLimit-Remaining': '0',\n        'X-RateLimit-Reset': Math.ceil((windowStart + windowMs) / 1000).toString()\n      }\n    });\n  }\n\n  // 记录当前请求\n  validRequests.push(now);\n  rateLimitMap.set(ip, validRequests);\n\n  const response = NextResponse.next();\n  response.headers.set('X-RateLimit-Limit', limit.toString());\n  response.headers.set('X-RateLimit-Remaining', (limit - validRequests.length).toString());\n  response.headers.set('X-RateLimit-Reset', Math.ceil((windowStart + windowMs) / 1000).toString());\n\n  return response;\n}\n\n/**\n * 输入验证和清理\n */\nexport function sanitizeInput(input: string): string {\n  if (typeof input !== 'string') return '';\n  \n  return input\n    .replace(/[<>]/g, '') // 移除潜在的HTML标签\n    .replace(/javascript:/gi, '') // 移除JavaScript协议\n    .replace(/on\\w+=/gi, '') // 移除事件处理器\n    .trim()\n    .slice(0, 1000); // 限制长度\n}\n\n/**\n * 验证钱包地址\n */\nexport function isValidWalletAddress(address: string): boolean {\n  if (!address || typeof address !== 'string') return false;\n  \n  // 以太坊地址格式验证\n  const ethAddressRegex = /^0x[a-fA-F0-9]{40}$/;\n  return ethAddressRegex.test(address);\n}\n\n/**\n * 验证交易哈希\n */\nexport function isValidTxHash(hash: string): boolean {\n  if (!hash || typeof hash !== 'string') return false;\n  \n  // 交易哈希格式验证\n  const txHashRegex = /^0x[a-fA-F0-9]{64}$/;\n  return txHashRegex.test(hash);\n}\n\n/**\n * SQL注入防护\n */\nexport function preventSQLInjection(query: string): boolean {\n  const sqlInjectionPatterns = [\n    /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/i,\n    /(--|\\/\\*|\\*\\/|;|'|\"|`)/,\n    /(\\bOR\\b|\\bAND\\b).*?[=<>]/i\n  ];\n\n  return !sqlInjectionPatterns.some(pattern => pattern.test(query));\n}\n\n/**\n * XSS防护\n */\nexport function preventXSS(input: string): string {\n  if (typeof input !== 'string') return '';\n  \n  return input\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * CSRF Token生成和验证\n */\nexport function generateCSRFToken(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport function validateCSRFToken(token: string, sessionToken: string): boolean {\n  if (!token || !sessionToken) return false;\n  return token === sessionToken;\n}\n\n/**\n * 敏感数据脱敏\n */\nexport function maskSensitiveData(data: any): any {\n  if (typeof data !== 'object' || data === null) return data;\n  \n  const sensitiveFields = ['password', 'privateKey', 'secret', 'token', 'key'];\n  const masked = { ...data };\n  \n  for (const field of sensitiveFields) {\n    if (masked[field]) {\n      masked[field] = '***MASKED***';\n    }\n  }\n  \n  return masked;\n}\n\n/**\n * 安全日志记录\n */\nexport function securityLog(event: string, details: any, level: 'info' | 'warn' | 'error' = 'info') {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    event,\n    details: maskSensitiveData(details),\n    level,\n    userAgent: details.userAgent || 'unknown',\n    ip: details.ip || 'unknown'\n  };\n  \n  console.log(`[SECURITY-${level.toUpperCase()}]`, JSON.stringify(logEntry));\n  \n  // 在生产环境中，这里应该发送到安全监控系统\n  if (process.env.NODE_ENV === 'production' && level === 'error') {\n    // 发送到Sentry或其他监控服务\n  }\n}\n\nexport default {\n  securityHeaders,\n  corsHeaders,\n  rateLimit,\n  sanitizeInput,\n  isValidWalletAddress,\n  isValidTxHash,\n  preventSQLInjection,\n  preventXSS,\n  generateCSRFToken,\n  validateCSRFToken,\n  maskSensitiveData,\n  securityLog\n};\n"],"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","ignoreList":[]}