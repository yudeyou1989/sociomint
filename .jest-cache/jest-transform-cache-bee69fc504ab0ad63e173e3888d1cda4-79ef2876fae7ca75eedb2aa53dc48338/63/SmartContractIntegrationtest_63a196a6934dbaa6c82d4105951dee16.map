{"version":3,"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/__tests__/integration/SmartContractIntegration.test.ts"],"sourcesContent":["/**\n * 智能合约集成测试\n * 测试前端与智能合约的完整交互流程\n */\n\n// 简化的智能合约集成测试\n// 避免复杂的 ethers 依赖问题\n\n// 模拟合约 ABI 和地址\nconst MOCK_TOKEN_ADDRESS = '0xd7d7dd989642222B6f685aF0220dc0065F489ae0';\nconst MOCK_EXCHANGE_ADDRESS = '0xF0c4729f07d7B2F03E2E2F2feED36386Dc8bFb8E';\n\n// 模拟合约实例\nconst mockTokenContract = {\n  name: jest.fn().mockResolvedValue('SocioMint Token'),\n  symbol: jest.fn().mockResolvedValue('SM'),\n  decimals: jest.fn().mockResolvedValue(18),\n  totalSupply: jest.fn().mockResolvedValue(BigInt('1000000000000000000000000000')),\n  balanceOf: jest.fn().mockResolvedValue(BigInt('100000000000000000000')),\n  allowance: jest.fn().mockResolvedValue(BigInt('0')),\n  approve: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  transfer: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  hasRole: jest.fn().mockResolvedValue(true),\n  scheduleMint: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  executeMint: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  pause: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  unpause: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  paused: jest.fn().mockResolvedValue(false),\n};\n\nconst mockExchangeContract = {\n  exchangeActive: jest.fn().mockResolvedValue(true),\n  currentRound: jest.fn().mockResolvedValue(0),\n  totalTokensSold: jest.fn().mockResolvedValue(BigInt('1000000000000000000000')),\n  totalTokensForSale: jest.fn().mockResolvedValue(BigInt('10000000000000000000000')),\n  minPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000')),\n  maxPurchaseAmount: jest.fn().mockResolvedValue(BigInt('10000000000000000000')),\n  getExchangeStats: jest.fn().mockResolvedValue({\n    totalTokensSold: BigInt('1000000000000000000000'),\n    totalTokensRemaining: BigInt('9000000000000000000000'),\n    totalBnbRaised: BigInt('100000000000000000000'),\n    currentPrice: BigInt('833000000000'),\n    nextRoundPrice: BigInt('974900000000'),\n    isActive: true,\n    currentRound: 0,\n  }),\n  exchangeTokens: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  getUserData: jest.fn().mockResolvedValue({\n    totalPurchased: BigInt('100000000000000000000'),\n    lastPurchaseTime: BigInt('1640995200'),\n    isVerified: true,\n  }),\n  isUserVerified: jest.fn().mockResolvedValue(true),\n  verifyUser: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  setExchangeActive: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  updateRoundPrice: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n  withdrawFunds: jest.fn().mockResolvedValue({\n    hash: '0x123456789abcdef',\n    wait: jest.fn().mockResolvedValue({ status: 1 })\n  }),\n};\n\nconst mockProvider = {\n  getSigner: jest.fn().mockResolvedValue({\n    getAddress: jest.fn().mockResolvedValue('0x123456789abcdef123456789abcdef123456789a'),\n  }),\n  getBalance: jest.fn().mockResolvedValue(BigInt('1000000000000000000')),\n  getNetwork: jest.fn().mockResolvedValue({ chainId: 97n, name: 'bsc-testnet' }),\n  send: jest.fn().mockResolvedValue(['0x123456789abcdef123456789abcdef123456789a']),\n};\n\n// 模拟 ethers\njest.mock('ethers', () => ({\n  BrowserProvider: jest.fn().mockImplementation(() => mockProvider),\n  JsonRpcProvider: jest.fn().mockImplementation(() => mockProvider),\n  Contract: jest.fn().mockImplementation((address) => {\n    if (address === MOCK_TOKEN_ADDRESS) {\n      return mockTokenContract;\n    } else if (address === MOCK_EXCHANGE_ADDRESS) {\n      return mockExchangeContract;\n    }\n    return {};\n  }),\n  formatEther: jest.fn().mockImplementation((value) => {\n    return (Number(value) / 1e18).toString();\n  }),\n  formatUnits: jest.fn().mockImplementation((value, decimals) => {\n    return (Number(value) / Math.pow(10, decimals)).toString();\n  }),\n  parseEther: jest.fn().mockImplementation((value) => {\n    return BigInt(Math.floor(parseFloat(value) * 1e18));\n  }),\n  parseUnits: jest.fn().mockImplementation((value, decimals) => {\n    return BigInt(Math.floor(parseFloat(value) * Math.pow(10, decimals)));\n  }),\n}));\n\n// Mock ContractService class\nclass MockContractService {\n  private provider: any = null;\n  private signer: any = null;\n\n  async initialize(provider: any) {\n    this.provider = provider;\n    this.signer = await provider.getSigner();\n  }\n\n  async getTokenBalance(address: string) {\n    return mockTokenContract.balanceOf(address);\n  }\n\n  async getBNBBalance(address: string) {\n    return this.provider.getBalance(address);\n  }\n\n  async hasRole(role: string, address: string) {\n    return mockTokenContract.hasRole(role, address);\n  }\n\n  async scheduleMint(to: string, amount: string) {\n    return mockTokenContract.scheduleMint(to, amount);\n  }\n\n  async executeMint(actionHash: string) {\n    return mockTokenContract.executeMint(actionHash);\n  }\n\n  async pause() {\n    return mockTokenContract.pause();\n  }\n\n  async unpause() {\n    return mockTokenContract.unpause();\n  }\n\n  async paused() {\n    return mockTokenContract.paused();\n  }\n\n  async getExchangeStats() {\n    return mockExchangeContract.getExchangeStats();\n  }\n\n  async exchangeTokens(bnbAmount: string) {\n    return mockExchangeContract.exchangeTokens({ value: bnbAmount });\n  }\n\n  async getUserData(address: string) {\n    return mockExchangeContract.getUserData(address);\n  }\n\n  async verifyUser(address: string) {\n    return mockExchangeContract.verifyUser(address);\n  }\n\n  async updateExchangeStatus(isActive: boolean) {\n    return mockExchangeContract.updateExchangeStatus(isActive);\n  }\n\n  async updateRoundPrice(newPrice: string) {\n    return mockExchangeContract.updateRoundPrice(newPrice);\n  }\n\n  async withdrawFunds(amount: string) {\n    return mockExchangeContract.withdrawFunds(amount);\n  }\n\n  async waitForTransaction(hash: string) {\n    return this.provider.waitForTransaction(hash);\n  }\n\n  async estimateGas(method: string, ...args: any[]) {\n    return BigInt('150000');\n  }\n\n  onTokenExchange(callback: Function) {\n    // Mock event listener\n  }\n\n  removeAllListeners() {\n    // Mock remove listeners\n  }\n}\n\ndescribe('Smart Contract Integration Tests', () => {\n  let contractService: MockContractService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    contractService = new MockContractService();\n  });\n\n  describe('Contract Service Initialization', () => {\n    it('should initialize contract service with provider', async () => {\n      await contractService.initialize(mockProvider);\n\n      expect(mockProvider.getSigner).toHaveBeenCalled();\n      expect(ethers.Contract).toHaveBeenCalledTimes(2);\n    });\n\n    it('should throw error when not initialized', async () => {\n      await expect(contractService.getSMTokenBalance('0x123')).rejects.toThrow('合约服务未初始化');\n    });\n  });\n\n  describe('Token Contract Interactions', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should get token balance correctly', async () => {\n      const balance = await contractService.getSMTokenBalance('0x123456789abcdef');\n\n      expect(mockTokenContract.balanceOf).toHaveBeenCalledWith('0x123456789abcdef');\n      expect(ethers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('100');\n    });\n\n    it('should get BNB balance correctly', async () => {\n      const balance = await contractService.getBNBBalance('0x123456789abcdef');\n\n      expect(mockProvider.getBalance).toHaveBeenCalledWith('0x123456789abcdef');\n      expect(ethers.formatEther).toHaveBeenCalled();\n      expect(balance).toBe('1');\n    });\n\n    it('should check user roles correctly', async () => {\n      const hasRole = await mockTokenContract.hasRole('0x123', '0x456');\n\n      expect(hasRole).toBe(true);\n      expect(mockTokenContract.hasRole).toHaveBeenCalledWith('0x123', '0x456');\n    });\n\n    it('should schedule mint operation', async () => {\n      const result = await mockTokenContract.scheduleMint(\n        '0x123456789abcdef',\n        ethers.parseEther('1000')\n      );\n\n      expect(mockTokenContract.scheduleMint).toHaveBeenCalled();\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should execute mint operation', async () => {\n      const actionHash = '0xabcdef123456789';\n      const result = await mockTokenContract.executeMint(\n        actionHash,\n        '0x123456789abcdef',\n        ethers.parseEther('1000')\n      );\n\n      expect(mockTokenContract.executeMint).toHaveBeenCalledWith(\n        actionHash,\n        '0x123456789abcdef',\n        ethers.parseEther('1000')\n      );\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should handle pause/unpause operations', async () => {\n      // Test pause\n      const pauseResult = await mockTokenContract.pause();\n      expect(mockTokenContract.pause).toHaveBeenCalled();\n      expect(pauseResult.hash).toBe('0x123456789abcdef');\n\n      // Test unpause\n      const unpauseResult = await mockTokenContract.unpause();\n      expect(mockTokenContract.unpause).toHaveBeenCalled();\n      expect(unpauseResult.hash).toBe('0x123456789abcdef');\n\n      // Test paused status\n      const isPaused = await mockTokenContract.paused();\n      expect(mockTokenContract.paused).toHaveBeenCalled();\n      expect(isPaused).toBe(false);\n    });\n  });\n\n  describe('Exchange Contract Interactions', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should get exchange statistics correctly', async () => {\n      const stats = await contractService.getExchangeStats();\n\n      expect(mockExchangeContract.getExchangeStats).toHaveBeenCalled();\n      expect(stats).toEqual({\n        totalTokensSold: '1000',\n        totalTokensRemaining: '9000',\n        totalBnbRaised: '100',\n        currentPrice: '0.000000000833',\n        nextRoundPrice: '0.0000000009749',\n        isActive: true,\n        currentRound: 0,\n      });\n    });\n\n    it('should exchange tokens correctly', async () => {\n      const result = await contractService.exchangeTokens('1.0');\n\n      expect(ethers.parseEther).toHaveBeenCalledWith('1.0');\n      expect(mockExchangeContract.exchangeTokens).toHaveBeenCalledWith({\n        value: ethers.parseEther('1.0'),\n      });\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should get user data correctly', async () => {\n      const userData = await mockExchangeContract.getUserData('0x123456789abcdef');\n\n      expect(mockExchangeContract.getUserData).toHaveBeenCalledWith('0x123456789abcdef');\n      expect(userData.totalPurchased).toBe(BigInt('100000000000000000000'));\n      expect(userData.isVerified).toBe(true);\n    });\n\n    it('should verify user correctly', async () => {\n      const result = await mockExchangeContract.verifyUser('0x123456789abcdef', true);\n\n      expect(mockExchangeContract.verifyUser).toHaveBeenCalledWith('0x123456789abcdef', true);\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should update exchange status', async () => {\n      const result = await mockExchangeContract.setExchangeActive(false);\n\n      expect(mockExchangeContract.setExchangeActive).toHaveBeenCalledWith(false);\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should update round price', async () => {\n      const newPrice = ethers.parseUnits('0.000001', 18);\n      const result = await mockExchangeContract.updateRoundPrice(1, newPrice);\n\n      expect(mockExchangeContract.updateRoundPrice).toHaveBeenCalledWith(1, newPrice);\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n\n    it('should withdraw funds', async () => {\n      const amount = ethers.parseEther('10');\n      const result = await mockExchangeContract.withdrawFunds(amount);\n\n      expect(mockExchangeContract.withdrawFunds).toHaveBeenCalledWith(amount);\n      expect(result.hash).toBe('0x123456789abcdef');\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should handle contract call failures', async () => {\n      mockTokenContract.balanceOf.mockRejectedValue(new Error('Contract call failed'));\n\n      await expect(contractService.getSMTokenBalance('0x123')).rejects.toThrow('Contract call failed');\n    });\n\n    it('should handle transaction failures', async () => {\n      mockExchangeContract.exchangeTokens.mockRejectedValue(new Error('Transaction failed'));\n\n      await expect(contractService.exchangeTokens('1.0')).rejects.toThrow('Transaction failed');\n    });\n\n    it('should handle network errors', async () => {\n      mockProvider.getBalance.mockRejectedValue(new Error('Network error'));\n\n      await expect(contractService.getBNBBalance('0x123')).rejects.toThrow('Network error');\n    });\n  });\n\n  describe('Transaction Monitoring', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should wait for transaction confirmation', async () => {\n      const mockTx = {\n        hash: '0x123456789abcdef',\n        wait: jest.fn().mockResolvedValue({ status: 1, blockNumber: 12345 })\n      };\n\n      mockExchangeContract.exchangeTokens.mockResolvedValue(mockTx);\n\n      const result = await contractService.exchangeTokens('1.0');\n\n      expect(result.hash).toBe('0x123456789abcdef');\n      expect(mockTx.wait).toHaveBeenCalled();\n    });\n\n    it('should handle failed transactions', async () => {\n      const mockTx = {\n        hash: '0x123456789abcdef',\n        wait: jest.fn().mockResolvedValue({ status: 0 })\n      };\n\n      mockExchangeContract.exchangeTokens.mockResolvedValue(mockTx);\n\n      const result = await contractService.exchangeTokens('1.0');\n\n      expect(result.hash).toBe('0x123456789abcdef');\n      // 应该检查交易状态\n    });\n  });\n\n  describe('Gas Estimation', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should estimate gas for token exchange', async () => {\n      const mockEstimateGas = jest.fn().mockResolvedValue(BigInt('21000'));\n      mockExchangeContract.estimateGas = {\n        exchangeTokens: mockEstimateGas\n      };\n\n      // 这里应该测试 gas 估算功能\n      // 由于当前实现可能没有 gas 估算，这是一个改进点\n    });\n  });\n\n  describe('Event Listening', () => {\n    beforeEach(async () => {\n      await contractService.initialize(mockProvider);\n    });\n\n    it('should listen to token exchange events', async () => {\n      const mockOn = jest.fn();\n      mockExchangeContract.on = mockOn;\n\n      // 这里应该测试事件监听功能\n      // 由于当前实现可能没有事件监听，这是一个改进点\n    });\n  });\n});\n"],"names":["jest","mock","BrowserProvider","fn","mockImplementation","mockProvider","JsonRpcProvider","Contract","address","MOCK_TOKEN_ADDRESS","mockTokenContract","MOCK_EXCHANGE_ADDRESS","mockExchangeContract","formatEther","value","Number","toString","formatUnits","decimals","Math","pow","parseEther","BigInt","floor","parseFloat","parseUnits","name","mockResolvedValue","symbol","totalSupply","balanceOf","allowance","approve","hash","wait","status","transfer","hasRole","scheduleMint","executeMint","pause","unpause","paused","exchangeActive","currentRound","totalTokensSold","totalTokensForSale","minPurchaseAmount","maxPurchaseAmount","getExchangeStats","totalTokensRemaining","totalBnbRaised","currentPrice","nextRoundPrice","isActive","exchangeTokens","getUserData","totalPurchased","lastPurchaseTime","isVerified","isUserVerified","verifyUser","setExchangeActive","updateRoundPrice","withdrawFunds","getSigner","getAddress","getBalance","getNetwork","chainId","send","MockContractService","initialize","provider","signer","getTokenBalance","getBNBBalance","role","to","amount","actionHash","bnbAmount","updateExchangeStatus","newPrice","waitForTransaction","estimateGas","method","args","onTokenExchange","callback","removeAllListeners","describe","contractService","beforeEach","clearAllMocks","it","expect","toHaveBeenCalled","ethers","toHaveBeenCalledTimes","getSMTokenBalance","rejects","toThrow","balance","toHaveBeenCalledWith","toBe","result","pauseResult","unpauseResult","isPaused","stats","toEqual","userData","mockRejectedValue","Error","mockTx","blockNumber","mockEstimateGas","mockOn","on"],"mappings":"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"}