{"version":3,"names":["cov_bwfwkgrwq","actualCoverage","s","useSMToken","f","address","isConnected","_wagmi","useAccount","MINTER_ROLE","_viem","keccak256","toBytes","data","tokenName","useContractRead","_contracts","CONTRACT_ADDRESSES","token","abi","SM_TOKEN_ABI","functionName","enabled","tokenSymbol","balance","refetch","refetchBalance","args","b","undefined","hasMinterRole","scheduleMintData","write","scheduleMint","isLoading","isSchedulingMint","isSuccess","isScheduleMintSuccess","error","scheduleMintError","useContractWrite","isScheduleMintPending","isScheduleMintConfirmed","useWaitForTransaction","hash","executeMintData","executeMint","isExecutingMint","isExecuteMintSuccess","executeMintError","isExecuteMintPending","isExecuteMintConfirmed","scheduleMintTxHash","executeMintTxHash"],"sources":["/Users/yudeyou/Desktop/sm/sociomint/src/useSMToken.ts"],"sourcesContent":["'use client';\n\nimport { useAccount, useContractRead, useContractWrite, useWaitForTransaction } from 'wagmi';\nimport { CONTRACT_ADDRESSES, SM_TOKEN_ABI } from '@/constants/contracts';\nimport { keccak256, toBytes } from 'viem';\n\nexport function useSMToken() {\n  const { address, isConnected } = useAccount();\n\n  // 安全地计算角色哈希，避免硬编码\n  const MINTER_ROLE = keccak256(toBytes('MINTER_ROLE'));\n\n  // 获取代币信息\n  const { data: tokenName } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'name',\n    enabled: isConnected,\n  });\n\n  const { data: tokenSymbol } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'symbol',\n    enabled: isConnected,\n  });\n\n  // 获取用户余额\n  const { data: balance, refetch: refetchBalance } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'balanceOf',\n    args: address ? [address] : undefined,\n    enabled: isConnected && !!address,\n  });\n\n  // 检查用户角色\n  const { data: hasMinterRole } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'hasRole',\n    args: address ? [MINTER_ROLE, address] : undefined,\n    enabled: isConnected && !!address,\n  });\n\n  // 安排铸币函数\n  const {\n    data: scheduleMintData,\n    write: scheduleMint,\n    isLoading: isSchedulingMint,\n    isSuccess: isScheduleMintSuccess,\n    error: scheduleMintError\n  } = useContractWrite({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'scheduleMint',\n  });\n\n  // 等待铸币交易确认\n  const {\n    isLoading: isScheduleMintPending,\n    isSuccess: isScheduleMintConfirmed\n  } = useWaitForTransaction({\n    hash: scheduleMintData?.hash,\n  });\n\n  // 执行铸币函数\n  const {\n    data: executeMintData,\n    write: executeMint,\n    isLoading: isExecutingMint,\n    isSuccess: isExecuteMintSuccess,\n    error: executeMintError\n  } = useContractWrite({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'executeMint',\n  });\n\n  // 等待执行铸币交易确认\n  const {\n    isLoading: isExecuteMintPending,\n    isSuccess: isExecuteMintConfirmed\n  } = useWaitForTransaction({\n    hash: executeMintData?.hash,\n  });\n\n  return {\n    // 代币信息\n    tokenName,\n    tokenSymbol,\n    balance,\n    refetchBalance,\n\n    // 用户角色\n    hasMinterRole,\n\n    // 铸币功能\n    scheduleMint,\n    isSchedulingMint: isSchedulingMint || isScheduleMintPending,\n    isScheduleMintSuccess: isScheduleMintSuccess && isScheduleMintConfirmed,\n    scheduleMintError,\n    scheduleMintTxHash: scheduleMintData?.hash,\n\n    executeMint,\n    isExecutingMint: isExecutingMint || isExecuteMintPending,\n    isExecuteMintSuccess: isExecuteMintSuccess && isExecuteMintConfirmed,\n    executeMintError,\n    executeMintTxHash: executeMintData?.hash,\n\n    // 连接状态\n    isConnected,\n    address\n  };\n}\n"],"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","ignoreList":[]}