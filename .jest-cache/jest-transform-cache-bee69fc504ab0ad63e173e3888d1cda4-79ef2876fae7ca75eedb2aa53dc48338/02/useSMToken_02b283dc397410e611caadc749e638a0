7995d53b64d18b1e78d4a299c2c8cea4
'use client';
"use strict";

/* istanbul ignore next */
function cov_bwfwkgrwq() {
  var path = "/Users/yudeyou/Desktop/sm/sociomint/src/useSMToken.ts";
  var hash = "e46be5b4612c6e0503ec437daee8e0d8f1870a73";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yudeyou/Desktop/sm/sociomint/src/useSMToken.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "3": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "5": {
        start: {
          line: 14,
          column: 14
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "6": {
        start: {
          line: 16,
          column: 37
        },
        end: {
          line: 16,
          column: 61
        }
      },
      "7": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 79
        }
      },
      "8": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "9": {
        start: {
          line: 26,
          column: 34
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "10": {
        start: {
          line: 33,
          column: 55
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "11": {
        start: {
          line: 43,
          column: 36
        },
        end: {
          line: 52,
          column: 6
        }
      },
      "12": {
        start: {
          line: 54,
          column: 149
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "13": {
        start: {
          line: 60,
          column: 85
        },
        end: {
          line: 62,
          column: 6
        }
      },
      "14": {
        start: {
          line: 64,
          column: 144
        },
        end: {
          line: 68,
          column: 6
        }
      },
      "15": {
        start: {
          line: 70,
          column: 83
        },
        end: {
          line: 72,
          column: 6
        }
      },
      "16": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 95,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "useSMToken",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 19
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 14
          },
          end: {
            line: 39,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 21
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 17
          },
          end: {
            line: 40,
            column: 28
          }
        }, {
          start: {
            line: 40,
            column: 32
          },
          end: {
            line: 40,
            column: 41
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 14
          },
          end: {
            line: 50,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 21
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 51,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 51,
            column: 28
          }
        }, {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 41
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 26
          },
          end: {
            line: 83,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 26
          },
          end: {
            line: 83,
            column: 42
          }
        }, {
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 83,
            column: 67
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 31
          },
          end: {
            line: 84,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 31
          },
          end: {
            line: 84,
            column: 52
          }
        }, {
          start: {
            line: 84,
            column: 56
          },
          end: {
            line: 84,
            column: 79
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 88,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 88,
            column: 40
          }
        }, {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 88,
            column: 64
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 30
          },
          end: {
            line: 89,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 30
          },
          end: {
            line: 89,
            column: 50
          }
        }, {
          start: {
            line: 89,
            column: 54
          },
          end: {
            line: 89,
            column: 76
          }
        }],
        line: 89
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/yudeyou/Desktop/sm/sociomint/src/useSMToken.ts"],
      sourcesContent: ["'use client';\n\nimport { useAccount, useContractRead, useContractWrite, useWaitForTransaction } from 'wagmi';\nimport { CONTRACT_ADDRESSES, SM_TOKEN_ABI } from '@/constants/contracts';\nimport { keccak256, toBytes } from 'viem';\n\nexport function useSMToken() {\n  const { address, isConnected } = useAccount();\n\n  // \u5B89\u5168\u5730\u8BA1\u7B97\u89D2\u8272\u54C8\u5E0C\uFF0C\u907F\u514D\u786C\u7F16\u7801\n  const MINTER_ROLE = keccak256(toBytes('MINTER_ROLE'));\n\n  // \u83B7\u53D6\u4EE3\u5E01\u4FE1\u606F\n  const { data: tokenName } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'name',\n    enabled: isConnected,\n  });\n\n  const { data: tokenSymbol } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'symbol',\n    enabled: isConnected,\n  });\n\n  // \u83B7\u53D6\u7528\u6237\u4F59\u989D\n  const { data: balance, refetch: refetchBalance } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'balanceOf',\n    args: address ? [address] : undefined,\n    enabled: isConnected && !!address,\n  });\n\n  // \u68C0\u67E5\u7528\u6237\u89D2\u8272\n  const { data: hasMinterRole } = useContractRead({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'hasRole',\n    args: address ? [MINTER_ROLE, address] : undefined,\n    enabled: isConnected && !!address,\n  });\n\n  // \u5B89\u6392\u94F8\u5E01\u51FD\u6570\n  const {\n    data: scheduleMintData,\n    write: scheduleMint,\n    isLoading: isSchedulingMint,\n    isSuccess: isScheduleMintSuccess,\n    error: scheduleMintError\n  } = useContractWrite({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'scheduleMint',\n  });\n\n  // \u7B49\u5F85\u94F8\u5E01\u4EA4\u6613\u786E\u8BA4\n  const {\n    isLoading: isScheduleMintPending,\n    isSuccess: isScheduleMintConfirmed\n  } = useWaitForTransaction({\n    hash: scheduleMintData?.hash,\n  });\n\n  // \u6267\u884C\u94F8\u5E01\u51FD\u6570\n  const {\n    data: executeMintData,\n    write: executeMint,\n    isLoading: isExecutingMint,\n    isSuccess: isExecuteMintSuccess,\n    error: executeMintError\n  } = useContractWrite({\n    address: CONTRACT_ADDRESSES.token as `0x${string}`,\n    abi: SM_TOKEN_ABI,\n    functionName: 'executeMint',\n  });\n\n  // \u7B49\u5F85\u6267\u884C\u94F8\u5E01\u4EA4\u6613\u786E\u8BA4\n  const {\n    isLoading: isExecuteMintPending,\n    isSuccess: isExecuteMintConfirmed\n  } = useWaitForTransaction({\n    hash: executeMintData?.hash,\n  });\n\n  return {\n    // \u4EE3\u5E01\u4FE1\u606F\n    tokenName,\n    tokenSymbol,\n    balance,\n    refetchBalance,\n\n    // \u7528\u6237\u89D2\u8272\n    hasMinterRole,\n\n    // \u94F8\u5E01\u529F\u80FD\n    scheduleMint,\n    isSchedulingMint: isSchedulingMint || isScheduleMintPending,\n    isScheduleMintSuccess: isScheduleMintSuccess && isScheduleMintConfirmed,\n    scheduleMintError,\n    scheduleMintTxHash: scheduleMintData?.hash,\n\n    executeMint,\n    isExecutingMint: isExecutingMint || isExecuteMintPending,\n    isExecuteMintSuccess: isExecuteMintSuccess && isExecuteMintConfirmed,\n    executeMintError,\n    executeMintTxHash: executeMintData?.hash,\n\n    // \u8FDE\u63A5\u72B6\u6001\n    isConnected,\n    address\n  };\n}\n"],
      names: ["useSMToken", "address", "isConnected", "useAccount", "MINTER_ROLE", "keccak256", "toBytes", "data", "tokenName", "useContractRead", "CONTRACT_ADDRESSES", "token", "abi", "SM_TOKEN_ABI", "functionName", "enabled", "tokenSymbol", "balance", "refetch", "refetchBalance", "args", "undefined", "hasMinterRole", "scheduleMintData", "write", "scheduleMint", "isLoading", "isSchedulingMint", "isSuccess", "isScheduleMintSuccess", "error", "scheduleMintError", "useContractWrite", "isScheduleMintPending", "isScheduleMintConfirmed", "useWaitForTransaction", "hash", "executeMintData", "executeMint", "isExecutingMint", "isExecuteMintSuccess", "executeMintError", "isExecuteMintPending", "isExecuteMintConfirmed", "scheduleMintTxHash", "executeMintTxHash"],
      mappings: "AAAA;;;;;+BAMgBA;;;eAAAA;;;uBAJqE;2BACpC;sBACd;AAE5B,SAASA;IACd,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAE,GAAGC,IAAAA,iBAAU;IAE3C,kBAAkB;IAClB,MAAMC,cAAcC,IAAAA,eAAS,EAACC,IAAAA,aAAO,EAAC;IAEtC,SAAS;IACT,MAAM,EAAEC,MAAMC,SAAS,EAAE,GAAGC,IAAAA,sBAAe,EAAC;QAC1CR,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;QACdC,SAASb;IACX;IAEA,MAAM,EAAEK,MAAMS,WAAW,EAAE,GAAGP,IAAAA,sBAAe,EAAC;QAC5CR,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;QACdC,SAASb;IACX;IAEA,SAAS;IACT,MAAM,EAAEK,MAAMU,OAAO,EAAEC,SAASC,cAAc,EAAE,GAAGV,IAAAA,sBAAe,EAAC;QACjER,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;QACdM,MAAMnB,UAAU;YAACA;SAAQ,GAAGoB;QAC5BN,SAASb,eAAe,CAAC,CAACD;IAC5B;IAEA,SAAS;IACT,MAAM,EAAEM,MAAMe,aAAa,EAAE,GAAGb,IAAAA,sBAAe,EAAC;QAC9CR,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;QACdM,MAAMnB,UAAU;YAACG;YAAaH;SAAQ,GAAGoB;QACzCN,SAASb,eAAe,CAAC,CAACD;IAC5B;IAEA,SAAS;IACT,MAAM,EACJM,MAAMgB,gBAAgB,EACtBC,OAAOC,YAAY,EACnBC,WAAWC,gBAAgB,EAC3BC,WAAWC,qBAAqB,EAChCC,OAAOC,iBAAiB,EACzB,GAAGC,IAAAA,uBAAgB,EAAC;QACnB/B,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;IAChB;IAEA,WAAW;IACX,MAAM,EACJY,WAAWO,qBAAqB,EAChCL,WAAWM,uBAAuB,EACnC,GAAGC,IAAAA,4BAAqB,EAAC;QACxBC,MAAMb,kBAAkBa;IAC1B;IAEA,SAAS;IACT,MAAM,EACJ7B,MAAM8B,eAAe,EACrBb,OAAOc,WAAW,EAClBZ,WAAWa,eAAe,EAC1BX,WAAWY,oBAAoB,EAC/BV,OAAOW,gBAAgB,EACxB,GAAGT,IAAAA,uBAAgB,EAAC;QACnB/B,SAASS,6BAAkB,CAACC,KAAK;QACjCC,KAAKC,uBAAY;QACjBC,cAAc;IAChB;IAEA,aAAa;IACb,MAAM,EACJY,WAAWgB,oBAAoB,EAC/Bd,WAAWe,sBAAsB,EAClC,GAAGR,IAAAA,4BAAqB,EAAC;QACxBC,MAAMC,iBAAiBD;IACzB;IAEA,OAAO;QACL,OAAO;QACP5B;QACAQ;QACAC;QACAE;QAEA,OAAO;QACPG;QAEA,OAAO;QACPG;QACAE,kBAAkBA,oBAAoBM;QACtCJ,uBAAuBA,yBAAyBK;QAChDH;QACAa,oBAAoBrB,kBAAkBa;QAEtCE;QACAC,iBAAiBA,mBAAmBG;QACpCF,sBAAsBA,wBAAwBG;QAC9CF;QACAI,mBAAmBR,iBAAiBD;QAEpC,OAAO;QACPlC;QACAD;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e46be5b4612c6e0503ec437daee8e0d8f1870a73"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bwfwkgrwq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bwfwkgrwq();
cov_bwfwkgrwq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bwfwkgrwq().s[1]++;
Object.defineProperty(exports, "useSMToken", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_bwfwkgrwq().f[0]++;
    cov_bwfwkgrwq().s[2]++;
    return useSMToken;
  }
});
const _wagmi =
/* istanbul ignore next */
(cov_bwfwkgrwq().s[3]++, require("wagmi"));
const _contracts =
/* istanbul ignore next */
(cov_bwfwkgrwq().s[4]++, require("./constants/contracts"));
const _viem =
/* istanbul ignore next */
(cov_bwfwkgrwq().s[5]++, require("viem"));
function useSMToken() {
  /* istanbul ignore next */
  cov_bwfwkgrwq().f[1]++;
  const {
    address,
    isConnected
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[6]++, (0, _wagmi.useAccount)());
  // 安全地计算角色哈希，避免硬编码
  const MINTER_ROLE =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[7]++, (0, _viem.keccak256)((0, _viem.toBytes)('MINTER_ROLE')));
  // 获取代币信息
  const {
    data: tokenName
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[8]++, (0, _wagmi.useContractRead)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'name',
    enabled: isConnected
  }));
  const {
    data: tokenSymbol
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[9]++, (0, _wagmi.useContractRead)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'symbol',
    enabled: isConnected
  }));
  // 获取用户余额
  const {
    data: balance,
    refetch: refetchBalance
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[10]++, (0, _wagmi.useContractRead)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'balanceOf',
    args: address ?
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[0][0]++, [address]) :
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[0][1]++, undefined),
    enabled:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[1][0]++, isConnected) &&
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[1][1]++, !!address)
  }));
  // 检查用户角色
  const {
    data: hasMinterRole
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[11]++, (0, _wagmi.useContractRead)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'hasRole',
    args: address ?
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[2][0]++, [MINTER_ROLE, address]) :
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[2][1]++, undefined),
    enabled:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[3][0]++, isConnected) &&
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[3][1]++, !!address)
  }));
  // 安排铸币函数
  const {
    data: scheduleMintData,
    write: scheduleMint,
    isLoading: isSchedulingMint,
    isSuccess: isScheduleMintSuccess,
    error: scheduleMintError
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[12]++, (0, _wagmi.useContractWrite)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'scheduleMint'
  }));
  // 等待铸币交易确认
  const {
    isLoading: isScheduleMintPending,
    isSuccess: isScheduleMintConfirmed
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[13]++, (0, _wagmi.useWaitForTransaction)({
    hash: scheduleMintData?.hash
  }));
  // 执行铸币函数
  const {
    data: executeMintData,
    write: executeMint,
    isLoading: isExecutingMint,
    isSuccess: isExecuteMintSuccess,
    error: executeMintError
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[14]++, (0, _wagmi.useContractWrite)({
    address: _contracts.CONTRACT_ADDRESSES.token,
    abi: _contracts.SM_TOKEN_ABI,
    functionName: 'executeMint'
  }));
  // 等待执行铸币交易确认
  const {
    isLoading: isExecuteMintPending,
    isSuccess: isExecuteMintConfirmed
  } =
  /* istanbul ignore next */
  (cov_bwfwkgrwq().s[15]++, (0, _wagmi.useWaitForTransaction)({
    hash: executeMintData?.hash
  }));
  /* istanbul ignore next */
  cov_bwfwkgrwq().s[16]++;
  return {
    // 代币信息
    tokenName,
    tokenSymbol,
    balance,
    refetchBalance,
    // 用户角色
    hasMinterRole,
    // 铸币功能
    scheduleMint,
    isSchedulingMint:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[4][0]++, isSchedulingMint) ||
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[4][1]++, isScheduleMintPending),
    isScheduleMintSuccess:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[5][0]++, isScheduleMintSuccess) &&
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[5][1]++, isScheduleMintConfirmed),
    scheduleMintError,
    scheduleMintTxHash: scheduleMintData?.hash,
    executeMint,
    isExecutingMint:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[6][0]++, isExecutingMint) ||
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[6][1]++, isExecuteMintPending),
    isExecuteMintSuccess:
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[7][0]++, isExecuteMintSuccess) &&
    /* istanbul ignore next */
    (cov_bwfwkgrwq().b[7][1]++, isExecuteMintConfirmed),
    executeMintError,
    executeMintTxHash: executeMintData?.hash,
    // 连接状态
    isConnected,
    address
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,